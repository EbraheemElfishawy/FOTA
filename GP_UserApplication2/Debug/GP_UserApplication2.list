
GP_UserApplication2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c44  080201c4  080201c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08022e08  08022e08  00012e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022e98  08022e98  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08022e98  08022e98  00012e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022ea0  08022ea0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022ea0  08022ea0  00012ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022ea4  08022ea4  00012ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08022ea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000000c  08022eb4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08022eb4  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ab5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000180a  00000000  00000000  00029af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  0002b300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  0002ba50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020355  00000000  00000000  0002c118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000099d8  00000000  00000000  0004c46d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c48c2  00000000  00000000  00055e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011a707  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cf8  00000000  00000000  0011a75c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080201c4 <__do_global_dtors_aux>:
 80201c4:	b510      	push	{r4, lr}
 80201c6:	4c05      	ldr	r4, [pc, #20]	; (80201dc <__do_global_dtors_aux+0x18>)
 80201c8:	7823      	ldrb	r3, [r4, #0]
 80201ca:	b933      	cbnz	r3, 80201da <__do_global_dtors_aux+0x16>
 80201cc:	4b04      	ldr	r3, [pc, #16]	; (80201e0 <__do_global_dtors_aux+0x1c>)
 80201ce:	b113      	cbz	r3, 80201d6 <__do_global_dtors_aux+0x12>
 80201d0:	4804      	ldr	r0, [pc, #16]	; (80201e4 <__do_global_dtors_aux+0x20>)
 80201d2:	f3af 8000 	nop.w
 80201d6:	2301      	movs	r3, #1
 80201d8:	7023      	strb	r3, [r4, #0]
 80201da:	bd10      	pop	{r4, pc}
 80201dc:	2000000c 	.word	0x2000000c
 80201e0:	00000000 	.word	0x00000000
 80201e4:	08022df0 	.word	0x08022df0

080201e8 <frame_dummy>:
 80201e8:	b508      	push	{r3, lr}
 80201ea:	4b03      	ldr	r3, [pc, #12]	; (80201f8 <frame_dummy+0x10>)
 80201ec:	b11b      	cbz	r3, 80201f6 <frame_dummy+0xe>
 80201ee:	4903      	ldr	r1, [pc, #12]	; (80201fc <frame_dummy+0x14>)
 80201f0:	4803      	ldr	r0, [pc, #12]	; (8020200 <frame_dummy+0x18>)
 80201f2:	f3af 8000 	nop.w
 80201f6:	bd08      	pop	{r3, pc}
 80201f8:	00000000 	.word	0x00000000
 80201fc:	20000010 	.word	0x20000010
 8020200:	08022df0 	.word	0x08022df0

08020204 <__aeabi_uldivmod>:
 8020204:	b953      	cbnz	r3, 802021c <__aeabi_uldivmod+0x18>
 8020206:	b94a      	cbnz	r2, 802021c <__aeabi_uldivmod+0x18>
 8020208:	2900      	cmp	r1, #0
 802020a:	bf08      	it	eq
 802020c:	2800      	cmpeq	r0, #0
 802020e:	bf1c      	itt	ne
 8020210:	f04f 31ff 	movne.w	r1, #4294967295
 8020214:	f04f 30ff 	movne.w	r0, #4294967295
 8020218:	f000 b96e 	b.w	80204f8 <__aeabi_idiv0>
 802021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8020220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020224:	f000 f806 	bl	8020234 <__udivmoddi4>
 8020228:	f8dd e004 	ldr.w	lr, [sp, #4]
 802022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020230:	b004      	add	sp, #16
 8020232:	4770      	bx	lr

08020234 <__udivmoddi4>:
 8020234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020238:	9d08      	ldr	r5, [sp, #32]
 802023a:	4604      	mov	r4, r0
 802023c:	468c      	mov	ip, r1
 802023e:	2b00      	cmp	r3, #0
 8020240:	f040 8083 	bne.w	802034a <__udivmoddi4+0x116>
 8020244:	428a      	cmp	r2, r1
 8020246:	4617      	mov	r7, r2
 8020248:	d947      	bls.n	80202da <__udivmoddi4+0xa6>
 802024a:	fab2 f282 	clz	r2, r2
 802024e:	b142      	cbz	r2, 8020262 <__udivmoddi4+0x2e>
 8020250:	f1c2 0020 	rsb	r0, r2, #32
 8020254:	fa24 f000 	lsr.w	r0, r4, r0
 8020258:	4091      	lsls	r1, r2
 802025a:	4097      	lsls	r7, r2
 802025c:	ea40 0c01 	orr.w	ip, r0, r1
 8020260:	4094      	lsls	r4, r2
 8020262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8020266:	0c23      	lsrs	r3, r4, #16
 8020268:	fbbc f6f8 	udiv	r6, ip, r8
 802026c:	fa1f fe87 	uxth.w	lr, r7
 8020270:	fb08 c116 	mls	r1, r8, r6, ip
 8020274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020278:	fb06 f10e 	mul.w	r1, r6, lr
 802027c:	4299      	cmp	r1, r3
 802027e:	d909      	bls.n	8020294 <__udivmoddi4+0x60>
 8020280:	18fb      	adds	r3, r7, r3
 8020282:	f106 30ff 	add.w	r0, r6, #4294967295
 8020286:	f080 8119 	bcs.w	80204bc <__udivmoddi4+0x288>
 802028a:	4299      	cmp	r1, r3
 802028c:	f240 8116 	bls.w	80204bc <__udivmoddi4+0x288>
 8020290:	3e02      	subs	r6, #2
 8020292:	443b      	add	r3, r7
 8020294:	1a5b      	subs	r3, r3, r1
 8020296:	b2a4      	uxth	r4, r4
 8020298:	fbb3 f0f8 	udiv	r0, r3, r8
 802029c:	fb08 3310 	mls	r3, r8, r0, r3
 80202a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80202a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80202a8:	45a6      	cmp	lr, r4
 80202aa:	d909      	bls.n	80202c0 <__udivmoddi4+0x8c>
 80202ac:	193c      	adds	r4, r7, r4
 80202ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80202b2:	f080 8105 	bcs.w	80204c0 <__udivmoddi4+0x28c>
 80202b6:	45a6      	cmp	lr, r4
 80202b8:	f240 8102 	bls.w	80204c0 <__udivmoddi4+0x28c>
 80202bc:	3802      	subs	r0, #2
 80202be:	443c      	add	r4, r7
 80202c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80202c4:	eba4 040e 	sub.w	r4, r4, lr
 80202c8:	2600      	movs	r6, #0
 80202ca:	b11d      	cbz	r5, 80202d4 <__udivmoddi4+0xa0>
 80202cc:	40d4      	lsrs	r4, r2
 80202ce:	2300      	movs	r3, #0
 80202d0:	e9c5 4300 	strd	r4, r3, [r5]
 80202d4:	4631      	mov	r1, r6
 80202d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80202da:	b902      	cbnz	r2, 80202de <__udivmoddi4+0xaa>
 80202dc:	deff      	udf	#255	; 0xff
 80202de:	fab2 f282 	clz	r2, r2
 80202e2:	2a00      	cmp	r2, #0
 80202e4:	d150      	bne.n	8020388 <__udivmoddi4+0x154>
 80202e6:	1bcb      	subs	r3, r1, r7
 80202e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80202ec:	fa1f f887 	uxth.w	r8, r7
 80202f0:	2601      	movs	r6, #1
 80202f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80202f6:	0c21      	lsrs	r1, r4, #16
 80202f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80202fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020300:	fb08 f30c 	mul.w	r3, r8, ip
 8020304:	428b      	cmp	r3, r1
 8020306:	d907      	bls.n	8020318 <__udivmoddi4+0xe4>
 8020308:	1879      	adds	r1, r7, r1
 802030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 802030e:	d202      	bcs.n	8020316 <__udivmoddi4+0xe2>
 8020310:	428b      	cmp	r3, r1
 8020312:	f200 80e9 	bhi.w	80204e8 <__udivmoddi4+0x2b4>
 8020316:	4684      	mov	ip, r0
 8020318:	1ac9      	subs	r1, r1, r3
 802031a:	b2a3      	uxth	r3, r4
 802031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8020320:	fb0e 1110 	mls	r1, lr, r0, r1
 8020324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8020328:	fb08 f800 	mul.w	r8, r8, r0
 802032c:	45a0      	cmp	r8, r4
 802032e:	d907      	bls.n	8020340 <__udivmoddi4+0x10c>
 8020330:	193c      	adds	r4, r7, r4
 8020332:	f100 33ff 	add.w	r3, r0, #4294967295
 8020336:	d202      	bcs.n	802033e <__udivmoddi4+0x10a>
 8020338:	45a0      	cmp	r8, r4
 802033a:	f200 80d9 	bhi.w	80204f0 <__udivmoddi4+0x2bc>
 802033e:	4618      	mov	r0, r3
 8020340:	eba4 0408 	sub.w	r4, r4, r8
 8020344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8020348:	e7bf      	b.n	80202ca <__udivmoddi4+0x96>
 802034a:	428b      	cmp	r3, r1
 802034c:	d909      	bls.n	8020362 <__udivmoddi4+0x12e>
 802034e:	2d00      	cmp	r5, #0
 8020350:	f000 80b1 	beq.w	80204b6 <__udivmoddi4+0x282>
 8020354:	2600      	movs	r6, #0
 8020356:	e9c5 0100 	strd	r0, r1, [r5]
 802035a:	4630      	mov	r0, r6
 802035c:	4631      	mov	r1, r6
 802035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020362:	fab3 f683 	clz	r6, r3
 8020366:	2e00      	cmp	r6, #0
 8020368:	d14a      	bne.n	8020400 <__udivmoddi4+0x1cc>
 802036a:	428b      	cmp	r3, r1
 802036c:	d302      	bcc.n	8020374 <__udivmoddi4+0x140>
 802036e:	4282      	cmp	r2, r0
 8020370:	f200 80b8 	bhi.w	80204e4 <__udivmoddi4+0x2b0>
 8020374:	1a84      	subs	r4, r0, r2
 8020376:	eb61 0103 	sbc.w	r1, r1, r3
 802037a:	2001      	movs	r0, #1
 802037c:	468c      	mov	ip, r1
 802037e:	2d00      	cmp	r5, #0
 8020380:	d0a8      	beq.n	80202d4 <__udivmoddi4+0xa0>
 8020382:	e9c5 4c00 	strd	r4, ip, [r5]
 8020386:	e7a5      	b.n	80202d4 <__udivmoddi4+0xa0>
 8020388:	f1c2 0320 	rsb	r3, r2, #32
 802038c:	fa20 f603 	lsr.w	r6, r0, r3
 8020390:	4097      	lsls	r7, r2
 8020392:	fa01 f002 	lsl.w	r0, r1, r2
 8020396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 802039a:	40d9      	lsrs	r1, r3
 802039c:	4330      	orrs	r0, r6
 802039e:	0c03      	lsrs	r3, r0, #16
 80203a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80203a4:	fa1f f887 	uxth.w	r8, r7
 80203a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80203ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80203b0:	fb06 f108 	mul.w	r1, r6, r8
 80203b4:	4299      	cmp	r1, r3
 80203b6:	fa04 f402 	lsl.w	r4, r4, r2
 80203ba:	d909      	bls.n	80203d0 <__udivmoddi4+0x19c>
 80203bc:	18fb      	adds	r3, r7, r3
 80203be:	f106 3cff 	add.w	ip, r6, #4294967295
 80203c2:	f080 808d 	bcs.w	80204e0 <__udivmoddi4+0x2ac>
 80203c6:	4299      	cmp	r1, r3
 80203c8:	f240 808a 	bls.w	80204e0 <__udivmoddi4+0x2ac>
 80203cc:	3e02      	subs	r6, #2
 80203ce:	443b      	add	r3, r7
 80203d0:	1a5b      	subs	r3, r3, r1
 80203d2:	b281      	uxth	r1, r0
 80203d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80203d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80203dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80203e0:	fb00 f308 	mul.w	r3, r0, r8
 80203e4:	428b      	cmp	r3, r1
 80203e6:	d907      	bls.n	80203f8 <__udivmoddi4+0x1c4>
 80203e8:	1879      	adds	r1, r7, r1
 80203ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80203ee:	d273      	bcs.n	80204d8 <__udivmoddi4+0x2a4>
 80203f0:	428b      	cmp	r3, r1
 80203f2:	d971      	bls.n	80204d8 <__udivmoddi4+0x2a4>
 80203f4:	3802      	subs	r0, #2
 80203f6:	4439      	add	r1, r7
 80203f8:	1acb      	subs	r3, r1, r3
 80203fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80203fe:	e778      	b.n	80202f2 <__udivmoddi4+0xbe>
 8020400:	f1c6 0c20 	rsb	ip, r6, #32
 8020404:	fa03 f406 	lsl.w	r4, r3, r6
 8020408:	fa22 f30c 	lsr.w	r3, r2, ip
 802040c:	431c      	orrs	r4, r3
 802040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8020412:	fa01 f306 	lsl.w	r3, r1, r6
 8020416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 802041a:	fa21 f10c 	lsr.w	r1, r1, ip
 802041e:	431f      	orrs	r7, r3
 8020420:	0c3b      	lsrs	r3, r7, #16
 8020422:	fbb1 f9fe 	udiv	r9, r1, lr
 8020426:	fa1f f884 	uxth.w	r8, r4
 802042a:	fb0e 1119 	mls	r1, lr, r9, r1
 802042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8020432:	fb09 fa08 	mul.w	sl, r9, r8
 8020436:	458a      	cmp	sl, r1
 8020438:	fa02 f206 	lsl.w	r2, r2, r6
 802043c:	fa00 f306 	lsl.w	r3, r0, r6
 8020440:	d908      	bls.n	8020454 <__udivmoddi4+0x220>
 8020442:	1861      	adds	r1, r4, r1
 8020444:	f109 30ff 	add.w	r0, r9, #4294967295
 8020448:	d248      	bcs.n	80204dc <__udivmoddi4+0x2a8>
 802044a:	458a      	cmp	sl, r1
 802044c:	d946      	bls.n	80204dc <__udivmoddi4+0x2a8>
 802044e:	f1a9 0902 	sub.w	r9, r9, #2
 8020452:	4421      	add	r1, r4
 8020454:	eba1 010a 	sub.w	r1, r1, sl
 8020458:	b2bf      	uxth	r7, r7
 802045a:	fbb1 f0fe 	udiv	r0, r1, lr
 802045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8020462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8020466:	fb00 f808 	mul.w	r8, r0, r8
 802046a:	45b8      	cmp	r8, r7
 802046c:	d907      	bls.n	802047e <__udivmoddi4+0x24a>
 802046e:	19e7      	adds	r7, r4, r7
 8020470:	f100 31ff 	add.w	r1, r0, #4294967295
 8020474:	d22e      	bcs.n	80204d4 <__udivmoddi4+0x2a0>
 8020476:	45b8      	cmp	r8, r7
 8020478:	d92c      	bls.n	80204d4 <__udivmoddi4+0x2a0>
 802047a:	3802      	subs	r0, #2
 802047c:	4427      	add	r7, r4
 802047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8020482:	eba7 0708 	sub.w	r7, r7, r8
 8020486:	fba0 8902 	umull	r8, r9, r0, r2
 802048a:	454f      	cmp	r7, r9
 802048c:	46c6      	mov	lr, r8
 802048e:	4649      	mov	r1, r9
 8020490:	d31a      	bcc.n	80204c8 <__udivmoddi4+0x294>
 8020492:	d017      	beq.n	80204c4 <__udivmoddi4+0x290>
 8020494:	b15d      	cbz	r5, 80204ae <__udivmoddi4+0x27a>
 8020496:	ebb3 020e 	subs.w	r2, r3, lr
 802049a:	eb67 0701 	sbc.w	r7, r7, r1
 802049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80204a2:	40f2      	lsrs	r2, r6
 80204a4:	ea4c 0202 	orr.w	r2, ip, r2
 80204a8:	40f7      	lsrs	r7, r6
 80204aa:	e9c5 2700 	strd	r2, r7, [r5]
 80204ae:	2600      	movs	r6, #0
 80204b0:	4631      	mov	r1, r6
 80204b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80204b6:	462e      	mov	r6, r5
 80204b8:	4628      	mov	r0, r5
 80204ba:	e70b      	b.n	80202d4 <__udivmoddi4+0xa0>
 80204bc:	4606      	mov	r6, r0
 80204be:	e6e9      	b.n	8020294 <__udivmoddi4+0x60>
 80204c0:	4618      	mov	r0, r3
 80204c2:	e6fd      	b.n	80202c0 <__udivmoddi4+0x8c>
 80204c4:	4543      	cmp	r3, r8
 80204c6:	d2e5      	bcs.n	8020494 <__udivmoddi4+0x260>
 80204c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80204cc:	eb69 0104 	sbc.w	r1, r9, r4
 80204d0:	3801      	subs	r0, #1
 80204d2:	e7df      	b.n	8020494 <__udivmoddi4+0x260>
 80204d4:	4608      	mov	r0, r1
 80204d6:	e7d2      	b.n	802047e <__udivmoddi4+0x24a>
 80204d8:	4660      	mov	r0, ip
 80204da:	e78d      	b.n	80203f8 <__udivmoddi4+0x1c4>
 80204dc:	4681      	mov	r9, r0
 80204de:	e7b9      	b.n	8020454 <__udivmoddi4+0x220>
 80204e0:	4666      	mov	r6, ip
 80204e2:	e775      	b.n	80203d0 <__udivmoddi4+0x19c>
 80204e4:	4630      	mov	r0, r6
 80204e6:	e74a      	b.n	802037e <__udivmoddi4+0x14a>
 80204e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80204ec:	4439      	add	r1, r7
 80204ee:	e713      	b.n	8020318 <__udivmoddi4+0xe4>
 80204f0:	3802      	subs	r0, #2
 80204f2:	443c      	add	r4, r7
 80204f4:	e724      	b.n	8020340 <__udivmoddi4+0x10c>
 80204f6:	bf00      	nop

080204f8 <__aeabi_idiv0>:
 80204f8:	4770      	bx	lr
 80204fa:	bf00      	nop

080204fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80204fc:	b580      	push	{r7, lr}
 80204fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020500:	f000 fba4 	bl	8020c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8020504:	f000 f92a 	bl	802075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8020508:	f000 f9f2 	bl	80208f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 802050c:	f000 f994 	bl	8020838 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8020510:	f000 f9bc 	bl	802088c <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8020514:	2201      	movs	r2, #1
 8020516:	2101      	movs	r1, #1
 8020518:	482b      	ldr	r0, [pc, #172]	; (80205c8 <main+0xcc>)
 802051a:	f000 ff41 	bl	80213a0 <HAL_GPIO_WritePin>
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
    //HAL_UART_Receive(&huart3,&SeriaRecieve2, 1,1000 );

    if(flag==1)
 802051e:	4b2b      	ldr	r3, [pc, #172]	; (80205cc <main+0xd0>)
 8020520:	681b      	ldr	r3, [r3, #0]
 8020522:	2b01      	cmp	r3, #1
 8020524:	d1f6      	bne.n	8020514 <main+0x18>
    {
  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8020526:	2200      	movs	r2, #0
 8020528:	2101      	movs	r1, #1
 802052a:	4827      	ldr	r0, [pc, #156]	; (80205c8 <main+0xcc>)
 802052c:	f000 ff38 	bl	80213a0 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8020530:	2200      	movs	r2, #0
 8020532:	2102      	movs	r1, #2
 8020534:	4824      	ldr	r0, [pc, #144]	; (80205c8 <main+0xcc>)
 8020536:	f000 ff33 	bl	80213a0 <HAL_GPIO_WritePin>
  	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);

  	  HAL_UART_Receive(&huart3,&SeriaRecieve2, 1,1000 );
 802053a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802053e:	2201      	movs	r2, #1
 8020540:	4923      	ldr	r1, [pc, #140]	; (80205d0 <main+0xd4>)
 8020542:	4824      	ldr	r0, [pc, #144]	; (80205d4 <main+0xd8>)
 8020544:	f001 fcfd 	bl	8021f42 <HAL_UART_Receive>
  	  if (SeriaRecieve2 == 0)
 8020548:	4b21      	ldr	r3, [pc, #132]	; (80205d0 <main+0xd4>)
 802054a:	681b      	ldr	r3, [r3, #0]
 802054c:	2b00      	cmp	r3, #0
 802054e:	d102      	bne.n	8020556 <main+0x5a>
  	  	{
  	  		blink2();
 8020550:	f000 f842 	bl	80205d8 <blink2>
 8020554:	e02c      	b.n	80205b0 <main+0xb4>
  	  	}
  	  	else if (SeriaRecieve2 == 1)
 8020556:	4b1e      	ldr	r3, [pc, #120]	; (80205d0 <main+0xd4>)
 8020558:	681b      	ldr	r3, [r3, #0]
 802055a:	2b01      	cmp	r3, #1
 802055c:	d10c      	bne.n	8020578 <main+0x7c>
  	  	{
  	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 802055e:	2201      	movs	r2, #1
 8020560:	2101      	movs	r1, #1
 8020562:	4819      	ldr	r0, [pc, #100]	; (80205c8 <main+0xcc>)
 8020564:	f000 ff1c 	bl	80213a0 <HAL_GPIO_WritePin>
  	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8020568:	2200      	movs	r2, #0
 802056a:	2102      	movs	r1, #2
 802056c:	4816      	ldr	r0, [pc, #88]	; (80205c8 <main+0xcc>)
 802056e:	f000 ff17 	bl	80213a0 <HAL_GPIO_WritePin>
  	  		bootloader_jump_to_user_app1();
 8020572:	f000 f865 	bl	8020640 <bootloader_jump_to_user_app1>
 8020576:	e01b      	b.n	80205b0 <main+0xb4>
  	  	}
  	  	else if (SeriaRecieve2 == 2)
 8020578:	4b15      	ldr	r3, [pc, #84]	; (80205d0 <main+0xd4>)
 802057a:	681b      	ldr	r3, [r3, #0]
 802057c:	2b02      	cmp	r3, #2
 802057e:	d10c      	bne.n	802059a <main+0x9e>
  	  	{
  	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);// Turn OFF User LED to indicate that we left Bootloader
 8020580:	2200      	movs	r2, #0
 8020582:	2101      	movs	r1, #1
 8020584:	4810      	ldr	r0, [pc, #64]	; (80205c8 <main+0xcc>)
 8020586:	f000 ff0b 	bl	80213a0 <HAL_GPIO_WritePin>
  	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 802058a:	2201      	movs	r2, #1
 802058c:	2102      	movs	r1, #2
 802058e:	480e      	ldr	r0, [pc, #56]	; (80205c8 <main+0xcc>)
 8020590:	f000 ff06 	bl	80213a0 <HAL_GPIO_WritePin>

  	  		bootloader_jump_to_user_app2();
 8020594:	f000 f880 	bl	8020698 <bootloader_jump_to_user_app2>
 8020598:	e00a      	b.n	80205b0 <main+0xb4>
  	  	}
  	  	else if (SeriaRecieve2 == 4)
 802059a:	4b0d      	ldr	r3, [pc, #52]	; (80205d0 <main+0xd4>)
 802059c:	681b      	ldr	r3, [r3, #0]
 802059e:	2b04      	cmp	r3, #4
 80205a0:	d106      	bne.n	80205b0 <main+0xb4>
  	  	{
  	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);// Turn OFF User LED to indicate that we left Bootloader
 80205a2:	2201      	movs	r2, #1
 80205a4:	2120      	movs	r1, #32
 80205a6:	4808      	ldr	r0, [pc, #32]	; (80205c8 <main+0xcc>)
 80205a8:	f000 fefa 	bl	80213a0 <HAL_GPIO_WritePin>
  	  		bootloader_jump_to_bootloader();
 80205ac:	f000 f8a0 	bl	80206f0 <bootloader_jump_to_bootloader>
  	  	}
  	  flag=0;
 80205b0:	4b06      	ldr	r3, [pc, #24]	; (80205cc <main+0xd0>)
 80205b2:	2200      	movs	r2, #0
 80205b4:	601a      	str	r2, [r3, #0]
  	  __HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
 80205b6:	4b07      	ldr	r3, [pc, #28]	; (80205d4 <main+0xd8>)
 80205b8:	681b      	ldr	r3, [r3, #0]
 80205ba:	68da      	ldr	r2, [r3, #12]
 80205bc:	4b05      	ldr	r3, [pc, #20]	; (80205d4 <main+0xd8>)
 80205be:	681b      	ldr	r3, [r3, #0]
 80205c0:	f042 0220 	orr.w	r2, r2, #32
 80205c4:	60da      	str	r2, [r3, #12]
  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 80205c6:	e7a5      	b.n	8020514 <main+0x18>
 80205c8:	40020800 	.word	0x40020800
 80205cc:	20000028 	.word	0x20000028
 80205d0:	20000074 	.word	0x20000074
 80205d4:	20000030 	.word	0x20000030

080205d8 <blink2>:
  		current_tick1 = HAL_GetTick();
  		while(HAL_GetTick() <= (current_tick1+500));
  	}
  }
  void blink2(void)
  {
 80205d8:	b580      	push	{r7, lr}
 80205da:	b084      	sub	sp, #16
 80205dc:	af00      	add	r7, sp, #0
  	//uint32_t current_tick1;
  	//current_tick1= HAL_GetTick();
  	for(uint8_t i=0; i<10; i++)
 80205de:	2300      	movs	r3, #0
 80205e0:	73fb      	strb	r3, [r7, #15]
 80205e2:	e020      	b.n	8020626 <blink2+0x4e>
  	{
  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 80205e4:	2200      	movs	r2, #0
 80205e6:	2101      	movs	r1, #1
 80205e8:	4813      	ldr	r0, [pc, #76]	; (8020638 <blink2+0x60>)
 80205ea:	f000 fed9 	bl	80213a0 <HAL_GPIO_WritePin>
  		//current_tick1 = HAL_GetTick();
  		//while(HAL_GetTick() <= (current_tick1+50));
  		for(uint32_t i=0;i<10000000;i=i+32);
 80205ee:	2300      	movs	r3, #0
 80205f0:	60bb      	str	r3, [r7, #8]
 80205f2:	e002      	b.n	80205fa <blink2+0x22>
 80205f4:	68bb      	ldr	r3, [r7, #8]
 80205f6:	3320      	adds	r3, #32
 80205f8:	60bb      	str	r3, [r7, #8]
 80205fa:	68bb      	ldr	r3, [r7, #8]
 80205fc:	4a0f      	ldr	r2, [pc, #60]	; (802063c <blink2+0x64>)
 80205fe:	4293      	cmp	r3, r2
 8020600:	d3f8      	bcc.n	80205f4 <blink2+0x1c>
  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8020602:	2201      	movs	r2, #1
 8020604:	2101      	movs	r1, #1
 8020606:	480c      	ldr	r0, [pc, #48]	; (8020638 <blink2+0x60>)
 8020608:	f000 feca 	bl	80213a0 <HAL_GPIO_WritePin>
  		for(uint32_t i=0;i<10000000;i=i+32);
 802060c:	2300      	movs	r3, #0
 802060e:	607b      	str	r3, [r7, #4]
 8020610:	e002      	b.n	8020618 <blink2+0x40>
 8020612:	687b      	ldr	r3, [r7, #4]
 8020614:	3320      	adds	r3, #32
 8020616:	607b      	str	r3, [r7, #4]
 8020618:	687b      	ldr	r3, [r7, #4]
 802061a:	4a08      	ldr	r2, [pc, #32]	; (802063c <blink2+0x64>)
 802061c:	4293      	cmp	r3, r2
 802061e:	d3f8      	bcc.n	8020612 <blink2+0x3a>
  	for(uint8_t i=0; i<10; i++)
 8020620:	7bfb      	ldrb	r3, [r7, #15]
 8020622:	3301      	adds	r3, #1
 8020624:	73fb      	strb	r3, [r7, #15]
 8020626:	7bfb      	ldrb	r3, [r7, #15]
 8020628:	2b09      	cmp	r3, #9
 802062a:	d9db      	bls.n	80205e4 <blink2+0xc>

  		//current_tick1 = HAL_GetTick();
  		//while(HAL_GetTick() <= (current_tick1+50));
  	}
  }
 802062c:	bf00      	nop
 802062e:	bf00      	nop
 8020630:	3710      	adds	r7, #16
 8020632:	46bd      	mov	sp, r7
 8020634:	bd80      	pop	{r7, pc}
 8020636:	bf00      	nop
 8020638:	40020800 	.word	0x40020800
 802063c:	00989680 	.word	0x00989680

08020640 <bootloader_jump_to_user_app1>:
  /*code to jump to user application
   *Here we are assuming FLASH_SECTOR2_BASE_ADDRESS
   *is where the user application is stored
   */
  void bootloader_jump_to_user_app1(void)
  {
 8020640:	b580      	push	{r7, lr}
 8020642:	b084      	sub	sp, #16
 8020644:	af00      	add	r7, sp, #0
     //just a function pointer to hold the address of the reset handler of the user app.
      void (*app_reset_handler)(void);
      printmsg("BL_DEBUG_MSG:bootloader_jump_to_user_app\n");
 8020646:	480f      	ldr	r0, [pc, #60]	; (8020684 <bootloader_jump_to_user_app1+0x44>)
 8020648:	f000 f87e 	bl	8020748 <printmsg>
      // 1. configure the MSP by reading the value from the base address of the sector 2
      uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
 802064c:	4b0e      	ldr	r3, [pc, #56]	; (8020688 <bootloader_jump_to_user_app1+0x48>)
 802064e:	681b      	ldr	r3, [r3, #0]
 8020650:	60fb      	str	r3, [r7, #12]
      printmsg("BL_DEBUG_MSG:MSP value : %#x\n",msp_value);
 8020652:	68f9      	ldr	r1, [r7, #12]
 8020654:	480d      	ldr	r0, [pc, #52]	; (802068c <bootloader_jump_to_user_app1+0x4c>)
 8020656:	f000 f877 	bl	8020748 <printmsg>
 802065a:	68fb      	ldr	r3, [r7, #12]
 802065c:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 802065e:	683b      	ldr	r3, [r7, #0]
 8020660:	f383 8808 	msr	MSP, r3
}
 8020664:	bf00      	nop
      __set_MSP(msp_value);
      //SCB->VTOR = FLASH_SECTOR2_BASE_ADDRESS;
      /* 2. Now fetch the reset handler address of the user application
       * from the location FLASH_SECTOR2_BASE_ADDRESS+4
       */
      uint32_t resethandler_address = *(volatile uint32_t *) (FLASH_SECTOR2_BASE_ADDRESS + 4);
 8020666:	4b0a      	ldr	r3, [pc, #40]	; (8020690 <bootloader_jump_to_user_app1+0x50>)
 8020668:	681b      	ldr	r3, [r3, #0]
 802066a:	60bb      	str	r3, [r7, #8]
      app_reset_handler = (void*) resethandler_address;
 802066c:	68bb      	ldr	r3, [r7, #8]
 802066e:	607b      	str	r3, [r7, #4]
      printmsg("BL_DEBUG_MSG: app reset handler addr : %#x\n",app_reset_handler);
 8020670:	6879      	ldr	r1, [r7, #4]
 8020672:	4808      	ldr	r0, [pc, #32]	; (8020694 <bootloader_jump_to_user_app1+0x54>)
 8020674:	f000 f868 	bl	8020748 <printmsg>
      //3. jump to reset handler of the user application
      app_reset_handler();
 8020678:	687b      	ldr	r3, [r7, #4]
 802067a:	4798      	blx	r3

  }
 802067c:	bf00      	nop
 802067e:	3710      	adds	r7, #16
 8020680:	46bd      	mov	sp, r7
 8020682:	bd80      	pop	{r7, pc}
 8020684:	08022e08 	.word	0x08022e08
 8020688:	08008000 	.word	0x08008000
 802068c:	08022e34 	.word	0x08022e34
 8020690:	08008004 	.word	0x08008004
 8020694:	08022e54 	.word	0x08022e54

08020698 <bootloader_jump_to_user_app2>:
  void bootloader_jump_to_user_app2(void)
  {
 8020698:	b580      	push	{r7, lr}
 802069a:	b084      	sub	sp, #16
 802069c:	af00      	add	r7, sp, #0

     //just a function pointer to hold the address of the reset handler of the user app.
      void (*app_reset_handler)(void);
      printmsg("BL_DEBUG_MSG:bootloader_jump_to_user_app\n");
 802069e:	480f      	ldr	r0, [pc, #60]	; (80206dc <bootloader_jump_to_user_app2+0x44>)
 80206a0:	f000 f852 	bl	8020748 <printmsg>
      // 1. configure the MSP by reading the value from the base address of the sector 5
      uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR5_BASE_ADDRESS;
 80206a4:	4b0e      	ldr	r3, [pc, #56]	; (80206e0 <bootloader_jump_to_user_app2+0x48>)
 80206a6:	681b      	ldr	r3, [r3, #0]
 80206a8:	60fb      	str	r3, [r7, #12]
      printmsg("BL_DEBUG_MSG:MSP value : %#x\n",msp_value);
 80206aa:	68f9      	ldr	r1, [r7, #12]
 80206ac:	480d      	ldr	r0, [pc, #52]	; (80206e4 <bootloader_jump_to_user_app2+0x4c>)
 80206ae:	f000 f84b 	bl	8020748 <printmsg>
 80206b2:	68fb      	ldr	r3, [r7, #12]
 80206b4:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80206b6:	683b      	ldr	r3, [r7, #0]
 80206b8:	f383 8808 	msr	MSP, r3
}
 80206bc:	bf00      	nop
      __set_MSP(msp_value);
      //SCB->VTOR = FLASH_SECTOR5_BASE_ADDRESS;
      /* 2. Now fetch the reset handler address of the user application
       * from the location FLASH_SECTOR5_BASE_ADDRESS+4
       */
      uint32_t resethandler_address = *(volatile uint32_t *) (FLASH_SECTOR5_BASE_ADDRESS + 4);
 80206be:	4b0a      	ldr	r3, [pc, #40]	; (80206e8 <bootloader_jump_to_user_app2+0x50>)
 80206c0:	681b      	ldr	r3, [r3, #0]
 80206c2:	60bb      	str	r3, [r7, #8]
      app_reset_handler = (void*) resethandler_address;
 80206c4:	68bb      	ldr	r3, [r7, #8]
 80206c6:	607b      	str	r3, [r7, #4]
      printmsg("BL_DEBUG_MSG: app reset handler addr : %#x\n",app_reset_handler);
 80206c8:	6879      	ldr	r1, [r7, #4]
 80206ca:	4808      	ldr	r0, [pc, #32]	; (80206ec <bootloader_jump_to_user_app2+0x54>)
 80206cc:	f000 f83c 	bl	8020748 <printmsg>
      //3. jump to reset handler of the user application
      app_reset_handler();
 80206d0:	687b      	ldr	r3, [r7, #4]
 80206d2:	4798      	blx	r3
  }
 80206d4:	bf00      	nop
 80206d6:	3710      	adds	r7, #16
 80206d8:	46bd      	mov	sp, r7
 80206da:	bd80      	pop	{r7, pc}
 80206dc:	08022e08 	.word	0x08022e08
 80206e0:	08020000 	.word	0x08020000
 80206e4:	08022e34 	.word	0x08022e34
 80206e8:	08020004 	.word	0x08020004
 80206ec:	08022e54 	.word	0x08022e54

080206f0 <bootloader_jump_to_bootloader>:
  void bootloader_jump_to_bootloader(void)
  {
 80206f0:	b580      	push	{r7, lr}
 80206f2:	b084      	sub	sp, #16
 80206f4:	af00      	add	r7, sp, #0

     //just a function pointer to hold the address of the reset handler of the user app.
      void (*app_reset_handler)(void);
      printmsg("BL_DEBUG_MSG:bootloader_jump_to_user_app\n");
 80206f6:	4810      	ldr	r0, [pc, #64]	; (8020738 <bootloader_jump_to_bootloader+0x48>)
 80206f8:	f000 f826 	bl	8020748 <printmsg>
      // 1. configure the MSP by reading the value from the base address of the sector 0
      uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR0_BASE_ADDRESS;
 80206fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8020700:	681b      	ldr	r3, [r3, #0]
 8020702:	60fb      	str	r3, [r7, #12]
      printmsg("BL_DEBUG_MSG:MSP value : %#x\n",msp_value);
 8020704:	68f9      	ldr	r1, [r7, #12]
 8020706:	480d      	ldr	r0, [pc, #52]	; (802073c <bootloader_jump_to_bootloader+0x4c>)
 8020708:	f000 f81e 	bl	8020748 <printmsg>
 802070c:	68fb      	ldr	r3, [r7, #12]
 802070e:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8020710:	683b      	ldr	r3, [r7, #0]
 8020712:	f383 8808 	msr	MSP, r3
}
 8020716:	bf00      	nop
      __set_MSP(msp_value);
      //SCB->VTOR = FLASH_SECTOR0_BASE_ADDRESS;
      /* 2. Now fetch the reset handler address of the user application
       * from the location FLASH_SECTOR0_BASE_ADDRESS+4
       */
      uint32_t resethandler_address = *(volatile uint32_t *) (FLASH_SECTOR0_BASE_ADDRESS + 4);
 8020718:	4b09      	ldr	r3, [pc, #36]	; (8020740 <bootloader_jump_to_bootloader+0x50>)
 802071a:	681b      	ldr	r3, [r3, #0]
 802071c:	60bb      	str	r3, [r7, #8]
      app_reset_handler = (void*) resethandler_address;
 802071e:	68bb      	ldr	r3, [r7, #8]
 8020720:	607b      	str	r3, [r7, #4]
      printmsg("BL_DEBUG_MSG: app reset handler addr : %#x\n",app_reset_handler);
 8020722:	6879      	ldr	r1, [r7, #4]
 8020724:	4807      	ldr	r0, [pc, #28]	; (8020744 <bootloader_jump_to_bootloader+0x54>)
 8020726:	f000 f80f 	bl	8020748 <printmsg>
      //3. jump to reset handler of the user application
      app_reset_handler();
 802072a:	687b      	ldr	r3, [r7, #4]
 802072c:	4798      	blx	r3
  }
 802072e:	bf00      	nop
 8020730:	3710      	adds	r7, #16
 8020732:	46bd      	mov	sp, r7
 8020734:	bd80      	pop	{r7, pc}
 8020736:	bf00      	nop
 8020738:	08022e08 	.word	0x08022e08
 802073c:	08022e34 	.word	0x08022e34
 8020740:	08000004 	.word	0x08000004
 8020744:	08022e54 	.word	0x08022e54

08020748 <printmsg>:
  /* prints formatted string to console over UART */
   void printmsg(char *format,...)
   {
 8020748:	b40f      	push	{r0, r1, r2, r3}
 802074a:	b480      	push	{r7}
 802074c:	af00      	add	r7, sp, #0
  	 va_start(args, format);
  	 vsprintf(str, format,args);
  	 HAL_UART_Transmit(D_UART,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
  	 va_end(args);
  	#endif
   }
 802074e:	bf00      	nop
 8020750:	46bd      	mov	sp, r7
 8020752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020756:	b004      	add	sp, #16
 8020758:	4770      	bx	lr
	...

0802075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 802075c:	b580      	push	{r7, lr}
 802075e:	b094      	sub	sp, #80	; 0x50
 8020760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8020762:	f107 031c 	add.w	r3, r7, #28
 8020766:	2234      	movs	r2, #52	; 0x34
 8020768:	2100      	movs	r1, #0
 802076a:	4618      	mov	r0, r3
 802076c:	f002 fb38 	bl	8022de0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8020770:	f107 0308 	add.w	r3, r7, #8
 8020774:	2200      	movs	r2, #0
 8020776:	601a      	str	r2, [r3, #0]
 8020778:	605a      	str	r2, [r3, #4]
 802077a:	609a      	str	r2, [r3, #8]
 802077c:	60da      	str	r2, [r3, #12]
 802077e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8020780:	2300      	movs	r3, #0
 8020782:	607b      	str	r3, [r7, #4]
 8020784:	4b2a      	ldr	r3, [pc, #168]	; (8020830 <SystemClock_Config+0xd4>)
 8020786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020788:	4a29      	ldr	r2, [pc, #164]	; (8020830 <SystemClock_Config+0xd4>)
 802078a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802078e:	6413      	str	r3, [r2, #64]	; 0x40
 8020790:	4b27      	ldr	r3, [pc, #156]	; (8020830 <SystemClock_Config+0xd4>)
 8020792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020798:	607b      	str	r3, [r7, #4]
 802079a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 802079c:	2300      	movs	r3, #0
 802079e:	603b      	str	r3, [r7, #0]
 80207a0:	4b24      	ldr	r3, [pc, #144]	; (8020834 <SystemClock_Config+0xd8>)
 80207a2:	681b      	ldr	r3, [r3, #0]
 80207a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80207a8:	4a22      	ldr	r2, [pc, #136]	; (8020834 <SystemClock_Config+0xd8>)
 80207aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80207ae:	6013      	str	r3, [r2, #0]
 80207b0:	4b20      	ldr	r3, [pc, #128]	; (8020834 <SystemClock_Config+0xd8>)
 80207b2:	681b      	ldr	r3, [r3, #0]
 80207b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80207b8:	603b      	str	r3, [r7, #0]
 80207ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80207bc:	2302      	movs	r3, #2
 80207be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80207c0:	2301      	movs	r3, #1
 80207c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80207c4:	2310      	movs	r3, #16
 80207c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80207c8:	2302      	movs	r3, #2
 80207ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80207cc:	2300      	movs	r3, #0
 80207ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80207d0:	2310      	movs	r3, #16
 80207d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80207d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80207d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80207da:	2304      	movs	r3, #4
 80207dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80207de:	2302      	movs	r3, #2
 80207e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80207e2:	2302      	movs	r3, #2
 80207e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80207e6:	f107 031c 	add.w	r3, r7, #28
 80207ea:	4618      	mov	r0, r3
 80207ec:	f001 f8be 	bl	802196c <HAL_RCC_OscConfig>
 80207f0:	4603      	mov	r3, r0
 80207f2:	2b00      	cmp	r3, #0
 80207f4:	d001      	beq.n	80207fa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80207f6:	f000 f8fd 	bl	80209f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80207fa:	230f      	movs	r3, #15
 80207fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80207fe:	2302      	movs	r3, #2
 8020800:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8020802:	2300      	movs	r3, #0
 8020804:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8020806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802080a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 802080c:	2300      	movs	r3, #0
 802080e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8020810:	f107 0308 	add.w	r3, r7, #8
 8020814:	2102      	movs	r1, #2
 8020816:	4618      	mov	r0, r3
 8020818:	f000 fddc 	bl	80213d4 <HAL_RCC_ClockConfig>
 802081c:	4603      	mov	r3, r0
 802081e:	2b00      	cmp	r3, #0
 8020820:	d001      	beq.n	8020826 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8020822:	f000 f8e7 	bl	80209f4 <Error_Handler>
  }
}
 8020826:	bf00      	nop
 8020828:	3750      	adds	r7, #80	; 0x50
 802082a:	46bd      	mov	sp, r7
 802082c:	bd80      	pop	{r7, pc}
 802082e:	bf00      	nop
 8020830:	40023800 	.word	0x40023800
 8020834:	40007000 	.word	0x40007000

08020838 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8020838:	b580      	push	{r7, lr}
 802083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 802083c:	4b11      	ldr	r3, [pc, #68]	; (8020884 <MX_USART2_UART_Init+0x4c>)
 802083e:	4a12      	ldr	r2, [pc, #72]	; (8020888 <MX_USART2_UART_Init+0x50>)
 8020840:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8020842:	4b10      	ldr	r3, [pc, #64]	; (8020884 <MX_USART2_UART_Init+0x4c>)
 8020844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020848:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 802084a:	4b0e      	ldr	r3, [pc, #56]	; (8020884 <MX_USART2_UART_Init+0x4c>)
 802084c:	2200      	movs	r2, #0
 802084e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8020850:	4b0c      	ldr	r3, [pc, #48]	; (8020884 <MX_USART2_UART_Init+0x4c>)
 8020852:	2200      	movs	r2, #0
 8020854:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8020856:	4b0b      	ldr	r3, [pc, #44]	; (8020884 <MX_USART2_UART_Init+0x4c>)
 8020858:	2200      	movs	r2, #0
 802085a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 802085c:	4b09      	ldr	r3, [pc, #36]	; (8020884 <MX_USART2_UART_Init+0x4c>)
 802085e:	220c      	movs	r2, #12
 8020860:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020862:	4b08      	ldr	r3, [pc, #32]	; (8020884 <MX_USART2_UART_Init+0x4c>)
 8020864:	2200      	movs	r2, #0
 8020866:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8020868:	4b06      	ldr	r3, [pc, #24]	; (8020884 <MX_USART2_UART_Init+0x4c>)
 802086a:	2200      	movs	r2, #0
 802086c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 802086e:	4805      	ldr	r0, [pc, #20]	; (8020884 <MX_USART2_UART_Init+0x4c>)
 8020870:	f001 fb1a 	bl	8021ea8 <HAL_UART_Init>
 8020874:	4603      	mov	r3, r0
 8020876:	2b00      	cmp	r3, #0
 8020878:	d001      	beq.n	802087e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 802087a:	f000 f8bb 	bl	80209f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 802087e:	bf00      	nop
 8020880:	bd80      	pop	{r7, pc}
 8020882:	bf00      	nop
 8020884:	200000dc 	.word	0x200000dc
 8020888:	40004400 	.word	0x40004400

0802088c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 802088c:	b580      	push	{r7, lr}
 802088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8020890:	4b15      	ldr	r3, [pc, #84]	; (80208e8 <MX_USART3_UART_Init+0x5c>)
 8020892:	4a16      	ldr	r2, [pc, #88]	; (80208ec <MX_USART3_UART_Init+0x60>)
 8020894:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8020896:	4b14      	ldr	r3, [pc, #80]	; (80208e8 <MX_USART3_UART_Init+0x5c>)
 8020898:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 802089c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 802089e:	4b12      	ldr	r3, [pc, #72]	; (80208e8 <MX_USART3_UART_Init+0x5c>)
 80208a0:	2200      	movs	r2, #0
 80208a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80208a4:	4b10      	ldr	r3, [pc, #64]	; (80208e8 <MX_USART3_UART_Init+0x5c>)
 80208a6:	2200      	movs	r2, #0
 80208a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80208aa:	4b0f      	ldr	r3, [pc, #60]	; (80208e8 <MX_USART3_UART_Init+0x5c>)
 80208ac:	2200      	movs	r2, #0
 80208ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80208b0:	4b0d      	ldr	r3, [pc, #52]	; (80208e8 <MX_USART3_UART_Init+0x5c>)
 80208b2:	220c      	movs	r2, #12
 80208b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80208b6:	4b0c      	ldr	r3, [pc, #48]	; (80208e8 <MX_USART3_UART_Init+0x5c>)
 80208b8:	2200      	movs	r2, #0
 80208ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80208bc:	4b0a      	ldr	r3, [pc, #40]	; (80208e8 <MX_USART3_UART_Init+0x5c>)
 80208be:	2200      	movs	r2, #0
 80208c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80208c2:	4809      	ldr	r0, [pc, #36]	; (80208e8 <MX_USART3_UART_Init+0x5c>)
 80208c4:	f001 faf0 	bl	8021ea8 <HAL_UART_Init>
 80208c8:	4603      	mov	r3, r0
 80208ca:	2b00      	cmp	r3, #0
 80208cc:	d001      	beq.n	80208d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80208ce:	f000 f891 	bl	80209f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  __HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
 80208d2:	4b05      	ldr	r3, [pc, #20]	; (80208e8 <MX_USART3_UART_Init+0x5c>)
 80208d4:	681b      	ldr	r3, [r3, #0]
 80208d6:	68da      	ldr	r2, [r3, #12]
 80208d8:	4b03      	ldr	r3, [pc, #12]	; (80208e8 <MX_USART3_UART_Init+0x5c>)
 80208da:	681b      	ldr	r3, [r3, #0]
 80208dc:	f042 0220 	orr.w	r2, r2, #32
 80208e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END USART3_Init 2 */

}
 80208e2:	bf00      	nop
 80208e4:	bd80      	pop	{r7, pc}
 80208e6:	bf00      	nop
 80208e8:	20000030 	.word	0x20000030
 80208ec:	40004800 	.word	0x40004800

080208f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80208f0:	b580      	push	{r7, lr}
 80208f2:	b08a      	sub	sp, #40	; 0x28
 80208f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80208f6:	f107 0314 	add.w	r3, r7, #20
 80208fa:	2200      	movs	r2, #0
 80208fc:	601a      	str	r2, [r3, #0]
 80208fe:	605a      	str	r2, [r3, #4]
 8020900:	609a      	str	r2, [r3, #8]
 8020902:	60da      	str	r2, [r3, #12]
 8020904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8020906:	2300      	movs	r3, #0
 8020908:	613b      	str	r3, [r7, #16]
 802090a:	4b37      	ldr	r3, [pc, #220]	; (80209e8 <MX_GPIO_Init+0xf8>)
 802090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802090e:	4a36      	ldr	r2, [pc, #216]	; (80209e8 <MX_GPIO_Init+0xf8>)
 8020910:	f043 0304 	orr.w	r3, r3, #4
 8020914:	6313      	str	r3, [r2, #48]	; 0x30
 8020916:	4b34      	ldr	r3, [pc, #208]	; (80209e8 <MX_GPIO_Init+0xf8>)
 8020918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802091a:	f003 0304 	and.w	r3, r3, #4
 802091e:	613b      	str	r3, [r7, #16]
 8020920:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8020922:	2300      	movs	r3, #0
 8020924:	60fb      	str	r3, [r7, #12]
 8020926:	4b30      	ldr	r3, [pc, #192]	; (80209e8 <MX_GPIO_Init+0xf8>)
 8020928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802092a:	4a2f      	ldr	r2, [pc, #188]	; (80209e8 <MX_GPIO_Init+0xf8>)
 802092c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020930:	6313      	str	r3, [r2, #48]	; 0x30
 8020932:	4b2d      	ldr	r3, [pc, #180]	; (80209e8 <MX_GPIO_Init+0xf8>)
 8020934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802093a:	60fb      	str	r3, [r7, #12]
 802093c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802093e:	2300      	movs	r3, #0
 8020940:	60bb      	str	r3, [r7, #8]
 8020942:	4b29      	ldr	r3, [pc, #164]	; (80209e8 <MX_GPIO_Init+0xf8>)
 8020944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020946:	4a28      	ldr	r2, [pc, #160]	; (80209e8 <MX_GPIO_Init+0xf8>)
 8020948:	f043 0301 	orr.w	r3, r3, #1
 802094c:	6313      	str	r3, [r2, #48]	; 0x30
 802094e:	4b26      	ldr	r3, [pc, #152]	; (80209e8 <MX_GPIO_Init+0xf8>)
 8020950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020952:	f003 0301 	and.w	r3, r3, #1
 8020956:	60bb      	str	r3, [r7, #8]
 8020958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 802095a:	2300      	movs	r3, #0
 802095c:	607b      	str	r3, [r7, #4]
 802095e:	4b22      	ldr	r3, [pc, #136]	; (80209e8 <MX_GPIO_Init+0xf8>)
 8020960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020962:	4a21      	ldr	r2, [pc, #132]	; (80209e8 <MX_GPIO_Init+0xf8>)
 8020964:	f043 0302 	orr.w	r3, r3, #2
 8020968:	6313      	str	r3, [r2, #48]	; 0x30
 802096a:	4b1f      	ldr	r3, [pc, #124]	; (80209e8 <MX_GPIO_Init+0xf8>)
 802096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802096e:	f003 0302 	and.w	r3, r3, #2
 8020972:	607b      	str	r3, [r7, #4]
 8020974:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8020976:	2200      	movs	r2, #0
 8020978:	2103      	movs	r1, #3
 802097a:	481c      	ldr	r0, [pc, #112]	; (80209ec <MX_GPIO_Init+0xfc>)
 802097c:	f000 fd10 	bl	80213a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8020980:	2200      	movs	r2, #0
 8020982:	2120      	movs	r1, #32
 8020984:	481a      	ldr	r0, [pc, #104]	; (80209f0 <MX_GPIO_Init+0x100>)
 8020986:	f000 fd0b 	bl	80213a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 802098a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8020990:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8020994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020996:	2300      	movs	r3, #0
 8020998:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 802099a:	f107 0314 	add.w	r3, r7, #20
 802099e:	4619      	mov	r1, r3
 80209a0:	4812      	ldr	r0, [pc, #72]	; (80209ec <MX_GPIO_Init+0xfc>)
 80209a2:	f000 fb69 	bl	8021078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80209a6:	2303      	movs	r3, #3
 80209a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80209aa:	2301      	movs	r3, #1
 80209ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80209ae:	2300      	movs	r3, #0
 80209b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80209b2:	2300      	movs	r3, #0
 80209b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80209b6:	f107 0314 	add.w	r3, r7, #20
 80209ba:	4619      	mov	r1, r3
 80209bc:	480b      	ldr	r0, [pc, #44]	; (80209ec <MX_GPIO_Init+0xfc>)
 80209be:	f000 fb5b 	bl	8021078 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80209c2:	2320      	movs	r3, #32
 80209c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80209c6:	2301      	movs	r3, #1
 80209c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80209ca:	2300      	movs	r3, #0
 80209cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80209ce:	2300      	movs	r3, #0
 80209d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80209d2:	f107 0314 	add.w	r3, r7, #20
 80209d6:	4619      	mov	r1, r3
 80209d8:	4805      	ldr	r0, [pc, #20]	; (80209f0 <MX_GPIO_Init+0x100>)
 80209da:	f000 fb4d 	bl	8021078 <HAL_GPIO_Init>

}
 80209de:	bf00      	nop
 80209e0:	3728      	adds	r7, #40	; 0x28
 80209e2:	46bd      	mov	sp, r7
 80209e4:	bd80      	pop	{r7, pc}
 80209e6:	bf00      	nop
 80209e8:	40023800 	.word	0x40023800
 80209ec:	40020800 	.word	0x40020800
 80209f0:	40020000 	.word	0x40020000

080209f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80209f4:	b480      	push	{r7}
 80209f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80209f8:	b672      	cpsid	i
}
 80209fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80209fc:	e7fe      	b.n	80209fc <Error_Handler+0x8>
	...

08020a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8020a00:	b580      	push	{r7, lr}
 8020a02:	b082      	sub	sp, #8
 8020a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020a06:	2300      	movs	r3, #0
 8020a08:	607b      	str	r3, [r7, #4]
 8020a0a:	4b10      	ldr	r3, [pc, #64]	; (8020a4c <HAL_MspInit+0x4c>)
 8020a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020a0e:	4a0f      	ldr	r2, [pc, #60]	; (8020a4c <HAL_MspInit+0x4c>)
 8020a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020a14:	6453      	str	r3, [r2, #68]	; 0x44
 8020a16:	4b0d      	ldr	r3, [pc, #52]	; (8020a4c <HAL_MspInit+0x4c>)
 8020a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020a1e:	607b      	str	r3, [r7, #4]
 8020a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8020a22:	2300      	movs	r3, #0
 8020a24:	603b      	str	r3, [r7, #0]
 8020a26:	4b09      	ldr	r3, [pc, #36]	; (8020a4c <HAL_MspInit+0x4c>)
 8020a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020a2a:	4a08      	ldr	r2, [pc, #32]	; (8020a4c <HAL_MspInit+0x4c>)
 8020a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8020a30:	6413      	str	r3, [r2, #64]	; 0x40
 8020a32:	4b06      	ldr	r3, [pc, #24]	; (8020a4c <HAL_MspInit+0x4c>)
 8020a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020a3a:	603b      	str	r3, [r7, #0]
 8020a3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8020a3e:	2007      	movs	r0, #7
 8020a40:	f000 fa46 	bl	8020ed0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8020a44:	bf00      	nop
 8020a46:	3708      	adds	r7, #8
 8020a48:	46bd      	mov	sp, r7
 8020a4a:	bd80      	pop	{r7, pc}
 8020a4c:	40023800 	.word	0x40023800

08020a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8020a50:	b580      	push	{r7, lr}
 8020a52:	b08c      	sub	sp, #48	; 0x30
 8020a54:	af00      	add	r7, sp, #0
 8020a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020a58:	f107 031c 	add.w	r3, r7, #28
 8020a5c:	2200      	movs	r2, #0
 8020a5e:	601a      	str	r2, [r3, #0]
 8020a60:	605a      	str	r2, [r3, #4]
 8020a62:	609a      	str	r2, [r3, #8]
 8020a64:	60da      	str	r2, [r3, #12]
 8020a66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8020a68:	687b      	ldr	r3, [r7, #4]
 8020a6a:	681b      	ldr	r3, [r3, #0]
 8020a6c:	4a36      	ldr	r2, [pc, #216]	; (8020b48 <HAL_UART_MspInit+0xf8>)
 8020a6e:	4293      	cmp	r3, r2
 8020a70:	d12c      	bne.n	8020acc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8020a72:	2300      	movs	r3, #0
 8020a74:	61bb      	str	r3, [r7, #24]
 8020a76:	4b35      	ldr	r3, [pc, #212]	; (8020b4c <HAL_UART_MspInit+0xfc>)
 8020a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020a7a:	4a34      	ldr	r2, [pc, #208]	; (8020b4c <HAL_UART_MspInit+0xfc>)
 8020a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8020a80:	6413      	str	r3, [r2, #64]	; 0x40
 8020a82:	4b32      	ldr	r3, [pc, #200]	; (8020b4c <HAL_UART_MspInit+0xfc>)
 8020a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8020a8a:	61bb      	str	r3, [r7, #24]
 8020a8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020a8e:	2300      	movs	r3, #0
 8020a90:	617b      	str	r3, [r7, #20]
 8020a92:	4b2e      	ldr	r3, [pc, #184]	; (8020b4c <HAL_UART_MspInit+0xfc>)
 8020a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020a96:	4a2d      	ldr	r2, [pc, #180]	; (8020b4c <HAL_UART_MspInit+0xfc>)
 8020a98:	f043 0301 	orr.w	r3, r3, #1
 8020a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8020a9e:	4b2b      	ldr	r3, [pc, #172]	; (8020b4c <HAL_UART_MspInit+0xfc>)
 8020aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020aa2:	f003 0301 	and.w	r3, r3, #1
 8020aa6:	617b      	str	r3, [r7, #20]
 8020aa8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8020aaa:	230c      	movs	r3, #12
 8020aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020aae:	2302      	movs	r3, #2
 8020ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020ab2:	2300      	movs	r3, #0
 8020ab4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020ab6:	2303      	movs	r3, #3
 8020ab8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8020aba:	2307      	movs	r3, #7
 8020abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020abe:	f107 031c 	add.w	r3, r7, #28
 8020ac2:	4619      	mov	r1, r3
 8020ac4:	4822      	ldr	r0, [pc, #136]	; (8020b50 <HAL_UART_MspInit+0x100>)
 8020ac6:	f000 fad7 	bl	8021078 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8020aca:	e039      	b.n	8020b40 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8020acc:	687b      	ldr	r3, [r7, #4]
 8020ace:	681b      	ldr	r3, [r3, #0]
 8020ad0:	4a20      	ldr	r2, [pc, #128]	; (8020b54 <HAL_UART_MspInit+0x104>)
 8020ad2:	4293      	cmp	r3, r2
 8020ad4:	d134      	bne.n	8020b40 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8020ad6:	2300      	movs	r3, #0
 8020ad8:	613b      	str	r3, [r7, #16]
 8020ada:	4b1c      	ldr	r3, [pc, #112]	; (8020b4c <HAL_UART_MspInit+0xfc>)
 8020adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020ade:	4a1b      	ldr	r2, [pc, #108]	; (8020b4c <HAL_UART_MspInit+0xfc>)
 8020ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8020ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8020ae6:	4b19      	ldr	r3, [pc, #100]	; (8020b4c <HAL_UART_MspInit+0xfc>)
 8020ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020aea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8020aee:	613b      	str	r3, [r7, #16]
 8020af0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8020af2:	2300      	movs	r3, #0
 8020af4:	60fb      	str	r3, [r7, #12]
 8020af6:	4b15      	ldr	r3, [pc, #84]	; (8020b4c <HAL_UART_MspInit+0xfc>)
 8020af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020afa:	4a14      	ldr	r2, [pc, #80]	; (8020b4c <HAL_UART_MspInit+0xfc>)
 8020afc:	f043 0304 	orr.w	r3, r3, #4
 8020b00:	6313      	str	r3, [r2, #48]	; 0x30
 8020b02:	4b12      	ldr	r3, [pc, #72]	; (8020b4c <HAL_UART_MspInit+0xfc>)
 8020b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020b06:	f003 0304 	and.w	r3, r3, #4
 8020b0a:	60fb      	str	r3, [r7, #12]
 8020b0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8020b0e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8020b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020b14:	2302      	movs	r3, #2
 8020b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020b18:	2300      	movs	r3, #0
 8020b1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020b1c:	2303      	movs	r3, #3
 8020b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8020b20:	2307      	movs	r3, #7
 8020b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020b24:	f107 031c 	add.w	r3, r7, #28
 8020b28:	4619      	mov	r1, r3
 8020b2a:	480b      	ldr	r0, [pc, #44]	; (8020b58 <HAL_UART_MspInit+0x108>)
 8020b2c:	f000 faa4 	bl	8021078 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8020b30:	2200      	movs	r2, #0
 8020b32:	2100      	movs	r1, #0
 8020b34:	2027      	movs	r0, #39	; 0x27
 8020b36:	f000 f9d6 	bl	8020ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8020b3a:	2027      	movs	r0, #39	; 0x27
 8020b3c:	f000 f9ef 	bl	8020f1e <HAL_NVIC_EnableIRQ>
}
 8020b40:	bf00      	nop
 8020b42:	3730      	adds	r7, #48	; 0x30
 8020b44:	46bd      	mov	sp, r7
 8020b46:	bd80      	pop	{r7, pc}
 8020b48:	40004400 	.word	0x40004400
 8020b4c:	40023800 	.word	0x40023800
 8020b50:	40020000 	.word	0x40020000
 8020b54:	40004800 	.word	0x40004800
 8020b58:	40020800 	.word	0x40020800

08020b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8020b5c:	b480      	push	{r7}
 8020b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8020b60:	e7fe      	b.n	8020b60 <NMI_Handler+0x4>

08020b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8020b62:	b480      	push	{r7}
 8020b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8020b66:	e7fe      	b.n	8020b66 <HardFault_Handler+0x4>

08020b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8020b68:	b480      	push	{r7}
 8020b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8020b6c:	e7fe      	b.n	8020b6c <MemManage_Handler+0x4>

08020b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8020b6e:	b480      	push	{r7}
 8020b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8020b72:	e7fe      	b.n	8020b72 <BusFault_Handler+0x4>

08020b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8020b74:	b480      	push	{r7}
 8020b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8020b78:	e7fe      	b.n	8020b78 <UsageFault_Handler+0x4>

08020b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8020b7a:	b480      	push	{r7}
 8020b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8020b7e:	bf00      	nop
 8020b80:	46bd      	mov	sp, r7
 8020b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b86:	4770      	bx	lr

08020b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8020b88:	b480      	push	{r7}
 8020b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8020b8c:	bf00      	nop
 8020b8e:	46bd      	mov	sp, r7
 8020b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b94:	4770      	bx	lr

08020b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8020b96:	b480      	push	{r7}
 8020b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8020b9a:	bf00      	nop
 8020b9c:	46bd      	mov	sp, r7
 8020b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ba2:	4770      	bx	lr

08020ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8020ba4:	b580      	push	{r7, lr}
 8020ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8020ba8:	f000 f8a2 	bl	8020cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8020bac:	bf00      	nop
 8020bae:	bd80      	pop	{r7, pc}

08020bb0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8020bb0:	b580      	push	{r7, lr}
 8020bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8020bb4:	4803      	ldr	r0, [pc, #12]	; (8020bc4 <USART3_IRQHandler+0x14>)
 8020bb6:	f001 fa67 	bl	8022088 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  flag=1;
 8020bba:	4b03      	ldr	r3, [pc, #12]	; (8020bc8 <USART3_IRQHandler+0x18>)
 8020bbc:	2201      	movs	r2, #1
 8020bbe:	601a      	str	r2, [r3, #0]

  /* USER CODE END USART3_IRQn 1 */
}
 8020bc0:	bf00      	nop
 8020bc2:	bd80      	pop	{r7, pc}
 8020bc4:	20000030 	.word	0x20000030
 8020bc8:	20000028 	.word	0x20000028

08020bcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8020bcc:	b480      	push	{r7}
 8020bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8020bd0:	4b07      	ldr	r3, [pc, #28]	; (8020bf0 <SystemInit+0x24>)
 8020bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020bd6:	4a06      	ldr	r2, [pc, #24]	; (8020bf0 <SystemInit+0x24>)
 8020bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8020bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8020be0:	4b03      	ldr	r3, [pc, #12]	; (8020bf0 <SystemInit+0x24>)
 8020be2:	4a04      	ldr	r2, [pc, #16]	; (8020bf4 <SystemInit+0x28>)
 8020be4:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8020be6:	bf00      	nop
 8020be8:	46bd      	mov	sp, r7
 8020bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bee:	4770      	bx	lr
 8020bf0:	e000ed00 	.word	0xe000ed00
 8020bf4:	08020000 	.word	0x08020000

08020bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8020bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8020c30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8020bfc:	480d      	ldr	r0, [pc, #52]	; (8020c34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8020bfe:	490e      	ldr	r1, [pc, #56]	; (8020c38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8020c00:	4a0e      	ldr	r2, [pc, #56]	; (8020c3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8020c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8020c04:	e002      	b.n	8020c0c <LoopCopyDataInit>

08020c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8020c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8020c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8020c0a:	3304      	adds	r3, #4

08020c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8020c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8020c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8020c10:	d3f9      	bcc.n	8020c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8020c12:	4a0b      	ldr	r2, [pc, #44]	; (8020c40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8020c14:	4c0b      	ldr	r4, [pc, #44]	; (8020c44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8020c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8020c18:	e001      	b.n	8020c1e <LoopFillZerobss>

08020c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8020c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8020c1c:	3204      	adds	r2, #4

08020c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8020c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8020c20:	d3fb      	bcc.n	8020c1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8020c22:	f7ff ffd3 	bl	8020bcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8020c26:	f002 f8b7 	bl	8022d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8020c2a:	f7ff fc67 	bl	80204fc <main>
  bx  lr    
 8020c2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8020c30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8020c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8020c38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8020c3c:	08022ea8 	.word	0x08022ea8
  ldr r2, =_sbss
 8020c40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8020c44:	20000124 	.word	0x20000124

08020c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8020c48:	e7fe      	b.n	8020c48 <ADC_IRQHandler>
	...

08020c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8020c4c:	b580      	push	{r7, lr}
 8020c4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8020c50:	4b0e      	ldr	r3, [pc, #56]	; (8020c8c <HAL_Init+0x40>)
 8020c52:	681b      	ldr	r3, [r3, #0]
 8020c54:	4a0d      	ldr	r2, [pc, #52]	; (8020c8c <HAL_Init+0x40>)
 8020c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8020c5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8020c5c:	4b0b      	ldr	r3, [pc, #44]	; (8020c8c <HAL_Init+0x40>)
 8020c5e:	681b      	ldr	r3, [r3, #0]
 8020c60:	4a0a      	ldr	r2, [pc, #40]	; (8020c8c <HAL_Init+0x40>)
 8020c62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8020c66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8020c68:	4b08      	ldr	r3, [pc, #32]	; (8020c8c <HAL_Init+0x40>)
 8020c6a:	681b      	ldr	r3, [r3, #0]
 8020c6c:	4a07      	ldr	r2, [pc, #28]	; (8020c8c <HAL_Init+0x40>)
 8020c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8020c72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8020c74:	2003      	movs	r0, #3
 8020c76:	f000 f92b 	bl	8020ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8020c7a:	2000      	movs	r0, #0
 8020c7c:	f000 f808 	bl	8020c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8020c80:	f7ff febe 	bl	8020a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8020c84:	2300      	movs	r3, #0
}
 8020c86:	4618      	mov	r0, r3
 8020c88:	bd80      	pop	{r7, pc}
 8020c8a:	bf00      	nop
 8020c8c:	40023c00 	.word	0x40023c00

08020c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8020c90:	b580      	push	{r7, lr}
 8020c92:	b082      	sub	sp, #8
 8020c94:	af00      	add	r7, sp, #0
 8020c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8020c98:	4b12      	ldr	r3, [pc, #72]	; (8020ce4 <HAL_InitTick+0x54>)
 8020c9a:	681a      	ldr	r2, [r3, #0]
 8020c9c:	4b12      	ldr	r3, [pc, #72]	; (8020ce8 <HAL_InitTick+0x58>)
 8020c9e:	781b      	ldrb	r3, [r3, #0]
 8020ca0:	4619      	mov	r1, r3
 8020ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8020ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8020caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8020cae:	4618      	mov	r0, r3
 8020cb0:	f000 f943 	bl	8020f3a <HAL_SYSTICK_Config>
 8020cb4:	4603      	mov	r3, r0
 8020cb6:	2b00      	cmp	r3, #0
 8020cb8:	d001      	beq.n	8020cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8020cba:	2301      	movs	r3, #1
 8020cbc:	e00e      	b.n	8020cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020cbe:	687b      	ldr	r3, [r7, #4]
 8020cc0:	2b0f      	cmp	r3, #15
 8020cc2:	d80a      	bhi.n	8020cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8020cc4:	2200      	movs	r2, #0
 8020cc6:	6879      	ldr	r1, [r7, #4]
 8020cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8020ccc:	f000 f90b 	bl	8020ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8020cd0:	4a06      	ldr	r2, [pc, #24]	; (8020cec <HAL_InitTick+0x5c>)
 8020cd2:	687b      	ldr	r3, [r7, #4]
 8020cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8020cd6:	2300      	movs	r3, #0
 8020cd8:	e000      	b.n	8020cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8020cda:	2301      	movs	r3, #1
}
 8020cdc:	4618      	mov	r0, r3
 8020cde:	3708      	adds	r7, #8
 8020ce0:	46bd      	mov	sp, r7
 8020ce2:	bd80      	pop	{r7, pc}
 8020ce4:	20000000 	.word	0x20000000
 8020ce8:	20000008 	.word	0x20000008
 8020cec:	20000004 	.word	0x20000004

08020cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8020cf0:	b480      	push	{r7}
 8020cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8020cf4:	4b06      	ldr	r3, [pc, #24]	; (8020d10 <HAL_IncTick+0x20>)
 8020cf6:	781b      	ldrb	r3, [r3, #0]
 8020cf8:	461a      	mov	r2, r3
 8020cfa:	4b06      	ldr	r3, [pc, #24]	; (8020d14 <HAL_IncTick+0x24>)
 8020cfc:	681b      	ldr	r3, [r3, #0]
 8020cfe:	4413      	add	r3, r2
 8020d00:	4a04      	ldr	r2, [pc, #16]	; (8020d14 <HAL_IncTick+0x24>)
 8020d02:	6013      	str	r3, [r2, #0]
}
 8020d04:	bf00      	nop
 8020d06:	46bd      	mov	sp, r7
 8020d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d0c:	4770      	bx	lr
 8020d0e:	bf00      	nop
 8020d10:	20000008 	.word	0x20000008
 8020d14:	20000120 	.word	0x20000120

08020d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8020d18:	b480      	push	{r7}
 8020d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8020d1c:	4b03      	ldr	r3, [pc, #12]	; (8020d2c <HAL_GetTick+0x14>)
 8020d1e:	681b      	ldr	r3, [r3, #0]
}
 8020d20:	4618      	mov	r0, r3
 8020d22:	46bd      	mov	sp, r7
 8020d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d28:	4770      	bx	lr
 8020d2a:	bf00      	nop
 8020d2c:	20000120 	.word	0x20000120

08020d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020d30:	b480      	push	{r7}
 8020d32:	b085      	sub	sp, #20
 8020d34:	af00      	add	r7, sp, #0
 8020d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8020d38:	687b      	ldr	r3, [r7, #4]
 8020d3a:	f003 0307 	and.w	r3, r3, #7
 8020d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8020d40:	4b0c      	ldr	r3, [pc, #48]	; (8020d74 <__NVIC_SetPriorityGrouping+0x44>)
 8020d42:	68db      	ldr	r3, [r3, #12]
 8020d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8020d46:	68ba      	ldr	r2, [r7, #8]
 8020d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8020d4c:	4013      	ands	r3, r2
 8020d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8020d50:	68fb      	ldr	r3, [r7, #12]
 8020d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8020d54:	68bb      	ldr	r3, [r7, #8]
 8020d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8020d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8020d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8020d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8020d62:	4a04      	ldr	r2, [pc, #16]	; (8020d74 <__NVIC_SetPriorityGrouping+0x44>)
 8020d64:	68bb      	ldr	r3, [r7, #8]
 8020d66:	60d3      	str	r3, [r2, #12]
}
 8020d68:	bf00      	nop
 8020d6a:	3714      	adds	r7, #20
 8020d6c:	46bd      	mov	sp, r7
 8020d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d72:	4770      	bx	lr
 8020d74:	e000ed00 	.word	0xe000ed00

08020d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8020d78:	b480      	push	{r7}
 8020d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8020d7c:	4b04      	ldr	r3, [pc, #16]	; (8020d90 <__NVIC_GetPriorityGrouping+0x18>)
 8020d7e:	68db      	ldr	r3, [r3, #12]
 8020d80:	0a1b      	lsrs	r3, r3, #8
 8020d82:	f003 0307 	and.w	r3, r3, #7
}
 8020d86:	4618      	mov	r0, r3
 8020d88:	46bd      	mov	sp, r7
 8020d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d8e:	4770      	bx	lr
 8020d90:	e000ed00 	.word	0xe000ed00

08020d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8020d94:	b480      	push	{r7}
 8020d96:	b083      	sub	sp, #12
 8020d98:	af00      	add	r7, sp, #0
 8020d9a:	4603      	mov	r3, r0
 8020d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8020d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020da2:	2b00      	cmp	r3, #0
 8020da4:	db0b      	blt.n	8020dbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8020da6:	79fb      	ldrb	r3, [r7, #7]
 8020da8:	f003 021f 	and.w	r2, r3, #31
 8020dac:	4907      	ldr	r1, [pc, #28]	; (8020dcc <__NVIC_EnableIRQ+0x38>)
 8020dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020db2:	095b      	lsrs	r3, r3, #5
 8020db4:	2001      	movs	r0, #1
 8020db6:	fa00 f202 	lsl.w	r2, r0, r2
 8020dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8020dbe:	bf00      	nop
 8020dc0:	370c      	adds	r7, #12
 8020dc2:	46bd      	mov	sp, r7
 8020dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020dc8:	4770      	bx	lr
 8020dca:	bf00      	nop
 8020dcc:	e000e100 	.word	0xe000e100

08020dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8020dd0:	b480      	push	{r7}
 8020dd2:	b083      	sub	sp, #12
 8020dd4:	af00      	add	r7, sp, #0
 8020dd6:	4603      	mov	r3, r0
 8020dd8:	6039      	str	r1, [r7, #0]
 8020dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8020ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020de0:	2b00      	cmp	r3, #0
 8020de2:	db0a      	blt.n	8020dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020de4:	683b      	ldr	r3, [r7, #0]
 8020de6:	b2da      	uxtb	r2, r3
 8020de8:	490c      	ldr	r1, [pc, #48]	; (8020e1c <__NVIC_SetPriority+0x4c>)
 8020dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020dee:	0112      	lsls	r2, r2, #4
 8020df0:	b2d2      	uxtb	r2, r2
 8020df2:	440b      	add	r3, r1
 8020df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8020df8:	e00a      	b.n	8020e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020dfa:	683b      	ldr	r3, [r7, #0]
 8020dfc:	b2da      	uxtb	r2, r3
 8020dfe:	4908      	ldr	r1, [pc, #32]	; (8020e20 <__NVIC_SetPriority+0x50>)
 8020e00:	79fb      	ldrb	r3, [r7, #7]
 8020e02:	f003 030f 	and.w	r3, r3, #15
 8020e06:	3b04      	subs	r3, #4
 8020e08:	0112      	lsls	r2, r2, #4
 8020e0a:	b2d2      	uxtb	r2, r2
 8020e0c:	440b      	add	r3, r1
 8020e0e:	761a      	strb	r2, [r3, #24]
}
 8020e10:	bf00      	nop
 8020e12:	370c      	adds	r7, #12
 8020e14:	46bd      	mov	sp, r7
 8020e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e1a:	4770      	bx	lr
 8020e1c:	e000e100 	.word	0xe000e100
 8020e20:	e000ed00 	.word	0xe000ed00

08020e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020e24:	b480      	push	{r7}
 8020e26:	b089      	sub	sp, #36	; 0x24
 8020e28:	af00      	add	r7, sp, #0
 8020e2a:	60f8      	str	r0, [r7, #12]
 8020e2c:	60b9      	str	r1, [r7, #8]
 8020e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8020e30:	68fb      	ldr	r3, [r7, #12]
 8020e32:	f003 0307 	and.w	r3, r3, #7
 8020e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8020e38:	69fb      	ldr	r3, [r7, #28]
 8020e3a:	f1c3 0307 	rsb	r3, r3, #7
 8020e3e:	2b04      	cmp	r3, #4
 8020e40:	bf28      	it	cs
 8020e42:	2304      	movcs	r3, #4
 8020e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8020e46:	69fb      	ldr	r3, [r7, #28]
 8020e48:	3304      	adds	r3, #4
 8020e4a:	2b06      	cmp	r3, #6
 8020e4c:	d902      	bls.n	8020e54 <NVIC_EncodePriority+0x30>
 8020e4e:	69fb      	ldr	r3, [r7, #28]
 8020e50:	3b03      	subs	r3, #3
 8020e52:	e000      	b.n	8020e56 <NVIC_EncodePriority+0x32>
 8020e54:	2300      	movs	r3, #0
 8020e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020e58:	f04f 32ff 	mov.w	r2, #4294967295
 8020e5c:	69bb      	ldr	r3, [r7, #24]
 8020e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8020e62:	43da      	mvns	r2, r3
 8020e64:	68bb      	ldr	r3, [r7, #8]
 8020e66:	401a      	ands	r2, r3
 8020e68:	697b      	ldr	r3, [r7, #20]
 8020e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8020e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8020e70:	697b      	ldr	r3, [r7, #20]
 8020e72:	fa01 f303 	lsl.w	r3, r1, r3
 8020e76:	43d9      	mvns	r1, r3
 8020e78:	687b      	ldr	r3, [r7, #4]
 8020e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020e7c:	4313      	orrs	r3, r2
         );
}
 8020e7e:	4618      	mov	r0, r3
 8020e80:	3724      	adds	r7, #36	; 0x24
 8020e82:	46bd      	mov	sp, r7
 8020e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e88:	4770      	bx	lr
	...

08020e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8020e8c:	b580      	push	{r7, lr}
 8020e8e:	b082      	sub	sp, #8
 8020e90:	af00      	add	r7, sp, #0
 8020e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8020e94:	687b      	ldr	r3, [r7, #4]
 8020e96:	3b01      	subs	r3, #1
 8020e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8020e9c:	d301      	bcc.n	8020ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8020e9e:	2301      	movs	r3, #1
 8020ea0:	e00f      	b.n	8020ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8020ea2:	4a0a      	ldr	r2, [pc, #40]	; (8020ecc <SysTick_Config+0x40>)
 8020ea4:	687b      	ldr	r3, [r7, #4]
 8020ea6:	3b01      	subs	r3, #1
 8020ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8020eaa:	210f      	movs	r1, #15
 8020eac:	f04f 30ff 	mov.w	r0, #4294967295
 8020eb0:	f7ff ff8e 	bl	8020dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8020eb4:	4b05      	ldr	r3, [pc, #20]	; (8020ecc <SysTick_Config+0x40>)
 8020eb6:	2200      	movs	r2, #0
 8020eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8020eba:	4b04      	ldr	r3, [pc, #16]	; (8020ecc <SysTick_Config+0x40>)
 8020ebc:	2207      	movs	r2, #7
 8020ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8020ec0:	2300      	movs	r3, #0
}
 8020ec2:	4618      	mov	r0, r3
 8020ec4:	3708      	adds	r7, #8
 8020ec6:	46bd      	mov	sp, r7
 8020ec8:	bd80      	pop	{r7, pc}
 8020eca:	bf00      	nop
 8020ecc:	e000e010 	.word	0xe000e010

08020ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020ed0:	b580      	push	{r7, lr}
 8020ed2:	b082      	sub	sp, #8
 8020ed4:	af00      	add	r7, sp, #0
 8020ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8020ed8:	6878      	ldr	r0, [r7, #4]
 8020eda:	f7ff ff29 	bl	8020d30 <__NVIC_SetPriorityGrouping>
}
 8020ede:	bf00      	nop
 8020ee0:	3708      	adds	r7, #8
 8020ee2:	46bd      	mov	sp, r7
 8020ee4:	bd80      	pop	{r7, pc}

08020ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8020ee6:	b580      	push	{r7, lr}
 8020ee8:	b086      	sub	sp, #24
 8020eea:	af00      	add	r7, sp, #0
 8020eec:	4603      	mov	r3, r0
 8020eee:	60b9      	str	r1, [r7, #8]
 8020ef0:	607a      	str	r2, [r7, #4]
 8020ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8020ef4:	2300      	movs	r3, #0
 8020ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8020ef8:	f7ff ff3e 	bl	8020d78 <__NVIC_GetPriorityGrouping>
 8020efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8020efe:	687a      	ldr	r2, [r7, #4]
 8020f00:	68b9      	ldr	r1, [r7, #8]
 8020f02:	6978      	ldr	r0, [r7, #20]
 8020f04:	f7ff ff8e 	bl	8020e24 <NVIC_EncodePriority>
 8020f08:	4602      	mov	r2, r0
 8020f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020f0e:	4611      	mov	r1, r2
 8020f10:	4618      	mov	r0, r3
 8020f12:	f7ff ff5d 	bl	8020dd0 <__NVIC_SetPriority>
}
 8020f16:	bf00      	nop
 8020f18:	3718      	adds	r7, #24
 8020f1a:	46bd      	mov	sp, r7
 8020f1c:	bd80      	pop	{r7, pc}

08020f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8020f1e:	b580      	push	{r7, lr}
 8020f20:	b082      	sub	sp, #8
 8020f22:	af00      	add	r7, sp, #0
 8020f24:	4603      	mov	r3, r0
 8020f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8020f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020f2c:	4618      	mov	r0, r3
 8020f2e:	f7ff ff31 	bl	8020d94 <__NVIC_EnableIRQ>
}
 8020f32:	bf00      	nop
 8020f34:	3708      	adds	r7, #8
 8020f36:	46bd      	mov	sp, r7
 8020f38:	bd80      	pop	{r7, pc}

08020f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8020f3a:	b580      	push	{r7, lr}
 8020f3c:	b082      	sub	sp, #8
 8020f3e:	af00      	add	r7, sp, #0
 8020f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8020f42:	6878      	ldr	r0, [r7, #4]
 8020f44:	f7ff ffa2 	bl	8020e8c <SysTick_Config>
 8020f48:	4603      	mov	r3, r0
}
 8020f4a:	4618      	mov	r0, r3
 8020f4c:	3708      	adds	r7, #8
 8020f4e:	46bd      	mov	sp, r7
 8020f50:	bd80      	pop	{r7, pc}

08020f52 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8020f52:	b580      	push	{r7, lr}
 8020f54:	b084      	sub	sp, #16
 8020f56:	af00      	add	r7, sp, #0
 8020f58:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8020f5a:	687b      	ldr	r3, [r7, #4]
 8020f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020f5e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8020f60:	f7ff feda 	bl	8020d18 <HAL_GetTick>
 8020f64:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8020f66:	687b      	ldr	r3, [r7, #4]
 8020f68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8020f6c:	b2db      	uxtb	r3, r3
 8020f6e:	2b02      	cmp	r3, #2
 8020f70:	d008      	beq.n	8020f84 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8020f72:	687b      	ldr	r3, [r7, #4]
 8020f74:	2280      	movs	r2, #128	; 0x80
 8020f76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8020f78:	687b      	ldr	r3, [r7, #4]
 8020f7a:	2200      	movs	r2, #0
 8020f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8020f80:	2301      	movs	r3, #1
 8020f82:	e052      	b.n	802102a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8020f84:	687b      	ldr	r3, [r7, #4]
 8020f86:	681b      	ldr	r3, [r3, #0]
 8020f88:	681a      	ldr	r2, [r3, #0]
 8020f8a:	687b      	ldr	r3, [r7, #4]
 8020f8c:	681b      	ldr	r3, [r3, #0]
 8020f8e:	f022 0216 	bic.w	r2, r2, #22
 8020f92:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8020f94:	687b      	ldr	r3, [r7, #4]
 8020f96:	681b      	ldr	r3, [r3, #0]
 8020f98:	695a      	ldr	r2, [r3, #20]
 8020f9a:	687b      	ldr	r3, [r7, #4]
 8020f9c:	681b      	ldr	r3, [r3, #0]
 8020f9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8020fa2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8020fa4:	687b      	ldr	r3, [r7, #4]
 8020fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020fa8:	2b00      	cmp	r3, #0
 8020faa:	d103      	bne.n	8020fb4 <HAL_DMA_Abort+0x62>
 8020fac:	687b      	ldr	r3, [r7, #4]
 8020fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8020fb0:	2b00      	cmp	r3, #0
 8020fb2:	d007      	beq.n	8020fc4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8020fb4:	687b      	ldr	r3, [r7, #4]
 8020fb6:	681b      	ldr	r3, [r3, #0]
 8020fb8:	681a      	ldr	r2, [r3, #0]
 8020fba:	687b      	ldr	r3, [r7, #4]
 8020fbc:	681b      	ldr	r3, [r3, #0]
 8020fbe:	f022 0208 	bic.w	r2, r2, #8
 8020fc2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8020fc4:	687b      	ldr	r3, [r7, #4]
 8020fc6:	681b      	ldr	r3, [r3, #0]
 8020fc8:	681a      	ldr	r2, [r3, #0]
 8020fca:	687b      	ldr	r3, [r7, #4]
 8020fcc:	681b      	ldr	r3, [r3, #0]
 8020fce:	f022 0201 	bic.w	r2, r2, #1
 8020fd2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8020fd4:	e013      	b.n	8020ffe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8020fd6:	f7ff fe9f 	bl	8020d18 <HAL_GetTick>
 8020fda:	4602      	mov	r2, r0
 8020fdc:	68bb      	ldr	r3, [r7, #8]
 8020fde:	1ad3      	subs	r3, r2, r3
 8020fe0:	2b05      	cmp	r3, #5
 8020fe2:	d90c      	bls.n	8020ffe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8020fe4:	687b      	ldr	r3, [r7, #4]
 8020fe6:	2220      	movs	r2, #32
 8020fe8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8020fea:	687b      	ldr	r3, [r7, #4]
 8020fec:	2203      	movs	r2, #3
 8020fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8020ff2:	687b      	ldr	r3, [r7, #4]
 8020ff4:	2200      	movs	r2, #0
 8020ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8020ffa:	2303      	movs	r3, #3
 8020ffc:	e015      	b.n	802102a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8020ffe:	687b      	ldr	r3, [r7, #4]
 8021000:	681b      	ldr	r3, [r3, #0]
 8021002:	681b      	ldr	r3, [r3, #0]
 8021004:	f003 0301 	and.w	r3, r3, #1
 8021008:	2b00      	cmp	r3, #0
 802100a:	d1e4      	bne.n	8020fd6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 802100c:	687b      	ldr	r3, [r7, #4]
 802100e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8021010:	223f      	movs	r2, #63	; 0x3f
 8021012:	409a      	lsls	r2, r3
 8021014:	68fb      	ldr	r3, [r7, #12]
 8021016:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8021018:	687b      	ldr	r3, [r7, #4]
 802101a:	2201      	movs	r2, #1
 802101c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8021020:	687b      	ldr	r3, [r7, #4]
 8021022:	2200      	movs	r2, #0
 8021024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8021028:	2300      	movs	r3, #0
}
 802102a:	4618      	mov	r0, r3
 802102c:	3710      	adds	r7, #16
 802102e:	46bd      	mov	sp, r7
 8021030:	bd80      	pop	{r7, pc}

08021032 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8021032:	b480      	push	{r7}
 8021034:	b083      	sub	sp, #12
 8021036:	af00      	add	r7, sp, #0
 8021038:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 802103a:	687b      	ldr	r3, [r7, #4]
 802103c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8021040:	b2db      	uxtb	r3, r3
 8021042:	2b02      	cmp	r3, #2
 8021044:	d004      	beq.n	8021050 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8021046:	687b      	ldr	r3, [r7, #4]
 8021048:	2280      	movs	r2, #128	; 0x80
 802104a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 802104c:	2301      	movs	r3, #1
 802104e:	e00c      	b.n	802106a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8021050:	687b      	ldr	r3, [r7, #4]
 8021052:	2205      	movs	r2, #5
 8021054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8021058:	687b      	ldr	r3, [r7, #4]
 802105a:	681b      	ldr	r3, [r3, #0]
 802105c:	681a      	ldr	r2, [r3, #0]
 802105e:	687b      	ldr	r3, [r7, #4]
 8021060:	681b      	ldr	r3, [r3, #0]
 8021062:	f022 0201 	bic.w	r2, r2, #1
 8021066:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8021068:	2300      	movs	r3, #0
}
 802106a:	4618      	mov	r0, r3
 802106c:	370c      	adds	r7, #12
 802106e:	46bd      	mov	sp, r7
 8021070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021074:	4770      	bx	lr
	...

08021078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8021078:	b480      	push	{r7}
 802107a:	b089      	sub	sp, #36	; 0x24
 802107c:	af00      	add	r7, sp, #0
 802107e:	6078      	str	r0, [r7, #4]
 8021080:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8021082:	2300      	movs	r3, #0
 8021084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8021086:	2300      	movs	r3, #0
 8021088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 802108a:	2300      	movs	r3, #0
 802108c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 802108e:	2300      	movs	r3, #0
 8021090:	61fb      	str	r3, [r7, #28]
 8021092:	e165      	b.n	8021360 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8021094:	2201      	movs	r2, #1
 8021096:	69fb      	ldr	r3, [r7, #28]
 8021098:	fa02 f303 	lsl.w	r3, r2, r3
 802109c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 802109e:	683b      	ldr	r3, [r7, #0]
 80210a0:	681b      	ldr	r3, [r3, #0]
 80210a2:	697a      	ldr	r2, [r7, #20]
 80210a4:	4013      	ands	r3, r2
 80210a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80210a8:	693a      	ldr	r2, [r7, #16]
 80210aa:	697b      	ldr	r3, [r7, #20]
 80210ac:	429a      	cmp	r2, r3
 80210ae:	f040 8154 	bne.w	802135a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80210b2:	683b      	ldr	r3, [r7, #0]
 80210b4:	685b      	ldr	r3, [r3, #4]
 80210b6:	f003 0303 	and.w	r3, r3, #3
 80210ba:	2b01      	cmp	r3, #1
 80210bc:	d005      	beq.n	80210ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80210be:	683b      	ldr	r3, [r7, #0]
 80210c0:	685b      	ldr	r3, [r3, #4]
 80210c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80210c6:	2b02      	cmp	r3, #2
 80210c8:	d130      	bne.n	802112c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80210ca:	687b      	ldr	r3, [r7, #4]
 80210cc:	689b      	ldr	r3, [r3, #8]
 80210ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80210d0:	69fb      	ldr	r3, [r7, #28]
 80210d2:	005b      	lsls	r3, r3, #1
 80210d4:	2203      	movs	r2, #3
 80210d6:	fa02 f303 	lsl.w	r3, r2, r3
 80210da:	43db      	mvns	r3, r3
 80210dc:	69ba      	ldr	r2, [r7, #24]
 80210de:	4013      	ands	r3, r2
 80210e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80210e2:	683b      	ldr	r3, [r7, #0]
 80210e4:	68da      	ldr	r2, [r3, #12]
 80210e6:	69fb      	ldr	r3, [r7, #28]
 80210e8:	005b      	lsls	r3, r3, #1
 80210ea:	fa02 f303 	lsl.w	r3, r2, r3
 80210ee:	69ba      	ldr	r2, [r7, #24]
 80210f0:	4313      	orrs	r3, r2
 80210f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80210f4:	687b      	ldr	r3, [r7, #4]
 80210f6:	69ba      	ldr	r2, [r7, #24]
 80210f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80210fa:	687b      	ldr	r3, [r7, #4]
 80210fc:	685b      	ldr	r3, [r3, #4]
 80210fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8021100:	2201      	movs	r2, #1
 8021102:	69fb      	ldr	r3, [r7, #28]
 8021104:	fa02 f303 	lsl.w	r3, r2, r3
 8021108:	43db      	mvns	r3, r3
 802110a:	69ba      	ldr	r2, [r7, #24]
 802110c:	4013      	ands	r3, r2
 802110e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8021110:	683b      	ldr	r3, [r7, #0]
 8021112:	685b      	ldr	r3, [r3, #4]
 8021114:	091b      	lsrs	r3, r3, #4
 8021116:	f003 0201 	and.w	r2, r3, #1
 802111a:	69fb      	ldr	r3, [r7, #28]
 802111c:	fa02 f303 	lsl.w	r3, r2, r3
 8021120:	69ba      	ldr	r2, [r7, #24]
 8021122:	4313      	orrs	r3, r2
 8021124:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8021126:	687b      	ldr	r3, [r7, #4]
 8021128:	69ba      	ldr	r2, [r7, #24]
 802112a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 802112c:	683b      	ldr	r3, [r7, #0]
 802112e:	685b      	ldr	r3, [r3, #4]
 8021130:	f003 0303 	and.w	r3, r3, #3
 8021134:	2b03      	cmp	r3, #3
 8021136:	d017      	beq.n	8021168 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8021138:	687b      	ldr	r3, [r7, #4]
 802113a:	68db      	ldr	r3, [r3, #12]
 802113c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 802113e:	69fb      	ldr	r3, [r7, #28]
 8021140:	005b      	lsls	r3, r3, #1
 8021142:	2203      	movs	r2, #3
 8021144:	fa02 f303 	lsl.w	r3, r2, r3
 8021148:	43db      	mvns	r3, r3
 802114a:	69ba      	ldr	r2, [r7, #24]
 802114c:	4013      	ands	r3, r2
 802114e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8021150:	683b      	ldr	r3, [r7, #0]
 8021152:	689a      	ldr	r2, [r3, #8]
 8021154:	69fb      	ldr	r3, [r7, #28]
 8021156:	005b      	lsls	r3, r3, #1
 8021158:	fa02 f303 	lsl.w	r3, r2, r3
 802115c:	69ba      	ldr	r2, [r7, #24]
 802115e:	4313      	orrs	r3, r2
 8021160:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8021162:	687b      	ldr	r3, [r7, #4]
 8021164:	69ba      	ldr	r2, [r7, #24]
 8021166:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8021168:	683b      	ldr	r3, [r7, #0]
 802116a:	685b      	ldr	r3, [r3, #4]
 802116c:	f003 0303 	and.w	r3, r3, #3
 8021170:	2b02      	cmp	r3, #2
 8021172:	d123      	bne.n	80211bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8021174:	69fb      	ldr	r3, [r7, #28]
 8021176:	08da      	lsrs	r2, r3, #3
 8021178:	687b      	ldr	r3, [r7, #4]
 802117a:	3208      	adds	r2, #8
 802117c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021180:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8021182:	69fb      	ldr	r3, [r7, #28]
 8021184:	f003 0307 	and.w	r3, r3, #7
 8021188:	009b      	lsls	r3, r3, #2
 802118a:	220f      	movs	r2, #15
 802118c:	fa02 f303 	lsl.w	r3, r2, r3
 8021190:	43db      	mvns	r3, r3
 8021192:	69ba      	ldr	r2, [r7, #24]
 8021194:	4013      	ands	r3, r2
 8021196:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8021198:	683b      	ldr	r3, [r7, #0]
 802119a:	691a      	ldr	r2, [r3, #16]
 802119c:	69fb      	ldr	r3, [r7, #28]
 802119e:	f003 0307 	and.w	r3, r3, #7
 80211a2:	009b      	lsls	r3, r3, #2
 80211a4:	fa02 f303 	lsl.w	r3, r2, r3
 80211a8:	69ba      	ldr	r2, [r7, #24]
 80211aa:	4313      	orrs	r3, r2
 80211ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80211ae:	69fb      	ldr	r3, [r7, #28]
 80211b0:	08da      	lsrs	r2, r3, #3
 80211b2:	687b      	ldr	r3, [r7, #4]
 80211b4:	3208      	adds	r2, #8
 80211b6:	69b9      	ldr	r1, [r7, #24]
 80211b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80211bc:	687b      	ldr	r3, [r7, #4]
 80211be:	681b      	ldr	r3, [r3, #0]
 80211c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80211c2:	69fb      	ldr	r3, [r7, #28]
 80211c4:	005b      	lsls	r3, r3, #1
 80211c6:	2203      	movs	r2, #3
 80211c8:	fa02 f303 	lsl.w	r3, r2, r3
 80211cc:	43db      	mvns	r3, r3
 80211ce:	69ba      	ldr	r2, [r7, #24]
 80211d0:	4013      	ands	r3, r2
 80211d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80211d4:	683b      	ldr	r3, [r7, #0]
 80211d6:	685b      	ldr	r3, [r3, #4]
 80211d8:	f003 0203 	and.w	r2, r3, #3
 80211dc:	69fb      	ldr	r3, [r7, #28]
 80211de:	005b      	lsls	r3, r3, #1
 80211e0:	fa02 f303 	lsl.w	r3, r2, r3
 80211e4:	69ba      	ldr	r2, [r7, #24]
 80211e6:	4313      	orrs	r3, r2
 80211e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80211ea:	687b      	ldr	r3, [r7, #4]
 80211ec:	69ba      	ldr	r2, [r7, #24]
 80211ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80211f0:	683b      	ldr	r3, [r7, #0]
 80211f2:	685b      	ldr	r3, [r3, #4]
 80211f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80211f8:	2b00      	cmp	r3, #0
 80211fa:	f000 80ae 	beq.w	802135a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80211fe:	2300      	movs	r3, #0
 8021200:	60fb      	str	r3, [r7, #12]
 8021202:	4b5d      	ldr	r3, [pc, #372]	; (8021378 <HAL_GPIO_Init+0x300>)
 8021204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021206:	4a5c      	ldr	r2, [pc, #368]	; (8021378 <HAL_GPIO_Init+0x300>)
 8021208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802120c:	6453      	str	r3, [r2, #68]	; 0x44
 802120e:	4b5a      	ldr	r3, [pc, #360]	; (8021378 <HAL_GPIO_Init+0x300>)
 8021210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8021216:	60fb      	str	r3, [r7, #12]
 8021218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 802121a:	4a58      	ldr	r2, [pc, #352]	; (802137c <HAL_GPIO_Init+0x304>)
 802121c:	69fb      	ldr	r3, [r7, #28]
 802121e:	089b      	lsrs	r3, r3, #2
 8021220:	3302      	adds	r3, #2
 8021222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8021228:	69fb      	ldr	r3, [r7, #28]
 802122a:	f003 0303 	and.w	r3, r3, #3
 802122e:	009b      	lsls	r3, r3, #2
 8021230:	220f      	movs	r2, #15
 8021232:	fa02 f303 	lsl.w	r3, r2, r3
 8021236:	43db      	mvns	r3, r3
 8021238:	69ba      	ldr	r2, [r7, #24]
 802123a:	4013      	ands	r3, r2
 802123c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 802123e:	687b      	ldr	r3, [r7, #4]
 8021240:	4a4f      	ldr	r2, [pc, #316]	; (8021380 <HAL_GPIO_Init+0x308>)
 8021242:	4293      	cmp	r3, r2
 8021244:	d025      	beq.n	8021292 <HAL_GPIO_Init+0x21a>
 8021246:	687b      	ldr	r3, [r7, #4]
 8021248:	4a4e      	ldr	r2, [pc, #312]	; (8021384 <HAL_GPIO_Init+0x30c>)
 802124a:	4293      	cmp	r3, r2
 802124c:	d01f      	beq.n	802128e <HAL_GPIO_Init+0x216>
 802124e:	687b      	ldr	r3, [r7, #4]
 8021250:	4a4d      	ldr	r2, [pc, #308]	; (8021388 <HAL_GPIO_Init+0x310>)
 8021252:	4293      	cmp	r3, r2
 8021254:	d019      	beq.n	802128a <HAL_GPIO_Init+0x212>
 8021256:	687b      	ldr	r3, [r7, #4]
 8021258:	4a4c      	ldr	r2, [pc, #304]	; (802138c <HAL_GPIO_Init+0x314>)
 802125a:	4293      	cmp	r3, r2
 802125c:	d013      	beq.n	8021286 <HAL_GPIO_Init+0x20e>
 802125e:	687b      	ldr	r3, [r7, #4]
 8021260:	4a4b      	ldr	r2, [pc, #300]	; (8021390 <HAL_GPIO_Init+0x318>)
 8021262:	4293      	cmp	r3, r2
 8021264:	d00d      	beq.n	8021282 <HAL_GPIO_Init+0x20a>
 8021266:	687b      	ldr	r3, [r7, #4]
 8021268:	4a4a      	ldr	r2, [pc, #296]	; (8021394 <HAL_GPIO_Init+0x31c>)
 802126a:	4293      	cmp	r3, r2
 802126c:	d007      	beq.n	802127e <HAL_GPIO_Init+0x206>
 802126e:	687b      	ldr	r3, [r7, #4]
 8021270:	4a49      	ldr	r2, [pc, #292]	; (8021398 <HAL_GPIO_Init+0x320>)
 8021272:	4293      	cmp	r3, r2
 8021274:	d101      	bne.n	802127a <HAL_GPIO_Init+0x202>
 8021276:	2306      	movs	r3, #6
 8021278:	e00c      	b.n	8021294 <HAL_GPIO_Init+0x21c>
 802127a:	2307      	movs	r3, #7
 802127c:	e00a      	b.n	8021294 <HAL_GPIO_Init+0x21c>
 802127e:	2305      	movs	r3, #5
 8021280:	e008      	b.n	8021294 <HAL_GPIO_Init+0x21c>
 8021282:	2304      	movs	r3, #4
 8021284:	e006      	b.n	8021294 <HAL_GPIO_Init+0x21c>
 8021286:	2303      	movs	r3, #3
 8021288:	e004      	b.n	8021294 <HAL_GPIO_Init+0x21c>
 802128a:	2302      	movs	r3, #2
 802128c:	e002      	b.n	8021294 <HAL_GPIO_Init+0x21c>
 802128e:	2301      	movs	r3, #1
 8021290:	e000      	b.n	8021294 <HAL_GPIO_Init+0x21c>
 8021292:	2300      	movs	r3, #0
 8021294:	69fa      	ldr	r2, [r7, #28]
 8021296:	f002 0203 	and.w	r2, r2, #3
 802129a:	0092      	lsls	r2, r2, #2
 802129c:	4093      	lsls	r3, r2
 802129e:	69ba      	ldr	r2, [r7, #24]
 80212a0:	4313      	orrs	r3, r2
 80212a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80212a4:	4935      	ldr	r1, [pc, #212]	; (802137c <HAL_GPIO_Init+0x304>)
 80212a6:	69fb      	ldr	r3, [r7, #28]
 80212a8:	089b      	lsrs	r3, r3, #2
 80212aa:	3302      	adds	r3, #2
 80212ac:	69ba      	ldr	r2, [r7, #24]
 80212ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80212b2:	4b3a      	ldr	r3, [pc, #232]	; (802139c <HAL_GPIO_Init+0x324>)
 80212b4:	689b      	ldr	r3, [r3, #8]
 80212b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80212b8:	693b      	ldr	r3, [r7, #16]
 80212ba:	43db      	mvns	r3, r3
 80212bc:	69ba      	ldr	r2, [r7, #24]
 80212be:	4013      	ands	r3, r2
 80212c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80212c2:	683b      	ldr	r3, [r7, #0]
 80212c4:	685b      	ldr	r3, [r3, #4]
 80212c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80212ca:	2b00      	cmp	r3, #0
 80212cc:	d003      	beq.n	80212d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80212ce:	69ba      	ldr	r2, [r7, #24]
 80212d0:	693b      	ldr	r3, [r7, #16]
 80212d2:	4313      	orrs	r3, r2
 80212d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80212d6:	4a31      	ldr	r2, [pc, #196]	; (802139c <HAL_GPIO_Init+0x324>)
 80212d8:	69bb      	ldr	r3, [r7, #24]
 80212da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80212dc:	4b2f      	ldr	r3, [pc, #188]	; (802139c <HAL_GPIO_Init+0x324>)
 80212de:	68db      	ldr	r3, [r3, #12]
 80212e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80212e2:	693b      	ldr	r3, [r7, #16]
 80212e4:	43db      	mvns	r3, r3
 80212e6:	69ba      	ldr	r2, [r7, #24]
 80212e8:	4013      	ands	r3, r2
 80212ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80212ec:	683b      	ldr	r3, [r7, #0]
 80212ee:	685b      	ldr	r3, [r3, #4]
 80212f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80212f4:	2b00      	cmp	r3, #0
 80212f6:	d003      	beq.n	8021300 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80212f8:	69ba      	ldr	r2, [r7, #24]
 80212fa:	693b      	ldr	r3, [r7, #16]
 80212fc:	4313      	orrs	r3, r2
 80212fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8021300:	4a26      	ldr	r2, [pc, #152]	; (802139c <HAL_GPIO_Init+0x324>)
 8021302:	69bb      	ldr	r3, [r7, #24]
 8021304:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8021306:	4b25      	ldr	r3, [pc, #148]	; (802139c <HAL_GPIO_Init+0x324>)
 8021308:	685b      	ldr	r3, [r3, #4]
 802130a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802130c:	693b      	ldr	r3, [r7, #16]
 802130e:	43db      	mvns	r3, r3
 8021310:	69ba      	ldr	r2, [r7, #24]
 8021312:	4013      	ands	r3, r2
 8021314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8021316:	683b      	ldr	r3, [r7, #0]
 8021318:	685b      	ldr	r3, [r3, #4]
 802131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802131e:	2b00      	cmp	r3, #0
 8021320:	d003      	beq.n	802132a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8021322:	69ba      	ldr	r2, [r7, #24]
 8021324:	693b      	ldr	r3, [r7, #16]
 8021326:	4313      	orrs	r3, r2
 8021328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 802132a:	4a1c      	ldr	r2, [pc, #112]	; (802139c <HAL_GPIO_Init+0x324>)
 802132c:	69bb      	ldr	r3, [r7, #24]
 802132e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8021330:	4b1a      	ldr	r3, [pc, #104]	; (802139c <HAL_GPIO_Init+0x324>)
 8021332:	681b      	ldr	r3, [r3, #0]
 8021334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8021336:	693b      	ldr	r3, [r7, #16]
 8021338:	43db      	mvns	r3, r3
 802133a:	69ba      	ldr	r2, [r7, #24]
 802133c:	4013      	ands	r3, r2
 802133e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8021340:	683b      	ldr	r3, [r7, #0]
 8021342:	685b      	ldr	r3, [r3, #4]
 8021344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8021348:	2b00      	cmp	r3, #0
 802134a:	d003      	beq.n	8021354 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 802134c:	69ba      	ldr	r2, [r7, #24]
 802134e:	693b      	ldr	r3, [r7, #16]
 8021350:	4313      	orrs	r3, r2
 8021352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8021354:	4a11      	ldr	r2, [pc, #68]	; (802139c <HAL_GPIO_Init+0x324>)
 8021356:	69bb      	ldr	r3, [r7, #24]
 8021358:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 802135a:	69fb      	ldr	r3, [r7, #28]
 802135c:	3301      	adds	r3, #1
 802135e:	61fb      	str	r3, [r7, #28]
 8021360:	69fb      	ldr	r3, [r7, #28]
 8021362:	2b0f      	cmp	r3, #15
 8021364:	f67f ae96 	bls.w	8021094 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8021368:	bf00      	nop
 802136a:	bf00      	nop
 802136c:	3724      	adds	r7, #36	; 0x24
 802136e:	46bd      	mov	sp, r7
 8021370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021374:	4770      	bx	lr
 8021376:	bf00      	nop
 8021378:	40023800 	.word	0x40023800
 802137c:	40013800 	.word	0x40013800
 8021380:	40020000 	.word	0x40020000
 8021384:	40020400 	.word	0x40020400
 8021388:	40020800 	.word	0x40020800
 802138c:	40020c00 	.word	0x40020c00
 8021390:	40021000 	.word	0x40021000
 8021394:	40021400 	.word	0x40021400
 8021398:	40021800 	.word	0x40021800
 802139c:	40013c00 	.word	0x40013c00

080213a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80213a0:	b480      	push	{r7}
 80213a2:	b083      	sub	sp, #12
 80213a4:	af00      	add	r7, sp, #0
 80213a6:	6078      	str	r0, [r7, #4]
 80213a8:	460b      	mov	r3, r1
 80213aa:	807b      	strh	r3, [r7, #2]
 80213ac:	4613      	mov	r3, r2
 80213ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80213b0:	787b      	ldrb	r3, [r7, #1]
 80213b2:	2b00      	cmp	r3, #0
 80213b4:	d003      	beq.n	80213be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80213b6:	887a      	ldrh	r2, [r7, #2]
 80213b8:	687b      	ldr	r3, [r7, #4]
 80213ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80213bc:	e003      	b.n	80213c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80213be:	887b      	ldrh	r3, [r7, #2]
 80213c0:	041a      	lsls	r2, r3, #16
 80213c2:	687b      	ldr	r3, [r7, #4]
 80213c4:	619a      	str	r2, [r3, #24]
}
 80213c6:	bf00      	nop
 80213c8:	370c      	adds	r7, #12
 80213ca:	46bd      	mov	sp, r7
 80213cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213d0:	4770      	bx	lr
	...

080213d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80213d4:	b580      	push	{r7, lr}
 80213d6:	b084      	sub	sp, #16
 80213d8:	af00      	add	r7, sp, #0
 80213da:	6078      	str	r0, [r7, #4]
 80213dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80213de:	687b      	ldr	r3, [r7, #4]
 80213e0:	2b00      	cmp	r3, #0
 80213e2:	d101      	bne.n	80213e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80213e4:	2301      	movs	r3, #1
 80213e6:	e0cc      	b.n	8021582 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80213e8:	4b68      	ldr	r3, [pc, #416]	; (802158c <HAL_RCC_ClockConfig+0x1b8>)
 80213ea:	681b      	ldr	r3, [r3, #0]
 80213ec:	f003 030f 	and.w	r3, r3, #15
 80213f0:	683a      	ldr	r2, [r7, #0]
 80213f2:	429a      	cmp	r2, r3
 80213f4:	d90c      	bls.n	8021410 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80213f6:	4b65      	ldr	r3, [pc, #404]	; (802158c <HAL_RCC_ClockConfig+0x1b8>)
 80213f8:	683a      	ldr	r2, [r7, #0]
 80213fa:	b2d2      	uxtb	r2, r2
 80213fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80213fe:	4b63      	ldr	r3, [pc, #396]	; (802158c <HAL_RCC_ClockConfig+0x1b8>)
 8021400:	681b      	ldr	r3, [r3, #0]
 8021402:	f003 030f 	and.w	r3, r3, #15
 8021406:	683a      	ldr	r2, [r7, #0]
 8021408:	429a      	cmp	r2, r3
 802140a:	d001      	beq.n	8021410 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 802140c:	2301      	movs	r3, #1
 802140e:	e0b8      	b.n	8021582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8021410:	687b      	ldr	r3, [r7, #4]
 8021412:	681b      	ldr	r3, [r3, #0]
 8021414:	f003 0302 	and.w	r3, r3, #2
 8021418:	2b00      	cmp	r3, #0
 802141a:	d020      	beq.n	802145e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802141c:	687b      	ldr	r3, [r7, #4]
 802141e:	681b      	ldr	r3, [r3, #0]
 8021420:	f003 0304 	and.w	r3, r3, #4
 8021424:	2b00      	cmp	r3, #0
 8021426:	d005      	beq.n	8021434 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8021428:	4b59      	ldr	r3, [pc, #356]	; (8021590 <HAL_RCC_ClockConfig+0x1bc>)
 802142a:	689b      	ldr	r3, [r3, #8]
 802142c:	4a58      	ldr	r2, [pc, #352]	; (8021590 <HAL_RCC_ClockConfig+0x1bc>)
 802142e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8021432:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8021434:	687b      	ldr	r3, [r7, #4]
 8021436:	681b      	ldr	r3, [r3, #0]
 8021438:	f003 0308 	and.w	r3, r3, #8
 802143c:	2b00      	cmp	r3, #0
 802143e:	d005      	beq.n	802144c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8021440:	4b53      	ldr	r3, [pc, #332]	; (8021590 <HAL_RCC_ClockConfig+0x1bc>)
 8021442:	689b      	ldr	r3, [r3, #8]
 8021444:	4a52      	ldr	r2, [pc, #328]	; (8021590 <HAL_RCC_ClockConfig+0x1bc>)
 8021446:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 802144a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802144c:	4b50      	ldr	r3, [pc, #320]	; (8021590 <HAL_RCC_ClockConfig+0x1bc>)
 802144e:	689b      	ldr	r3, [r3, #8]
 8021450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8021454:	687b      	ldr	r3, [r7, #4]
 8021456:	689b      	ldr	r3, [r3, #8]
 8021458:	494d      	ldr	r1, [pc, #308]	; (8021590 <HAL_RCC_ClockConfig+0x1bc>)
 802145a:	4313      	orrs	r3, r2
 802145c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802145e:	687b      	ldr	r3, [r7, #4]
 8021460:	681b      	ldr	r3, [r3, #0]
 8021462:	f003 0301 	and.w	r3, r3, #1
 8021466:	2b00      	cmp	r3, #0
 8021468:	d044      	beq.n	80214f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802146a:	687b      	ldr	r3, [r7, #4]
 802146c:	685b      	ldr	r3, [r3, #4]
 802146e:	2b01      	cmp	r3, #1
 8021470:	d107      	bne.n	8021482 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8021472:	4b47      	ldr	r3, [pc, #284]	; (8021590 <HAL_RCC_ClockConfig+0x1bc>)
 8021474:	681b      	ldr	r3, [r3, #0]
 8021476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802147a:	2b00      	cmp	r3, #0
 802147c:	d119      	bne.n	80214b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802147e:	2301      	movs	r3, #1
 8021480:	e07f      	b.n	8021582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8021482:	687b      	ldr	r3, [r7, #4]
 8021484:	685b      	ldr	r3, [r3, #4]
 8021486:	2b02      	cmp	r3, #2
 8021488:	d003      	beq.n	8021492 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 802148a:	687b      	ldr	r3, [r7, #4]
 802148c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802148e:	2b03      	cmp	r3, #3
 8021490:	d107      	bne.n	80214a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8021492:	4b3f      	ldr	r3, [pc, #252]	; (8021590 <HAL_RCC_ClockConfig+0x1bc>)
 8021494:	681b      	ldr	r3, [r3, #0]
 8021496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802149a:	2b00      	cmp	r3, #0
 802149c:	d109      	bne.n	80214b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802149e:	2301      	movs	r3, #1
 80214a0:	e06f      	b.n	8021582 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80214a2:	4b3b      	ldr	r3, [pc, #236]	; (8021590 <HAL_RCC_ClockConfig+0x1bc>)
 80214a4:	681b      	ldr	r3, [r3, #0]
 80214a6:	f003 0302 	and.w	r3, r3, #2
 80214aa:	2b00      	cmp	r3, #0
 80214ac:	d101      	bne.n	80214b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80214ae:	2301      	movs	r3, #1
 80214b0:	e067      	b.n	8021582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80214b2:	4b37      	ldr	r3, [pc, #220]	; (8021590 <HAL_RCC_ClockConfig+0x1bc>)
 80214b4:	689b      	ldr	r3, [r3, #8]
 80214b6:	f023 0203 	bic.w	r2, r3, #3
 80214ba:	687b      	ldr	r3, [r7, #4]
 80214bc:	685b      	ldr	r3, [r3, #4]
 80214be:	4934      	ldr	r1, [pc, #208]	; (8021590 <HAL_RCC_ClockConfig+0x1bc>)
 80214c0:	4313      	orrs	r3, r2
 80214c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80214c4:	f7ff fc28 	bl	8020d18 <HAL_GetTick>
 80214c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80214ca:	e00a      	b.n	80214e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80214cc:	f7ff fc24 	bl	8020d18 <HAL_GetTick>
 80214d0:	4602      	mov	r2, r0
 80214d2:	68fb      	ldr	r3, [r7, #12]
 80214d4:	1ad3      	subs	r3, r2, r3
 80214d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80214da:	4293      	cmp	r3, r2
 80214dc:	d901      	bls.n	80214e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80214de:	2303      	movs	r3, #3
 80214e0:	e04f      	b.n	8021582 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80214e2:	4b2b      	ldr	r3, [pc, #172]	; (8021590 <HAL_RCC_ClockConfig+0x1bc>)
 80214e4:	689b      	ldr	r3, [r3, #8]
 80214e6:	f003 020c 	and.w	r2, r3, #12
 80214ea:	687b      	ldr	r3, [r7, #4]
 80214ec:	685b      	ldr	r3, [r3, #4]
 80214ee:	009b      	lsls	r3, r3, #2
 80214f0:	429a      	cmp	r2, r3
 80214f2:	d1eb      	bne.n	80214cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80214f4:	4b25      	ldr	r3, [pc, #148]	; (802158c <HAL_RCC_ClockConfig+0x1b8>)
 80214f6:	681b      	ldr	r3, [r3, #0]
 80214f8:	f003 030f 	and.w	r3, r3, #15
 80214fc:	683a      	ldr	r2, [r7, #0]
 80214fe:	429a      	cmp	r2, r3
 8021500:	d20c      	bcs.n	802151c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8021502:	4b22      	ldr	r3, [pc, #136]	; (802158c <HAL_RCC_ClockConfig+0x1b8>)
 8021504:	683a      	ldr	r2, [r7, #0]
 8021506:	b2d2      	uxtb	r2, r2
 8021508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802150a:	4b20      	ldr	r3, [pc, #128]	; (802158c <HAL_RCC_ClockConfig+0x1b8>)
 802150c:	681b      	ldr	r3, [r3, #0]
 802150e:	f003 030f 	and.w	r3, r3, #15
 8021512:	683a      	ldr	r2, [r7, #0]
 8021514:	429a      	cmp	r2, r3
 8021516:	d001      	beq.n	802151c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8021518:	2301      	movs	r3, #1
 802151a:	e032      	b.n	8021582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802151c:	687b      	ldr	r3, [r7, #4]
 802151e:	681b      	ldr	r3, [r3, #0]
 8021520:	f003 0304 	and.w	r3, r3, #4
 8021524:	2b00      	cmp	r3, #0
 8021526:	d008      	beq.n	802153a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8021528:	4b19      	ldr	r3, [pc, #100]	; (8021590 <HAL_RCC_ClockConfig+0x1bc>)
 802152a:	689b      	ldr	r3, [r3, #8]
 802152c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8021530:	687b      	ldr	r3, [r7, #4]
 8021532:	68db      	ldr	r3, [r3, #12]
 8021534:	4916      	ldr	r1, [pc, #88]	; (8021590 <HAL_RCC_ClockConfig+0x1bc>)
 8021536:	4313      	orrs	r3, r2
 8021538:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802153a:	687b      	ldr	r3, [r7, #4]
 802153c:	681b      	ldr	r3, [r3, #0]
 802153e:	f003 0308 	and.w	r3, r3, #8
 8021542:	2b00      	cmp	r3, #0
 8021544:	d009      	beq.n	802155a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8021546:	4b12      	ldr	r3, [pc, #72]	; (8021590 <HAL_RCC_ClockConfig+0x1bc>)
 8021548:	689b      	ldr	r3, [r3, #8]
 802154a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 802154e:	687b      	ldr	r3, [r7, #4]
 8021550:	691b      	ldr	r3, [r3, #16]
 8021552:	00db      	lsls	r3, r3, #3
 8021554:	490e      	ldr	r1, [pc, #56]	; (8021590 <HAL_RCC_ClockConfig+0x1bc>)
 8021556:	4313      	orrs	r3, r2
 8021558:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 802155a:	f000 f855 	bl	8021608 <HAL_RCC_GetSysClockFreq>
 802155e:	4602      	mov	r2, r0
 8021560:	4b0b      	ldr	r3, [pc, #44]	; (8021590 <HAL_RCC_ClockConfig+0x1bc>)
 8021562:	689b      	ldr	r3, [r3, #8]
 8021564:	091b      	lsrs	r3, r3, #4
 8021566:	f003 030f 	and.w	r3, r3, #15
 802156a:	490a      	ldr	r1, [pc, #40]	; (8021594 <HAL_RCC_ClockConfig+0x1c0>)
 802156c:	5ccb      	ldrb	r3, [r1, r3]
 802156e:	fa22 f303 	lsr.w	r3, r2, r3
 8021572:	4a09      	ldr	r2, [pc, #36]	; (8021598 <HAL_RCC_ClockConfig+0x1c4>)
 8021574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8021576:	4b09      	ldr	r3, [pc, #36]	; (802159c <HAL_RCC_ClockConfig+0x1c8>)
 8021578:	681b      	ldr	r3, [r3, #0]
 802157a:	4618      	mov	r0, r3
 802157c:	f7ff fb88 	bl	8020c90 <HAL_InitTick>

  return HAL_OK;
 8021580:	2300      	movs	r3, #0
}
 8021582:	4618      	mov	r0, r3
 8021584:	3710      	adds	r7, #16
 8021586:	46bd      	mov	sp, r7
 8021588:	bd80      	pop	{r7, pc}
 802158a:	bf00      	nop
 802158c:	40023c00 	.word	0x40023c00
 8021590:	40023800 	.word	0x40023800
 8021594:	08022e80 	.word	0x08022e80
 8021598:	20000000 	.word	0x20000000
 802159c:	20000004 	.word	0x20000004

080215a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80215a0:	b480      	push	{r7}
 80215a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80215a4:	4b03      	ldr	r3, [pc, #12]	; (80215b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80215a6:	681b      	ldr	r3, [r3, #0]
}
 80215a8:	4618      	mov	r0, r3
 80215aa:	46bd      	mov	sp, r7
 80215ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215b0:	4770      	bx	lr
 80215b2:	bf00      	nop
 80215b4:	20000000 	.word	0x20000000

080215b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80215b8:	b580      	push	{r7, lr}
 80215ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80215bc:	f7ff fff0 	bl	80215a0 <HAL_RCC_GetHCLKFreq>
 80215c0:	4602      	mov	r2, r0
 80215c2:	4b05      	ldr	r3, [pc, #20]	; (80215d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80215c4:	689b      	ldr	r3, [r3, #8]
 80215c6:	0a9b      	lsrs	r3, r3, #10
 80215c8:	f003 0307 	and.w	r3, r3, #7
 80215cc:	4903      	ldr	r1, [pc, #12]	; (80215dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80215ce:	5ccb      	ldrb	r3, [r1, r3]
 80215d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80215d4:	4618      	mov	r0, r3
 80215d6:	bd80      	pop	{r7, pc}
 80215d8:	40023800 	.word	0x40023800
 80215dc:	08022e90 	.word	0x08022e90

080215e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80215e0:	b580      	push	{r7, lr}
 80215e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80215e4:	f7ff ffdc 	bl	80215a0 <HAL_RCC_GetHCLKFreq>
 80215e8:	4602      	mov	r2, r0
 80215ea:	4b05      	ldr	r3, [pc, #20]	; (8021600 <HAL_RCC_GetPCLK2Freq+0x20>)
 80215ec:	689b      	ldr	r3, [r3, #8]
 80215ee:	0b5b      	lsrs	r3, r3, #13
 80215f0:	f003 0307 	and.w	r3, r3, #7
 80215f4:	4903      	ldr	r1, [pc, #12]	; (8021604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80215f6:	5ccb      	ldrb	r3, [r1, r3]
 80215f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80215fc:	4618      	mov	r0, r3
 80215fe:	bd80      	pop	{r7, pc}
 8021600:	40023800 	.word	0x40023800
 8021604:	08022e90 	.word	0x08022e90

08021608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8021608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802160c:	b088      	sub	sp, #32
 802160e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8021610:	2300      	movs	r3, #0
 8021612:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8021614:	2300      	movs	r3, #0
 8021616:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8021618:	2300      	movs	r3, #0
 802161a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 802161c:	2300      	movs	r3, #0
 802161e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8021620:	2300      	movs	r3, #0
 8021622:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8021624:	4bce      	ldr	r3, [pc, #824]	; (8021960 <HAL_RCC_GetSysClockFreq+0x358>)
 8021626:	689b      	ldr	r3, [r3, #8]
 8021628:	f003 030c 	and.w	r3, r3, #12
 802162c:	2b0c      	cmp	r3, #12
 802162e:	f200 818d 	bhi.w	802194c <HAL_RCC_GetSysClockFreq+0x344>
 8021632:	a201      	add	r2, pc, #4	; (adr r2, 8021638 <HAL_RCC_GetSysClockFreq+0x30>)
 8021634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021638:	0802166d 	.word	0x0802166d
 802163c:	0802194d 	.word	0x0802194d
 8021640:	0802194d 	.word	0x0802194d
 8021644:	0802194d 	.word	0x0802194d
 8021648:	08021673 	.word	0x08021673
 802164c:	0802194d 	.word	0x0802194d
 8021650:	0802194d 	.word	0x0802194d
 8021654:	0802194d 	.word	0x0802194d
 8021658:	08021679 	.word	0x08021679
 802165c:	0802194d 	.word	0x0802194d
 8021660:	0802194d 	.word	0x0802194d
 8021664:	0802194d 	.word	0x0802194d
 8021668:	080217ed 	.word	0x080217ed
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 802166c:	4bbd      	ldr	r3, [pc, #756]	; (8021964 <HAL_RCC_GetSysClockFreq+0x35c>)
 802166e:	61bb      	str	r3, [r7, #24]
       break;
 8021670:	e16f      	b.n	8021952 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8021672:	4bbd      	ldr	r3, [pc, #756]	; (8021968 <HAL_RCC_GetSysClockFreq+0x360>)
 8021674:	61bb      	str	r3, [r7, #24]
      break;
 8021676:	e16c      	b.n	8021952 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8021678:	4bb9      	ldr	r3, [pc, #740]	; (8021960 <HAL_RCC_GetSysClockFreq+0x358>)
 802167a:	685b      	ldr	r3, [r3, #4]
 802167c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8021680:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8021682:	4bb7      	ldr	r3, [pc, #732]	; (8021960 <HAL_RCC_GetSysClockFreq+0x358>)
 8021684:	685b      	ldr	r3, [r3, #4]
 8021686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802168a:	2b00      	cmp	r3, #0
 802168c:	d053      	beq.n	8021736 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802168e:	4bb4      	ldr	r3, [pc, #720]	; (8021960 <HAL_RCC_GetSysClockFreq+0x358>)
 8021690:	685b      	ldr	r3, [r3, #4]
 8021692:	099b      	lsrs	r3, r3, #6
 8021694:	461a      	mov	r2, r3
 8021696:	f04f 0300 	mov.w	r3, #0
 802169a:	f240 10ff 	movw	r0, #511	; 0x1ff
 802169e:	f04f 0100 	mov.w	r1, #0
 80216a2:	ea02 0400 	and.w	r4, r2, r0
 80216a6:	603c      	str	r4, [r7, #0]
 80216a8:	400b      	ands	r3, r1
 80216aa:	607b      	str	r3, [r7, #4]
 80216ac:	e9d7 4500 	ldrd	r4, r5, [r7]
 80216b0:	4620      	mov	r0, r4
 80216b2:	4629      	mov	r1, r5
 80216b4:	f04f 0200 	mov.w	r2, #0
 80216b8:	f04f 0300 	mov.w	r3, #0
 80216bc:	014b      	lsls	r3, r1, #5
 80216be:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80216c2:	0142      	lsls	r2, r0, #5
 80216c4:	4610      	mov	r0, r2
 80216c6:	4619      	mov	r1, r3
 80216c8:	4623      	mov	r3, r4
 80216ca:	1ac0      	subs	r0, r0, r3
 80216cc:	462b      	mov	r3, r5
 80216ce:	eb61 0103 	sbc.w	r1, r1, r3
 80216d2:	f04f 0200 	mov.w	r2, #0
 80216d6:	f04f 0300 	mov.w	r3, #0
 80216da:	018b      	lsls	r3, r1, #6
 80216dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80216e0:	0182      	lsls	r2, r0, #6
 80216e2:	1a12      	subs	r2, r2, r0
 80216e4:	eb63 0301 	sbc.w	r3, r3, r1
 80216e8:	f04f 0000 	mov.w	r0, #0
 80216ec:	f04f 0100 	mov.w	r1, #0
 80216f0:	00d9      	lsls	r1, r3, #3
 80216f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80216f6:	00d0      	lsls	r0, r2, #3
 80216f8:	4602      	mov	r2, r0
 80216fa:	460b      	mov	r3, r1
 80216fc:	4621      	mov	r1, r4
 80216fe:	1852      	adds	r2, r2, r1
 8021700:	4629      	mov	r1, r5
 8021702:	eb43 0101 	adc.w	r1, r3, r1
 8021706:	460b      	mov	r3, r1
 8021708:	f04f 0000 	mov.w	r0, #0
 802170c:	f04f 0100 	mov.w	r1, #0
 8021710:	0259      	lsls	r1, r3, #9
 8021712:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8021716:	0250      	lsls	r0, r2, #9
 8021718:	4602      	mov	r2, r0
 802171a:	460b      	mov	r3, r1
 802171c:	4610      	mov	r0, r2
 802171e:	4619      	mov	r1, r3
 8021720:	697b      	ldr	r3, [r7, #20]
 8021722:	461a      	mov	r2, r3
 8021724:	f04f 0300 	mov.w	r3, #0
 8021728:	f7fe fd6c 	bl	8020204 <__aeabi_uldivmod>
 802172c:	4602      	mov	r2, r0
 802172e:	460b      	mov	r3, r1
 8021730:	4613      	mov	r3, r2
 8021732:	61fb      	str	r3, [r7, #28]
 8021734:	e04c      	b.n	80217d0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8021736:	4b8a      	ldr	r3, [pc, #552]	; (8021960 <HAL_RCC_GetSysClockFreq+0x358>)
 8021738:	685b      	ldr	r3, [r3, #4]
 802173a:	099b      	lsrs	r3, r3, #6
 802173c:	461a      	mov	r2, r3
 802173e:	f04f 0300 	mov.w	r3, #0
 8021742:	f240 10ff 	movw	r0, #511	; 0x1ff
 8021746:	f04f 0100 	mov.w	r1, #0
 802174a:	ea02 0a00 	and.w	sl, r2, r0
 802174e:	ea03 0b01 	and.w	fp, r3, r1
 8021752:	4650      	mov	r0, sl
 8021754:	4659      	mov	r1, fp
 8021756:	f04f 0200 	mov.w	r2, #0
 802175a:	f04f 0300 	mov.w	r3, #0
 802175e:	014b      	lsls	r3, r1, #5
 8021760:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8021764:	0142      	lsls	r2, r0, #5
 8021766:	4610      	mov	r0, r2
 8021768:	4619      	mov	r1, r3
 802176a:	ebb0 000a 	subs.w	r0, r0, sl
 802176e:	eb61 010b 	sbc.w	r1, r1, fp
 8021772:	f04f 0200 	mov.w	r2, #0
 8021776:	f04f 0300 	mov.w	r3, #0
 802177a:	018b      	lsls	r3, r1, #6
 802177c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8021780:	0182      	lsls	r2, r0, #6
 8021782:	1a12      	subs	r2, r2, r0
 8021784:	eb63 0301 	sbc.w	r3, r3, r1
 8021788:	f04f 0000 	mov.w	r0, #0
 802178c:	f04f 0100 	mov.w	r1, #0
 8021790:	00d9      	lsls	r1, r3, #3
 8021792:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8021796:	00d0      	lsls	r0, r2, #3
 8021798:	4602      	mov	r2, r0
 802179a:	460b      	mov	r3, r1
 802179c:	eb12 020a 	adds.w	r2, r2, sl
 80217a0:	eb43 030b 	adc.w	r3, r3, fp
 80217a4:	f04f 0000 	mov.w	r0, #0
 80217a8:	f04f 0100 	mov.w	r1, #0
 80217ac:	0299      	lsls	r1, r3, #10
 80217ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80217b2:	0290      	lsls	r0, r2, #10
 80217b4:	4602      	mov	r2, r0
 80217b6:	460b      	mov	r3, r1
 80217b8:	4610      	mov	r0, r2
 80217ba:	4619      	mov	r1, r3
 80217bc:	697b      	ldr	r3, [r7, #20]
 80217be:	461a      	mov	r2, r3
 80217c0:	f04f 0300 	mov.w	r3, #0
 80217c4:	f7fe fd1e 	bl	8020204 <__aeabi_uldivmod>
 80217c8:	4602      	mov	r2, r0
 80217ca:	460b      	mov	r3, r1
 80217cc:	4613      	mov	r3, r2
 80217ce:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80217d0:	4b63      	ldr	r3, [pc, #396]	; (8021960 <HAL_RCC_GetSysClockFreq+0x358>)
 80217d2:	685b      	ldr	r3, [r3, #4]
 80217d4:	0c1b      	lsrs	r3, r3, #16
 80217d6:	f003 0303 	and.w	r3, r3, #3
 80217da:	3301      	adds	r3, #1
 80217dc:	005b      	lsls	r3, r3, #1
 80217de:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80217e0:	69fa      	ldr	r2, [r7, #28]
 80217e2:	693b      	ldr	r3, [r7, #16]
 80217e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80217e8:	61bb      	str	r3, [r7, #24]
      break;
 80217ea:	e0b2      	b.n	8021952 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80217ec:	4b5c      	ldr	r3, [pc, #368]	; (8021960 <HAL_RCC_GetSysClockFreq+0x358>)
 80217ee:	685b      	ldr	r3, [r3, #4]
 80217f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80217f4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80217f6:	4b5a      	ldr	r3, [pc, #360]	; (8021960 <HAL_RCC_GetSysClockFreq+0x358>)
 80217f8:	685b      	ldr	r3, [r3, #4]
 80217fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80217fe:	2b00      	cmp	r3, #0
 8021800:	d04d      	beq.n	802189e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8021802:	4b57      	ldr	r3, [pc, #348]	; (8021960 <HAL_RCC_GetSysClockFreq+0x358>)
 8021804:	685b      	ldr	r3, [r3, #4]
 8021806:	099b      	lsrs	r3, r3, #6
 8021808:	461a      	mov	r2, r3
 802180a:	f04f 0300 	mov.w	r3, #0
 802180e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8021812:	f04f 0100 	mov.w	r1, #0
 8021816:	ea02 0800 	and.w	r8, r2, r0
 802181a:	ea03 0901 	and.w	r9, r3, r1
 802181e:	4640      	mov	r0, r8
 8021820:	4649      	mov	r1, r9
 8021822:	f04f 0200 	mov.w	r2, #0
 8021826:	f04f 0300 	mov.w	r3, #0
 802182a:	014b      	lsls	r3, r1, #5
 802182c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8021830:	0142      	lsls	r2, r0, #5
 8021832:	4610      	mov	r0, r2
 8021834:	4619      	mov	r1, r3
 8021836:	ebb0 0008 	subs.w	r0, r0, r8
 802183a:	eb61 0109 	sbc.w	r1, r1, r9
 802183e:	f04f 0200 	mov.w	r2, #0
 8021842:	f04f 0300 	mov.w	r3, #0
 8021846:	018b      	lsls	r3, r1, #6
 8021848:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 802184c:	0182      	lsls	r2, r0, #6
 802184e:	1a12      	subs	r2, r2, r0
 8021850:	eb63 0301 	sbc.w	r3, r3, r1
 8021854:	f04f 0000 	mov.w	r0, #0
 8021858:	f04f 0100 	mov.w	r1, #0
 802185c:	00d9      	lsls	r1, r3, #3
 802185e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8021862:	00d0      	lsls	r0, r2, #3
 8021864:	4602      	mov	r2, r0
 8021866:	460b      	mov	r3, r1
 8021868:	eb12 0208 	adds.w	r2, r2, r8
 802186c:	eb43 0309 	adc.w	r3, r3, r9
 8021870:	f04f 0000 	mov.w	r0, #0
 8021874:	f04f 0100 	mov.w	r1, #0
 8021878:	0259      	lsls	r1, r3, #9
 802187a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 802187e:	0250      	lsls	r0, r2, #9
 8021880:	4602      	mov	r2, r0
 8021882:	460b      	mov	r3, r1
 8021884:	4610      	mov	r0, r2
 8021886:	4619      	mov	r1, r3
 8021888:	697b      	ldr	r3, [r7, #20]
 802188a:	461a      	mov	r2, r3
 802188c:	f04f 0300 	mov.w	r3, #0
 8021890:	f7fe fcb8 	bl	8020204 <__aeabi_uldivmod>
 8021894:	4602      	mov	r2, r0
 8021896:	460b      	mov	r3, r1
 8021898:	4613      	mov	r3, r2
 802189a:	61fb      	str	r3, [r7, #28]
 802189c:	e04a      	b.n	8021934 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802189e:	4b30      	ldr	r3, [pc, #192]	; (8021960 <HAL_RCC_GetSysClockFreq+0x358>)
 80218a0:	685b      	ldr	r3, [r3, #4]
 80218a2:	099b      	lsrs	r3, r3, #6
 80218a4:	461a      	mov	r2, r3
 80218a6:	f04f 0300 	mov.w	r3, #0
 80218aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80218ae:	f04f 0100 	mov.w	r1, #0
 80218b2:	ea02 0400 	and.w	r4, r2, r0
 80218b6:	ea03 0501 	and.w	r5, r3, r1
 80218ba:	4620      	mov	r0, r4
 80218bc:	4629      	mov	r1, r5
 80218be:	f04f 0200 	mov.w	r2, #0
 80218c2:	f04f 0300 	mov.w	r3, #0
 80218c6:	014b      	lsls	r3, r1, #5
 80218c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80218cc:	0142      	lsls	r2, r0, #5
 80218ce:	4610      	mov	r0, r2
 80218d0:	4619      	mov	r1, r3
 80218d2:	1b00      	subs	r0, r0, r4
 80218d4:	eb61 0105 	sbc.w	r1, r1, r5
 80218d8:	f04f 0200 	mov.w	r2, #0
 80218dc:	f04f 0300 	mov.w	r3, #0
 80218e0:	018b      	lsls	r3, r1, #6
 80218e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80218e6:	0182      	lsls	r2, r0, #6
 80218e8:	1a12      	subs	r2, r2, r0
 80218ea:	eb63 0301 	sbc.w	r3, r3, r1
 80218ee:	f04f 0000 	mov.w	r0, #0
 80218f2:	f04f 0100 	mov.w	r1, #0
 80218f6:	00d9      	lsls	r1, r3, #3
 80218f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80218fc:	00d0      	lsls	r0, r2, #3
 80218fe:	4602      	mov	r2, r0
 8021900:	460b      	mov	r3, r1
 8021902:	1912      	adds	r2, r2, r4
 8021904:	eb45 0303 	adc.w	r3, r5, r3
 8021908:	f04f 0000 	mov.w	r0, #0
 802190c:	f04f 0100 	mov.w	r1, #0
 8021910:	0299      	lsls	r1, r3, #10
 8021912:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8021916:	0290      	lsls	r0, r2, #10
 8021918:	4602      	mov	r2, r0
 802191a:	460b      	mov	r3, r1
 802191c:	4610      	mov	r0, r2
 802191e:	4619      	mov	r1, r3
 8021920:	697b      	ldr	r3, [r7, #20]
 8021922:	461a      	mov	r2, r3
 8021924:	f04f 0300 	mov.w	r3, #0
 8021928:	f7fe fc6c 	bl	8020204 <__aeabi_uldivmod>
 802192c:	4602      	mov	r2, r0
 802192e:	460b      	mov	r3, r1
 8021930:	4613      	mov	r3, r2
 8021932:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8021934:	4b0a      	ldr	r3, [pc, #40]	; (8021960 <HAL_RCC_GetSysClockFreq+0x358>)
 8021936:	685b      	ldr	r3, [r3, #4]
 8021938:	0f1b      	lsrs	r3, r3, #28
 802193a:	f003 0307 	and.w	r3, r3, #7
 802193e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8021940:	69fa      	ldr	r2, [r7, #28]
 8021942:	68fb      	ldr	r3, [r7, #12]
 8021944:	fbb2 f3f3 	udiv	r3, r2, r3
 8021948:	61bb      	str	r3, [r7, #24]
      break;
 802194a:	e002      	b.n	8021952 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 802194c:	4b05      	ldr	r3, [pc, #20]	; (8021964 <HAL_RCC_GetSysClockFreq+0x35c>)
 802194e:	61bb      	str	r3, [r7, #24]
      break;
 8021950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8021952:	69bb      	ldr	r3, [r7, #24]
}
 8021954:	4618      	mov	r0, r3
 8021956:	3720      	adds	r7, #32
 8021958:	46bd      	mov	sp, r7
 802195a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802195e:	bf00      	nop
 8021960:	40023800 	.word	0x40023800
 8021964:	00f42400 	.word	0x00f42400
 8021968:	007a1200 	.word	0x007a1200

0802196c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 802196c:	b580      	push	{r7, lr}
 802196e:	b086      	sub	sp, #24
 8021970:	af00      	add	r7, sp, #0
 8021972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8021974:	687b      	ldr	r3, [r7, #4]
 8021976:	2b00      	cmp	r3, #0
 8021978:	d101      	bne.n	802197e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 802197a:	2301      	movs	r3, #1
 802197c:	e28d      	b.n	8021e9a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 802197e:	687b      	ldr	r3, [r7, #4]
 8021980:	681b      	ldr	r3, [r3, #0]
 8021982:	f003 0301 	and.w	r3, r3, #1
 8021986:	2b00      	cmp	r3, #0
 8021988:	f000 8083 	beq.w	8021a92 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 802198c:	4b94      	ldr	r3, [pc, #592]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 802198e:	689b      	ldr	r3, [r3, #8]
 8021990:	f003 030c 	and.w	r3, r3, #12
 8021994:	2b04      	cmp	r3, #4
 8021996:	d019      	beq.n	80219cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8021998:	4b91      	ldr	r3, [pc, #580]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 802199a:	689b      	ldr	r3, [r3, #8]
 802199c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80219a0:	2b08      	cmp	r3, #8
 80219a2:	d106      	bne.n	80219b2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80219a4:	4b8e      	ldr	r3, [pc, #568]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 80219a6:	685b      	ldr	r3, [r3, #4]
 80219a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80219ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80219b0:	d00c      	beq.n	80219cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80219b2:	4b8b      	ldr	r3, [pc, #556]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 80219b4:	689b      	ldr	r3, [r3, #8]
 80219b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80219ba:	2b0c      	cmp	r3, #12
 80219bc:	d112      	bne.n	80219e4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80219be:	4b88      	ldr	r3, [pc, #544]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 80219c0:	685b      	ldr	r3, [r3, #4]
 80219c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80219c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80219ca:	d10b      	bne.n	80219e4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80219cc:	4b84      	ldr	r3, [pc, #528]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 80219ce:	681b      	ldr	r3, [r3, #0]
 80219d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80219d4:	2b00      	cmp	r3, #0
 80219d6:	d05b      	beq.n	8021a90 <HAL_RCC_OscConfig+0x124>
 80219d8:	687b      	ldr	r3, [r7, #4]
 80219da:	685b      	ldr	r3, [r3, #4]
 80219dc:	2b00      	cmp	r3, #0
 80219de:	d157      	bne.n	8021a90 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80219e0:	2301      	movs	r3, #1
 80219e2:	e25a      	b.n	8021e9a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80219e4:	687b      	ldr	r3, [r7, #4]
 80219e6:	685b      	ldr	r3, [r3, #4]
 80219e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80219ec:	d106      	bne.n	80219fc <HAL_RCC_OscConfig+0x90>
 80219ee:	4b7c      	ldr	r3, [pc, #496]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 80219f0:	681b      	ldr	r3, [r3, #0]
 80219f2:	4a7b      	ldr	r2, [pc, #492]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 80219f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80219f8:	6013      	str	r3, [r2, #0]
 80219fa:	e01d      	b.n	8021a38 <HAL_RCC_OscConfig+0xcc>
 80219fc:	687b      	ldr	r3, [r7, #4]
 80219fe:	685b      	ldr	r3, [r3, #4]
 8021a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8021a04:	d10c      	bne.n	8021a20 <HAL_RCC_OscConfig+0xb4>
 8021a06:	4b76      	ldr	r3, [pc, #472]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 8021a08:	681b      	ldr	r3, [r3, #0]
 8021a0a:	4a75      	ldr	r2, [pc, #468]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 8021a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8021a10:	6013      	str	r3, [r2, #0]
 8021a12:	4b73      	ldr	r3, [pc, #460]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 8021a14:	681b      	ldr	r3, [r3, #0]
 8021a16:	4a72      	ldr	r2, [pc, #456]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 8021a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8021a1c:	6013      	str	r3, [r2, #0]
 8021a1e:	e00b      	b.n	8021a38 <HAL_RCC_OscConfig+0xcc>
 8021a20:	4b6f      	ldr	r3, [pc, #444]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 8021a22:	681b      	ldr	r3, [r3, #0]
 8021a24:	4a6e      	ldr	r2, [pc, #440]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 8021a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8021a2a:	6013      	str	r3, [r2, #0]
 8021a2c:	4b6c      	ldr	r3, [pc, #432]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 8021a2e:	681b      	ldr	r3, [r3, #0]
 8021a30:	4a6b      	ldr	r2, [pc, #428]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 8021a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8021a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8021a38:	687b      	ldr	r3, [r7, #4]
 8021a3a:	685b      	ldr	r3, [r3, #4]
 8021a3c:	2b00      	cmp	r3, #0
 8021a3e:	d013      	beq.n	8021a68 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021a40:	f7ff f96a 	bl	8020d18 <HAL_GetTick>
 8021a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8021a46:	e008      	b.n	8021a5a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8021a48:	f7ff f966 	bl	8020d18 <HAL_GetTick>
 8021a4c:	4602      	mov	r2, r0
 8021a4e:	693b      	ldr	r3, [r7, #16]
 8021a50:	1ad3      	subs	r3, r2, r3
 8021a52:	2b64      	cmp	r3, #100	; 0x64
 8021a54:	d901      	bls.n	8021a5a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8021a56:	2303      	movs	r3, #3
 8021a58:	e21f      	b.n	8021e9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8021a5a:	4b61      	ldr	r3, [pc, #388]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 8021a5c:	681b      	ldr	r3, [r3, #0]
 8021a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021a62:	2b00      	cmp	r3, #0
 8021a64:	d0f0      	beq.n	8021a48 <HAL_RCC_OscConfig+0xdc>
 8021a66:	e014      	b.n	8021a92 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021a68:	f7ff f956 	bl	8020d18 <HAL_GetTick>
 8021a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8021a6e:	e008      	b.n	8021a82 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8021a70:	f7ff f952 	bl	8020d18 <HAL_GetTick>
 8021a74:	4602      	mov	r2, r0
 8021a76:	693b      	ldr	r3, [r7, #16]
 8021a78:	1ad3      	subs	r3, r2, r3
 8021a7a:	2b64      	cmp	r3, #100	; 0x64
 8021a7c:	d901      	bls.n	8021a82 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8021a7e:	2303      	movs	r3, #3
 8021a80:	e20b      	b.n	8021e9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8021a82:	4b57      	ldr	r3, [pc, #348]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 8021a84:	681b      	ldr	r3, [r3, #0]
 8021a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021a8a:	2b00      	cmp	r3, #0
 8021a8c:	d1f0      	bne.n	8021a70 <HAL_RCC_OscConfig+0x104>
 8021a8e:	e000      	b.n	8021a92 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8021a92:	687b      	ldr	r3, [r7, #4]
 8021a94:	681b      	ldr	r3, [r3, #0]
 8021a96:	f003 0302 	and.w	r3, r3, #2
 8021a9a:	2b00      	cmp	r3, #0
 8021a9c:	d06f      	beq.n	8021b7e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8021a9e:	4b50      	ldr	r3, [pc, #320]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 8021aa0:	689b      	ldr	r3, [r3, #8]
 8021aa2:	f003 030c 	and.w	r3, r3, #12
 8021aa6:	2b00      	cmp	r3, #0
 8021aa8:	d017      	beq.n	8021ada <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8021aaa:	4b4d      	ldr	r3, [pc, #308]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 8021aac:	689b      	ldr	r3, [r3, #8]
 8021aae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8021ab2:	2b08      	cmp	r3, #8
 8021ab4:	d105      	bne.n	8021ac2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8021ab6:	4b4a      	ldr	r3, [pc, #296]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 8021ab8:	685b      	ldr	r3, [r3, #4]
 8021aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8021abe:	2b00      	cmp	r3, #0
 8021ac0:	d00b      	beq.n	8021ada <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8021ac2:	4b47      	ldr	r3, [pc, #284]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 8021ac4:	689b      	ldr	r3, [r3, #8]
 8021ac6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8021aca:	2b0c      	cmp	r3, #12
 8021acc:	d11c      	bne.n	8021b08 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8021ace:	4b44      	ldr	r3, [pc, #272]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 8021ad0:	685b      	ldr	r3, [r3, #4]
 8021ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8021ad6:	2b00      	cmp	r3, #0
 8021ad8:	d116      	bne.n	8021b08 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8021ada:	4b41      	ldr	r3, [pc, #260]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 8021adc:	681b      	ldr	r3, [r3, #0]
 8021ade:	f003 0302 	and.w	r3, r3, #2
 8021ae2:	2b00      	cmp	r3, #0
 8021ae4:	d005      	beq.n	8021af2 <HAL_RCC_OscConfig+0x186>
 8021ae6:	687b      	ldr	r3, [r7, #4]
 8021ae8:	68db      	ldr	r3, [r3, #12]
 8021aea:	2b01      	cmp	r3, #1
 8021aec:	d001      	beq.n	8021af2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8021aee:	2301      	movs	r3, #1
 8021af0:	e1d3      	b.n	8021e9a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021af2:	4b3b      	ldr	r3, [pc, #236]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 8021af4:	681b      	ldr	r3, [r3, #0]
 8021af6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8021afa:	687b      	ldr	r3, [r7, #4]
 8021afc:	691b      	ldr	r3, [r3, #16]
 8021afe:	00db      	lsls	r3, r3, #3
 8021b00:	4937      	ldr	r1, [pc, #220]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 8021b02:	4313      	orrs	r3, r2
 8021b04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8021b06:	e03a      	b.n	8021b7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8021b08:	687b      	ldr	r3, [r7, #4]
 8021b0a:	68db      	ldr	r3, [r3, #12]
 8021b0c:	2b00      	cmp	r3, #0
 8021b0e:	d020      	beq.n	8021b52 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8021b10:	4b34      	ldr	r3, [pc, #208]	; (8021be4 <HAL_RCC_OscConfig+0x278>)
 8021b12:	2201      	movs	r2, #1
 8021b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021b16:	f7ff f8ff 	bl	8020d18 <HAL_GetTick>
 8021b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8021b1c:	e008      	b.n	8021b30 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8021b1e:	f7ff f8fb 	bl	8020d18 <HAL_GetTick>
 8021b22:	4602      	mov	r2, r0
 8021b24:	693b      	ldr	r3, [r7, #16]
 8021b26:	1ad3      	subs	r3, r2, r3
 8021b28:	2b02      	cmp	r3, #2
 8021b2a:	d901      	bls.n	8021b30 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8021b2c:	2303      	movs	r3, #3
 8021b2e:	e1b4      	b.n	8021e9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8021b30:	4b2b      	ldr	r3, [pc, #172]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 8021b32:	681b      	ldr	r3, [r3, #0]
 8021b34:	f003 0302 	and.w	r3, r3, #2
 8021b38:	2b00      	cmp	r3, #0
 8021b3a:	d0f0      	beq.n	8021b1e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021b3c:	4b28      	ldr	r3, [pc, #160]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 8021b3e:	681b      	ldr	r3, [r3, #0]
 8021b40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8021b44:	687b      	ldr	r3, [r7, #4]
 8021b46:	691b      	ldr	r3, [r3, #16]
 8021b48:	00db      	lsls	r3, r3, #3
 8021b4a:	4925      	ldr	r1, [pc, #148]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 8021b4c:	4313      	orrs	r3, r2
 8021b4e:	600b      	str	r3, [r1, #0]
 8021b50:	e015      	b.n	8021b7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8021b52:	4b24      	ldr	r3, [pc, #144]	; (8021be4 <HAL_RCC_OscConfig+0x278>)
 8021b54:	2200      	movs	r2, #0
 8021b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021b58:	f7ff f8de 	bl	8020d18 <HAL_GetTick>
 8021b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8021b5e:	e008      	b.n	8021b72 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8021b60:	f7ff f8da 	bl	8020d18 <HAL_GetTick>
 8021b64:	4602      	mov	r2, r0
 8021b66:	693b      	ldr	r3, [r7, #16]
 8021b68:	1ad3      	subs	r3, r2, r3
 8021b6a:	2b02      	cmp	r3, #2
 8021b6c:	d901      	bls.n	8021b72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8021b6e:	2303      	movs	r3, #3
 8021b70:	e193      	b.n	8021e9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8021b72:	4b1b      	ldr	r3, [pc, #108]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 8021b74:	681b      	ldr	r3, [r3, #0]
 8021b76:	f003 0302 	and.w	r3, r3, #2
 8021b7a:	2b00      	cmp	r3, #0
 8021b7c:	d1f0      	bne.n	8021b60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8021b7e:	687b      	ldr	r3, [r7, #4]
 8021b80:	681b      	ldr	r3, [r3, #0]
 8021b82:	f003 0308 	and.w	r3, r3, #8
 8021b86:	2b00      	cmp	r3, #0
 8021b88:	d036      	beq.n	8021bf8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8021b8a:	687b      	ldr	r3, [r7, #4]
 8021b8c:	695b      	ldr	r3, [r3, #20]
 8021b8e:	2b00      	cmp	r3, #0
 8021b90:	d016      	beq.n	8021bc0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8021b92:	4b15      	ldr	r3, [pc, #84]	; (8021be8 <HAL_RCC_OscConfig+0x27c>)
 8021b94:	2201      	movs	r2, #1
 8021b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021b98:	f7ff f8be 	bl	8020d18 <HAL_GetTick>
 8021b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8021b9e:	e008      	b.n	8021bb2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8021ba0:	f7ff f8ba 	bl	8020d18 <HAL_GetTick>
 8021ba4:	4602      	mov	r2, r0
 8021ba6:	693b      	ldr	r3, [r7, #16]
 8021ba8:	1ad3      	subs	r3, r2, r3
 8021baa:	2b02      	cmp	r3, #2
 8021bac:	d901      	bls.n	8021bb2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8021bae:	2303      	movs	r3, #3
 8021bb0:	e173      	b.n	8021e9a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8021bb2:	4b0b      	ldr	r3, [pc, #44]	; (8021be0 <HAL_RCC_OscConfig+0x274>)
 8021bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8021bb6:	f003 0302 	and.w	r3, r3, #2
 8021bba:	2b00      	cmp	r3, #0
 8021bbc:	d0f0      	beq.n	8021ba0 <HAL_RCC_OscConfig+0x234>
 8021bbe:	e01b      	b.n	8021bf8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8021bc0:	4b09      	ldr	r3, [pc, #36]	; (8021be8 <HAL_RCC_OscConfig+0x27c>)
 8021bc2:	2200      	movs	r2, #0
 8021bc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021bc6:	f7ff f8a7 	bl	8020d18 <HAL_GetTick>
 8021bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8021bcc:	e00e      	b.n	8021bec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8021bce:	f7ff f8a3 	bl	8020d18 <HAL_GetTick>
 8021bd2:	4602      	mov	r2, r0
 8021bd4:	693b      	ldr	r3, [r7, #16]
 8021bd6:	1ad3      	subs	r3, r2, r3
 8021bd8:	2b02      	cmp	r3, #2
 8021bda:	d907      	bls.n	8021bec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8021bdc:	2303      	movs	r3, #3
 8021bde:	e15c      	b.n	8021e9a <HAL_RCC_OscConfig+0x52e>
 8021be0:	40023800 	.word	0x40023800
 8021be4:	42470000 	.word	0x42470000
 8021be8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8021bec:	4b8a      	ldr	r3, [pc, #552]	; (8021e18 <HAL_RCC_OscConfig+0x4ac>)
 8021bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8021bf0:	f003 0302 	and.w	r3, r3, #2
 8021bf4:	2b00      	cmp	r3, #0
 8021bf6:	d1ea      	bne.n	8021bce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8021bf8:	687b      	ldr	r3, [r7, #4]
 8021bfa:	681b      	ldr	r3, [r3, #0]
 8021bfc:	f003 0304 	and.w	r3, r3, #4
 8021c00:	2b00      	cmp	r3, #0
 8021c02:	f000 8097 	beq.w	8021d34 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8021c06:	2300      	movs	r3, #0
 8021c08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8021c0a:	4b83      	ldr	r3, [pc, #524]	; (8021e18 <HAL_RCC_OscConfig+0x4ac>)
 8021c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021c12:	2b00      	cmp	r3, #0
 8021c14:	d10f      	bne.n	8021c36 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8021c16:	2300      	movs	r3, #0
 8021c18:	60bb      	str	r3, [r7, #8]
 8021c1a:	4b7f      	ldr	r3, [pc, #508]	; (8021e18 <HAL_RCC_OscConfig+0x4ac>)
 8021c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c1e:	4a7e      	ldr	r2, [pc, #504]	; (8021e18 <HAL_RCC_OscConfig+0x4ac>)
 8021c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021c24:	6413      	str	r3, [r2, #64]	; 0x40
 8021c26:	4b7c      	ldr	r3, [pc, #496]	; (8021e18 <HAL_RCC_OscConfig+0x4ac>)
 8021c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021c2e:	60bb      	str	r3, [r7, #8]
 8021c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8021c32:	2301      	movs	r3, #1
 8021c34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8021c36:	4b79      	ldr	r3, [pc, #484]	; (8021e1c <HAL_RCC_OscConfig+0x4b0>)
 8021c38:	681b      	ldr	r3, [r3, #0]
 8021c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021c3e:	2b00      	cmp	r3, #0
 8021c40:	d118      	bne.n	8021c74 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8021c42:	4b76      	ldr	r3, [pc, #472]	; (8021e1c <HAL_RCC_OscConfig+0x4b0>)
 8021c44:	681b      	ldr	r3, [r3, #0]
 8021c46:	4a75      	ldr	r2, [pc, #468]	; (8021e1c <HAL_RCC_OscConfig+0x4b0>)
 8021c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8021c4e:	f7ff f863 	bl	8020d18 <HAL_GetTick>
 8021c52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8021c54:	e008      	b.n	8021c68 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8021c56:	f7ff f85f 	bl	8020d18 <HAL_GetTick>
 8021c5a:	4602      	mov	r2, r0
 8021c5c:	693b      	ldr	r3, [r7, #16]
 8021c5e:	1ad3      	subs	r3, r2, r3
 8021c60:	2b02      	cmp	r3, #2
 8021c62:	d901      	bls.n	8021c68 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8021c64:	2303      	movs	r3, #3
 8021c66:	e118      	b.n	8021e9a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8021c68:	4b6c      	ldr	r3, [pc, #432]	; (8021e1c <HAL_RCC_OscConfig+0x4b0>)
 8021c6a:	681b      	ldr	r3, [r3, #0]
 8021c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021c70:	2b00      	cmp	r3, #0
 8021c72:	d0f0      	beq.n	8021c56 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8021c74:	687b      	ldr	r3, [r7, #4]
 8021c76:	689b      	ldr	r3, [r3, #8]
 8021c78:	2b01      	cmp	r3, #1
 8021c7a:	d106      	bne.n	8021c8a <HAL_RCC_OscConfig+0x31e>
 8021c7c:	4b66      	ldr	r3, [pc, #408]	; (8021e18 <HAL_RCC_OscConfig+0x4ac>)
 8021c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021c80:	4a65      	ldr	r2, [pc, #404]	; (8021e18 <HAL_RCC_OscConfig+0x4ac>)
 8021c82:	f043 0301 	orr.w	r3, r3, #1
 8021c86:	6713      	str	r3, [r2, #112]	; 0x70
 8021c88:	e01c      	b.n	8021cc4 <HAL_RCC_OscConfig+0x358>
 8021c8a:	687b      	ldr	r3, [r7, #4]
 8021c8c:	689b      	ldr	r3, [r3, #8]
 8021c8e:	2b05      	cmp	r3, #5
 8021c90:	d10c      	bne.n	8021cac <HAL_RCC_OscConfig+0x340>
 8021c92:	4b61      	ldr	r3, [pc, #388]	; (8021e18 <HAL_RCC_OscConfig+0x4ac>)
 8021c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021c96:	4a60      	ldr	r2, [pc, #384]	; (8021e18 <HAL_RCC_OscConfig+0x4ac>)
 8021c98:	f043 0304 	orr.w	r3, r3, #4
 8021c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8021c9e:	4b5e      	ldr	r3, [pc, #376]	; (8021e18 <HAL_RCC_OscConfig+0x4ac>)
 8021ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021ca2:	4a5d      	ldr	r2, [pc, #372]	; (8021e18 <HAL_RCC_OscConfig+0x4ac>)
 8021ca4:	f043 0301 	orr.w	r3, r3, #1
 8021ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8021caa:	e00b      	b.n	8021cc4 <HAL_RCC_OscConfig+0x358>
 8021cac:	4b5a      	ldr	r3, [pc, #360]	; (8021e18 <HAL_RCC_OscConfig+0x4ac>)
 8021cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021cb0:	4a59      	ldr	r2, [pc, #356]	; (8021e18 <HAL_RCC_OscConfig+0x4ac>)
 8021cb2:	f023 0301 	bic.w	r3, r3, #1
 8021cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8021cb8:	4b57      	ldr	r3, [pc, #348]	; (8021e18 <HAL_RCC_OscConfig+0x4ac>)
 8021cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021cbc:	4a56      	ldr	r2, [pc, #344]	; (8021e18 <HAL_RCC_OscConfig+0x4ac>)
 8021cbe:	f023 0304 	bic.w	r3, r3, #4
 8021cc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8021cc4:	687b      	ldr	r3, [r7, #4]
 8021cc6:	689b      	ldr	r3, [r3, #8]
 8021cc8:	2b00      	cmp	r3, #0
 8021cca:	d015      	beq.n	8021cf8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021ccc:	f7ff f824 	bl	8020d18 <HAL_GetTick>
 8021cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8021cd2:	e00a      	b.n	8021cea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8021cd4:	f7ff f820 	bl	8020d18 <HAL_GetTick>
 8021cd8:	4602      	mov	r2, r0
 8021cda:	693b      	ldr	r3, [r7, #16]
 8021cdc:	1ad3      	subs	r3, r2, r3
 8021cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8021ce2:	4293      	cmp	r3, r2
 8021ce4:	d901      	bls.n	8021cea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8021ce6:	2303      	movs	r3, #3
 8021ce8:	e0d7      	b.n	8021e9a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8021cea:	4b4b      	ldr	r3, [pc, #300]	; (8021e18 <HAL_RCC_OscConfig+0x4ac>)
 8021cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021cee:	f003 0302 	and.w	r3, r3, #2
 8021cf2:	2b00      	cmp	r3, #0
 8021cf4:	d0ee      	beq.n	8021cd4 <HAL_RCC_OscConfig+0x368>
 8021cf6:	e014      	b.n	8021d22 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021cf8:	f7ff f80e 	bl	8020d18 <HAL_GetTick>
 8021cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8021cfe:	e00a      	b.n	8021d16 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8021d00:	f7ff f80a 	bl	8020d18 <HAL_GetTick>
 8021d04:	4602      	mov	r2, r0
 8021d06:	693b      	ldr	r3, [r7, #16]
 8021d08:	1ad3      	subs	r3, r2, r3
 8021d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8021d0e:	4293      	cmp	r3, r2
 8021d10:	d901      	bls.n	8021d16 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8021d12:	2303      	movs	r3, #3
 8021d14:	e0c1      	b.n	8021e9a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8021d16:	4b40      	ldr	r3, [pc, #256]	; (8021e18 <HAL_RCC_OscConfig+0x4ac>)
 8021d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021d1a:	f003 0302 	and.w	r3, r3, #2
 8021d1e:	2b00      	cmp	r3, #0
 8021d20:	d1ee      	bne.n	8021d00 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8021d22:	7dfb      	ldrb	r3, [r7, #23]
 8021d24:	2b01      	cmp	r3, #1
 8021d26:	d105      	bne.n	8021d34 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8021d28:	4b3b      	ldr	r3, [pc, #236]	; (8021e18 <HAL_RCC_OscConfig+0x4ac>)
 8021d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021d2c:	4a3a      	ldr	r2, [pc, #232]	; (8021e18 <HAL_RCC_OscConfig+0x4ac>)
 8021d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8021d32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8021d34:	687b      	ldr	r3, [r7, #4]
 8021d36:	699b      	ldr	r3, [r3, #24]
 8021d38:	2b00      	cmp	r3, #0
 8021d3a:	f000 80ad 	beq.w	8021e98 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8021d3e:	4b36      	ldr	r3, [pc, #216]	; (8021e18 <HAL_RCC_OscConfig+0x4ac>)
 8021d40:	689b      	ldr	r3, [r3, #8]
 8021d42:	f003 030c 	and.w	r3, r3, #12
 8021d46:	2b08      	cmp	r3, #8
 8021d48:	d060      	beq.n	8021e0c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8021d4a:	687b      	ldr	r3, [r7, #4]
 8021d4c:	699b      	ldr	r3, [r3, #24]
 8021d4e:	2b02      	cmp	r3, #2
 8021d50:	d145      	bne.n	8021dde <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8021d52:	4b33      	ldr	r3, [pc, #204]	; (8021e20 <HAL_RCC_OscConfig+0x4b4>)
 8021d54:	2200      	movs	r2, #0
 8021d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021d58:	f7fe ffde 	bl	8020d18 <HAL_GetTick>
 8021d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8021d5e:	e008      	b.n	8021d72 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8021d60:	f7fe ffda 	bl	8020d18 <HAL_GetTick>
 8021d64:	4602      	mov	r2, r0
 8021d66:	693b      	ldr	r3, [r7, #16]
 8021d68:	1ad3      	subs	r3, r2, r3
 8021d6a:	2b02      	cmp	r3, #2
 8021d6c:	d901      	bls.n	8021d72 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8021d6e:	2303      	movs	r3, #3
 8021d70:	e093      	b.n	8021e9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8021d72:	4b29      	ldr	r3, [pc, #164]	; (8021e18 <HAL_RCC_OscConfig+0x4ac>)
 8021d74:	681b      	ldr	r3, [r3, #0]
 8021d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021d7a:	2b00      	cmp	r3, #0
 8021d7c:	d1f0      	bne.n	8021d60 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8021d7e:	687b      	ldr	r3, [r7, #4]
 8021d80:	69da      	ldr	r2, [r3, #28]
 8021d82:	687b      	ldr	r3, [r7, #4]
 8021d84:	6a1b      	ldr	r3, [r3, #32]
 8021d86:	431a      	orrs	r2, r3
 8021d88:	687b      	ldr	r3, [r7, #4]
 8021d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021d8c:	019b      	lsls	r3, r3, #6
 8021d8e:	431a      	orrs	r2, r3
 8021d90:	687b      	ldr	r3, [r7, #4]
 8021d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021d94:	085b      	lsrs	r3, r3, #1
 8021d96:	3b01      	subs	r3, #1
 8021d98:	041b      	lsls	r3, r3, #16
 8021d9a:	431a      	orrs	r2, r3
 8021d9c:	687b      	ldr	r3, [r7, #4]
 8021d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021da0:	061b      	lsls	r3, r3, #24
 8021da2:	431a      	orrs	r2, r3
 8021da4:	687b      	ldr	r3, [r7, #4]
 8021da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021da8:	071b      	lsls	r3, r3, #28
 8021daa:	491b      	ldr	r1, [pc, #108]	; (8021e18 <HAL_RCC_OscConfig+0x4ac>)
 8021dac:	4313      	orrs	r3, r2
 8021dae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8021db0:	4b1b      	ldr	r3, [pc, #108]	; (8021e20 <HAL_RCC_OscConfig+0x4b4>)
 8021db2:	2201      	movs	r2, #1
 8021db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021db6:	f7fe ffaf 	bl	8020d18 <HAL_GetTick>
 8021dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8021dbc:	e008      	b.n	8021dd0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8021dbe:	f7fe ffab 	bl	8020d18 <HAL_GetTick>
 8021dc2:	4602      	mov	r2, r0
 8021dc4:	693b      	ldr	r3, [r7, #16]
 8021dc6:	1ad3      	subs	r3, r2, r3
 8021dc8:	2b02      	cmp	r3, #2
 8021dca:	d901      	bls.n	8021dd0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8021dcc:	2303      	movs	r3, #3
 8021dce:	e064      	b.n	8021e9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8021dd0:	4b11      	ldr	r3, [pc, #68]	; (8021e18 <HAL_RCC_OscConfig+0x4ac>)
 8021dd2:	681b      	ldr	r3, [r3, #0]
 8021dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021dd8:	2b00      	cmp	r3, #0
 8021dda:	d0f0      	beq.n	8021dbe <HAL_RCC_OscConfig+0x452>
 8021ddc:	e05c      	b.n	8021e98 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8021dde:	4b10      	ldr	r3, [pc, #64]	; (8021e20 <HAL_RCC_OscConfig+0x4b4>)
 8021de0:	2200      	movs	r2, #0
 8021de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021de4:	f7fe ff98 	bl	8020d18 <HAL_GetTick>
 8021de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8021dea:	e008      	b.n	8021dfe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8021dec:	f7fe ff94 	bl	8020d18 <HAL_GetTick>
 8021df0:	4602      	mov	r2, r0
 8021df2:	693b      	ldr	r3, [r7, #16]
 8021df4:	1ad3      	subs	r3, r2, r3
 8021df6:	2b02      	cmp	r3, #2
 8021df8:	d901      	bls.n	8021dfe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8021dfa:	2303      	movs	r3, #3
 8021dfc:	e04d      	b.n	8021e9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8021dfe:	4b06      	ldr	r3, [pc, #24]	; (8021e18 <HAL_RCC_OscConfig+0x4ac>)
 8021e00:	681b      	ldr	r3, [r3, #0]
 8021e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021e06:	2b00      	cmp	r3, #0
 8021e08:	d1f0      	bne.n	8021dec <HAL_RCC_OscConfig+0x480>
 8021e0a:	e045      	b.n	8021e98 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8021e0c:	687b      	ldr	r3, [r7, #4]
 8021e0e:	699b      	ldr	r3, [r3, #24]
 8021e10:	2b01      	cmp	r3, #1
 8021e12:	d107      	bne.n	8021e24 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8021e14:	2301      	movs	r3, #1
 8021e16:	e040      	b.n	8021e9a <HAL_RCC_OscConfig+0x52e>
 8021e18:	40023800 	.word	0x40023800
 8021e1c:	40007000 	.word	0x40007000
 8021e20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8021e24:	4b1f      	ldr	r3, [pc, #124]	; (8021ea4 <HAL_RCC_OscConfig+0x538>)
 8021e26:	685b      	ldr	r3, [r3, #4]
 8021e28:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8021e2a:	687b      	ldr	r3, [r7, #4]
 8021e2c:	699b      	ldr	r3, [r3, #24]
 8021e2e:	2b01      	cmp	r3, #1
 8021e30:	d030      	beq.n	8021e94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8021e32:	68fb      	ldr	r3, [r7, #12]
 8021e34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8021e38:	687b      	ldr	r3, [r7, #4]
 8021e3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8021e3c:	429a      	cmp	r2, r3
 8021e3e:	d129      	bne.n	8021e94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8021e40:	68fb      	ldr	r3, [r7, #12]
 8021e42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8021e46:	687b      	ldr	r3, [r7, #4]
 8021e48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8021e4a:	429a      	cmp	r2, r3
 8021e4c:	d122      	bne.n	8021e94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8021e4e:	68fa      	ldr	r2, [r7, #12]
 8021e50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8021e54:	4013      	ands	r3, r2
 8021e56:	687a      	ldr	r2, [r7, #4]
 8021e58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8021e5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8021e5c:	4293      	cmp	r3, r2
 8021e5e:	d119      	bne.n	8021e94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8021e60:	68fb      	ldr	r3, [r7, #12]
 8021e62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8021e66:	687b      	ldr	r3, [r7, #4]
 8021e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021e6a:	085b      	lsrs	r3, r3, #1
 8021e6c:	3b01      	subs	r3, #1
 8021e6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8021e70:	429a      	cmp	r2, r3
 8021e72:	d10f      	bne.n	8021e94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8021e74:	68fb      	ldr	r3, [r7, #12]
 8021e76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8021e7a:	687b      	ldr	r3, [r7, #4]
 8021e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021e7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8021e80:	429a      	cmp	r2, r3
 8021e82:	d107      	bne.n	8021e94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8021e84:	68fb      	ldr	r3, [r7, #12]
 8021e86:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8021e8a:	687b      	ldr	r3, [r7, #4]
 8021e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021e8e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8021e90:	429a      	cmp	r2, r3
 8021e92:	d001      	beq.n	8021e98 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8021e94:	2301      	movs	r3, #1
 8021e96:	e000      	b.n	8021e9a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8021e98:	2300      	movs	r3, #0
}
 8021e9a:	4618      	mov	r0, r3
 8021e9c:	3718      	adds	r7, #24
 8021e9e:	46bd      	mov	sp, r7
 8021ea0:	bd80      	pop	{r7, pc}
 8021ea2:	bf00      	nop
 8021ea4:	40023800 	.word	0x40023800

08021ea8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8021ea8:	b580      	push	{r7, lr}
 8021eaa:	b082      	sub	sp, #8
 8021eac:	af00      	add	r7, sp, #0
 8021eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8021eb0:	687b      	ldr	r3, [r7, #4]
 8021eb2:	2b00      	cmp	r3, #0
 8021eb4:	d101      	bne.n	8021eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8021eb6:	2301      	movs	r3, #1
 8021eb8:	e03f      	b.n	8021f3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8021eba:	687b      	ldr	r3, [r7, #4]
 8021ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8021ec0:	b2db      	uxtb	r3, r3
 8021ec2:	2b00      	cmp	r3, #0
 8021ec4:	d106      	bne.n	8021ed4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8021ec6:	687b      	ldr	r3, [r7, #4]
 8021ec8:	2200      	movs	r2, #0
 8021eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8021ece:	6878      	ldr	r0, [r7, #4]
 8021ed0:	f7fe fdbe 	bl	8020a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8021ed4:	687b      	ldr	r3, [r7, #4]
 8021ed6:	2224      	movs	r2, #36	; 0x24
 8021ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8021edc:	687b      	ldr	r3, [r7, #4]
 8021ede:	681b      	ldr	r3, [r3, #0]
 8021ee0:	68da      	ldr	r2, [r3, #12]
 8021ee2:	687b      	ldr	r3, [r7, #4]
 8021ee4:	681b      	ldr	r3, [r3, #0]
 8021ee6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8021eea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8021eec:	6878      	ldr	r0, [r7, #4]
 8021eee:	f000 fd8b 	bl	8022a08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8021ef2:	687b      	ldr	r3, [r7, #4]
 8021ef4:	681b      	ldr	r3, [r3, #0]
 8021ef6:	691a      	ldr	r2, [r3, #16]
 8021ef8:	687b      	ldr	r3, [r7, #4]
 8021efa:	681b      	ldr	r3, [r3, #0]
 8021efc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8021f00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8021f02:	687b      	ldr	r3, [r7, #4]
 8021f04:	681b      	ldr	r3, [r3, #0]
 8021f06:	695a      	ldr	r2, [r3, #20]
 8021f08:	687b      	ldr	r3, [r7, #4]
 8021f0a:	681b      	ldr	r3, [r3, #0]
 8021f0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8021f10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8021f12:	687b      	ldr	r3, [r7, #4]
 8021f14:	681b      	ldr	r3, [r3, #0]
 8021f16:	68da      	ldr	r2, [r3, #12]
 8021f18:	687b      	ldr	r3, [r7, #4]
 8021f1a:	681b      	ldr	r3, [r3, #0]
 8021f1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8021f20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021f22:	687b      	ldr	r3, [r7, #4]
 8021f24:	2200      	movs	r2, #0
 8021f26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8021f28:	687b      	ldr	r3, [r7, #4]
 8021f2a:	2220      	movs	r2, #32
 8021f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8021f30:	687b      	ldr	r3, [r7, #4]
 8021f32:	2220      	movs	r2, #32
 8021f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8021f38:	2300      	movs	r3, #0
}
 8021f3a:	4618      	mov	r0, r3
 8021f3c:	3708      	adds	r7, #8
 8021f3e:	46bd      	mov	sp, r7
 8021f40:	bd80      	pop	{r7, pc}

08021f42 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8021f42:	b580      	push	{r7, lr}
 8021f44:	b08a      	sub	sp, #40	; 0x28
 8021f46:	af02      	add	r7, sp, #8
 8021f48:	60f8      	str	r0, [r7, #12]
 8021f4a:	60b9      	str	r1, [r7, #8]
 8021f4c:	603b      	str	r3, [r7, #0]
 8021f4e:	4613      	mov	r3, r2
 8021f50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8021f52:	2300      	movs	r3, #0
 8021f54:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8021f56:	68fb      	ldr	r3, [r7, #12]
 8021f58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8021f5c:	b2db      	uxtb	r3, r3
 8021f5e:	2b20      	cmp	r3, #32
 8021f60:	f040 808c 	bne.w	802207c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8021f64:	68bb      	ldr	r3, [r7, #8]
 8021f66:	2b00      	cmp	r3, #0
 8021f68:	d002      	beq.n	8021f70 <HAL_UART_Receive+0x2e>
 8021f6a:	88fb      	ldrh	r3, [r7, #6]
 8021f6c:	2b00      	cmp	r3, #0
 8021f6e:	d101      	bne.n	8021f74 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8021f70:	2301      	movs	r3, #1
 8021f72:	e084      	b.n	802207e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8021f74:	68fb      	ldr	r3, [r7, #12]
 8021f76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8021f7a:	2b01      	cmp	r3, #1
 8021f7c:	d101      	bne.n	8021f82 <HAL_UART_Receive+0x40>
 8021f7e:	2302      	movs	r3, #2
 8021f80:	e07d      	b.n	802207e <HAL_UART_Receive+0x13c>
 8021f82:	68fb      	ldr	r3, [r7, #12]
 8021f84:	2201      	movs	r2, #1
 8021f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021f8a:	68fb      	ldr	r3, [r7, #12]
 8021f8c:	2200      	movs	r2, #0
 8021f8e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8021f90:	68fb      	ldr	r3, [r7, #12]
 8021f92:	2222      	movs	r2, #34	; 0x22
 8021f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021f98:	68fb      	ldr	r3, [r7, #12]
 8021f9a:	2200      	movs	r2, #0
 8021f9c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8021f9e:	f7fe febb 	bl	8020d18 <HAL_GetTick>
 8021fa2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8021fa4:	68fb      	ldr	r3, [r7, #12]
 8021fa6:	88fa      	ldrh	r2, [r7, #6]
 8021fa8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8021faa:	68fb      	ldr	r3, [r7, #12]
 8021fac:	88fa      	ldrh	r2, [r7, #6]
 8021fae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8021fb0:	68fb      	ldr	r3, [r7, #12]
 8021fb2:	689b      	ldr	r3, [r3, #8]
 8021fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021fb8:	d108      	bne.n	8021fcc <HAL_UART_Receive+0x8a>
 8021fba:	68fb      	ldr	r3, [r7, #12]
 8021fbc:	691b      	ldr	r3, [r3, #16]
 8021fbe:	2b00      	cmp	r3, #0
 8021fc0:	d104      	bne.n	8021fcc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8021fc2:	2300      	movs	r3, #0
 8021fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8021fc6:	68bb      	ldr	r3, [r7, #8]
 8021fc8:	61bb      	str	r3, [r7, #24]
 8021fca:	e003      	b.n	8021fd4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8021fcc:	68bb      	ldr	r3, [r7, #8]
 8021fce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8021fd0:	2300      	movs	r3, #0
 8021fd2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8021fd4:	68fb      	ldr	r3, [r7, #12]
 8021fd6:	2200      	movs	r2, #0
 8021fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8021fdc:	e043      	b.n	8022066 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8021fde:	683b      	ldr	r3, [r7, #0]
 8021fe0:	9300      	str	r3, [sp, #0]
 8021fe2:	697b      	ldr	r3, [r7, #20]
 8021fe4:	2200      	movs	r2, #0
 8021fe6:	2120      	movs	r1, #32
 8021fe8:	68f8      	ldr	r0, [r7, #12]
 8021fea:	f000 fb05 	bl	80225f8 <UART_WaitOnFlagUntilTimeout>
 8021fee:	4603      	mov	r3, r0
 8021ff0:	2b00      	cmp	r3, #0
 8021ff2:	d001      	beq.n	8021ff8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8021ff4:	2303      	movs	r3, #3
 8021ff6:	e042      	b.n	802207e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8021ff8:	69fb      	ldr	r3, [r7, #28]
 8021ffa:	2b00      	cmp	r3, #0
 8021ffc:	d10c      	bne.n	8022018 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8021ffe:	68fb      	ldr	r3, [r7, #12]
 8022000:	681b      	ldr	r3, [r3, #0]
 8022002:	685b      	ldr	r3, [r3, #4]
 8022004:	b29b      	uxth	r3, r3
 8022006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802200a:	b29a      	uxth	r2, r3
 802200c:	69bb      	ldr	r3, [r7, #24]
 802200e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8022010:	69bb      	ldr	r3, [r7, #24]
 8022012:	3302      	adds	r3, #2
 8022014:	61bb      	str	r3, [r7, #24]
 8022016:	e01f      	b.n	8022058 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8022018:	68fb      	ldr	r3, [r7, #12]
 802201a:	689b      	ldr	r3, [r3, #8]
 802201c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022020:	d007      	beq.n	8022032 <HAL_UART_Receive+0xf0>
 8022022:	68fb      	ldr	r3, [r7, #12]
 8022024:	689b      	ldr	r3, [r3, #8]
 8022026:	2b00      	cmp	r3, #0
 8022028:	d10a      	bne.n	8022040 <HAL_UART_Receive+0xfe>
 802202a:	68fb      	ldr	r3, [r7, #12]
 802202c:	691b      	ldr	r3, [r3, #16]
 802202e:	2b00      	cmp	r3, #0
 8022030:	d106      	bne.n	8022040 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8022032:	68fb      	ldr	r3, [r7, #12]
 8022034:	681b      	ldr	r3, [r3, #0]
 8022036:	685b      	ldr	r3, [r3, #4]
 8022038:	b2da      	uxtb	r2, r3
 802203a:	69fb      	ldr	r3, [r7, #28]
 802203c:	701a      	strb	r2, [r3, #0]
 802203e:	e008      	b.n	8022052 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8022040:	68fb      	ldr	r3, [r7, #12]
 8022042:	681b      	ldr	r3, [r3, #0]
 8022044:	685b      	ldr	r3, [r3, #4]
 8022046:	b2db      	uxtb	r3, r3
 8022048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802204c:	b2da      	uxtb	r2, r3
 802204e:	69fb      	ldr	r3, [r7, #28]
 8022050:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8022052:	69fb      	ldr	r3, [r7, #28]
 8022054:	3301      	adds	r3, #1
 8022056:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8022058:	68fb      	ldr	r3, [r7, #12]
 802205a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802205c:	b29b      	uxth	r3, r3
 802205e:	3b01      	subs	r3, #1
 8022060:	b29a      	uxth	r2, r3
 8022062:	68fb      	ldr	r3, [r7, #12]
 8022064:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8022066:	68fb      	ldr	r3, [r7, #12]
 8022068:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802206a:	b29b      	uxth	r3, r3
 802206c:	2b00      	cmp	r3, #0
 802206e:	d1b6      	bne.n	8021fde <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8022070:	68fb      	ldr	r3, [r7, #12]
 8022072:	2220      	movs	r2, #32
 8022074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8022078:	2300      	movs	r3, #0
 802207a:	e000      	b.n	802207e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 802207c:	2302      	movs	r3, #2
  }
}
 802207e:	4618      	mov	r0, r3
 8022080:	3720      	adds	r7, #32
 8022082:	46bd      	mov	sp, r7
 8022084:	bd80      	pop	{r7, pc}
	...

08022088 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8022088:	b580      	push	{r7, lr}
 802208a:	b0ba      	sub	sp, #232	; 0xe8
 802208c:	af00      	add	r7, sp, #0
 802208e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8022090:	687b      	ldr	r3, [r7, #4]
 8022092:	681b      	ldr	r3, [r3, #0]
 8022094:	681b      	ldr	r3, [r3, #0]
 8022096:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 802209a:	687b      	ldr	r3, [r7, #4]
 802209c:	681b      	ldr	r3, [r3, #0]
 802209e:	68db      	ldr	r3, [r3, #12]
 80220a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80220a4:	687b      	ldr	r3, [r7, #4]
 80220a6:	681b      	ldr	r3, [r3, #0]
 80220a8:	695b      	ldr	r3, [r3, #20]
 80220aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80220ae:	2300      	movs	r3, #0
 80220b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80220b4:	2300      	movs	r3, #0
 80220b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80220ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80220be:	f003 030f 	and.w	r3, r3, #15
 80220c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80220c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80220ca:	2b00      	cmp	r3, #0
 80220cc:	d10f      	bne.n	80220ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80220ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80220d2:	f003 0320 	and.w	r3, r3, #32
 80220d6:	2b00      	cmp	r3, #0
 80220d8:	d009      	beq.n	80220ee <HAL_UART_IRQHandler+0x66>
 80220da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80220de:	f003 0320 	and.w	r3, r3, #32
 80220e2:	2b00      	cmp	r3, #0
 80220e4:	d003      	beq.n	80220ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80220e6:	6878      	ldr	r0, [r7, #4]
 80220e8:	f000 fbd3 	bl	8022892 <UART_Receive_IT>
      return;
 80220ec:	e256      	b.n	802259c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80220ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80220f2:	2b00      	cmp	r3, #0
 80220f4:	f000 80de 	beq.w	80222b4 <HAL_UART_IRQHandler+0x22c>
 80220f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80220fc:	f003 0301 	and.w	r3, r3, #1
 8022100:	2b00      	cmp	r3, #0
 8022102:	d106      	bne.n	8022112 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8022104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8022108:	f403 7390 	and.w	r3, r3, #288	; 0x120
 802210c:	2b00      	cmp	r3, #0
 802210e:	f000 80d1 	beq.w	80222b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8022112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8022116:	f003 0301 	and.w	r3, r3, #1
 802211a:	2b00      	cmp	r3, #0
 802211c:	d00b      	beq.n	8022136 <HAL_UART_IRQHandler+0xae>
 802211e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8022122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022126:	2b00      	cmp	r3, #0
 8022128:	d005      	beq.n	8022136 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 802212a:	687b      	ldr	r3, [r7, #4]
 802212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802212e:	f043 0201 	orr.w	r2, r3, #1
 8022132:	687b      	ldr	r3, [r7, #4]
 8022134:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8022136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802213a:	f003 0304 	and.w	r3, r3, #4
 802213e:	2b00      	cmp	r3, #0
 8022140:	d00b      	beq.n	802215a <HAL_UART_IRQHandler+0xd2>
 8022142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8022146:	f003 0301 	and.w	r3, r3, #1
 802214a:	2b00      	cmp	r3, #0
 802214c:	d005      	beq.n	802215a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 802214e:	687b      	ldr	r3, [r7, #4]
 8022150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022152:	f043 0202 	orr.w	r2, r3, #2
 8022156:	687b      	ldr	r3, [r7, #4]
 8022158:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802215a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802215e:	f003 0302 	and.w	r3, r3, #2
 8022162:	2b00      	cmp	r3, #0
 8022164:	d00b      	beq.n	802217e <HAL_UART_IRQHandler+0xf6>
 8022166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802216a:	f003 0301 	and.w	r3, r3, #1
 802216e:	2b00      	cmp	r3, #0
 8022170:	d005      	beq.n	802217e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8022172:	687b      	ldr	r3, [r7, #4]
 8022174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022176:	f043 0204 	orr.w	r2, r3, #4
 802217a:	687b      	ldr	r3, [r7, #4]
 802217c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 802217e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8022182:	f003 0308 	and.w	r3, r3, #8
 8022186:	2b00      	cmp	r3, #0
 8022188:	d011      	beq.n	80221ae <HAL_UART_IRQHandler+0x126>
 802218a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802218e:	f003 0320 	and.w	r3, r3, #32
 8022192:	2b00      	cmp	r3, #0
 8022194:	d105      	bne.n	80221a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8022196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802219a:	f003 0301 	and.w	r3, r3, #1
 802219e:	2b00      	cmp	r3, #0
 80221a0:	d005      	beq.n	80221ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80221a2:	687b      	ldr	r3, [r7, #4]
 80221a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80221a6:	f043 0208 	orr.w	r2, r3, #8
 80221aa:	687b      	ldr	r3, [r7, #4]
 80221ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80221ae:	687b      	ldr	r3, [r7, #4]
 80221b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80221b2:	2b00      	cmp	r3, #0
 80221b4:	f000 81ed 	beq.w	8022592 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80221b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80221bc:	f003 0320 	and.w	r3, r3, #32
 80221c0:	2b00      	cmp	r3, #0
 80221c2:	d008      	beq.n	80221d6 <HAL_UART_IRQHandler+0x14e>
 80221c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80221c8:	f003 0320 	and.w	r3, r3, #32
 80221cc:	2b00      	cmp	r3, #0
 80221ce:	d002      	beq.n	80221d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80221d0:	6878      	ldr	r0, [r7, #4]
 80221d2:	f000 fb5e 	bl	8022892 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80221d6:	687b      	ldr	r3, [r7, #4]
 80221d8:	681b      	ldr	r3, [r3, #0]
 80221da:	695b      	ldr	r3, [r3, #20]
 80221dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80221e0:	2b40      	cmp	r3, #64	; 0x40
 80221e2:	bf0c      	ite	eq
 80221e4:	2301      	moveq	r3, #1
 80221e6:	2300      	movne	r3, #0
 80221e8:	b2db      	uxtb	r3, r3
 80221ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80221ee:	687b      	ldr	r3, [r7, #4]
 80221f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80221f2:	f003 0308 	and.w	r3, r3, #8
 80221f6:	2b00      	cmp	r3, #0
 80221f8:	d103      	bne.n	8022202 <HAL_UART_IRQHandler+0x17a>
 80221fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80221fe:	2b00      	cmp	r3, #0
 8022200:	d04f      	beq.n	80222a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8022202:	6878      	ldr	r0, [r7, #4]
 8022204:	f000 fa66 	bl	80226d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8022208:	687b      	ldr	r3, [r7, #4]
 802220a:	681b      	ldr	r3, [r3, #0]
 802220c:	695b      	ldr	r3, [r3, #20]
 802220e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022212:	2b40      	cmp	r3, #64	; 0x40
 8022214:	d141      	bne.n	802229a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8022216:	687b      	ldr	r3, [r7, #4]
 8022218:	681b      	ldr	r3, [r3, #0]
 802221a:	3314      	adds	r3, #20
 802221c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022220:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8022224:	e853 3f00 	ldrex	r3, [r3]
 8022228:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 802222c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8022230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8022234:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8022238:	687b      	ldr	r3, [r7, #4]
 802223a:	681b      	ldr	r3, [r3, #0]
 802223c:	3314      	adds	r3, #20
 802223e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8022242:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8022246:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802224a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 802224e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8022252:	e841 2300 	strex	r3, r2, [r1]
 8022256:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 802225a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 802225e:	2b00      	cmp	r3, #0
 8022260:	d1d9      	bne.n	8022216 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8022262:	687b      	ldr	r3, [r7, #4]
 8022264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022266:	2b00      	cmp	r3, #0
 8022268:	d013      	beq.n	8022292 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 802226a:	687b      	ldr	r3, [r7, #4]
 802226c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802226e:	4a7d      	ldr	r2, [pc, #500]	; (8022464 <HAL_UART_IRQHandler+0x3dc>)
 8022270:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8022272:	687b      	ldr	r3, [r7, #4]
 8022274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022276:	4618      	mov	r0, r3
 8022278:	f7fe fedb 	bl	8021032 <HAL_DMA_Abort_IT>
 802227c:	4603      	mov	r3, r0
 802227e:	2b00      	cmp	r3, #0
 8022280:	d016      	beq.n	80222b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8022282:	687b      	ldr	r3, [r7, #4]
 8022284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022288:	687a      	ldr	r2, [r7, #4]
 802228a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 802228c:	4610      	mov	r0, r2
 802228e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8022290:	e00e      	b.n	80222b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8022292:	6878      	ldr	r0, [r7, #4]
 8022294:	f000 f99a 	bl	80225cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8022298:	e00a      	b.n	80222b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 802229a:	6878      	ldr	r0, [r7, #4]
 802229c:	f000 f996 	bl	80225cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80222a0:	e006      	b.n	80222b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80222a2:	6878      	ldr	r0, [r7, #4]
 80222a4:	f000 f992 	bl	80225cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80222a8:	687b      	ldr	r3, [r7, #4]
 80222aa:	2200      	movs	r2, #0
 80222ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80222ae:	e170      	b.n	8022592 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80222b0:	bf00      	nop
    return;
 80222b2:	e16e      	b.n	8022592 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80222b4:	687b      	ldr	r3, [r7, #4]
 80222b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80222b8:	2b01      	cmp	r3, #1
 80222ba:	f040 814a 	bne.w	8022552 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80222be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80222c2:	f003 0310 	and.w	r3, r3, #16
 80222c6:	2b00      	cmp	r3, #0
 80222c8:	f000 8143 	beq.w	8022552 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80222cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80222d0:	f003 0310 	and.w	r3, r3, #16
 80222d4:	2b00      	cmp	r3, #0
 80222d6:	f000 813c 	beq.w	8022552 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80222da:	2300      	movs	r3, #0
 80222dc:	60bb      	str	r3, [r7, #8]
 80222de:	687b      	ldr	r3, [r7, #4]
 80222e0:	681b      	ldr	r3, [r3, #0]
 80222e2:	681b      	ldr	r3, [r3, #0]
 80222e4:	60bb      	str	r3, [r7, #8]
 80222e6:	687b      	ldr	r3, [r7, #4]
 80222e8:	681b      	ldr	r3, [r3, #0]
 80222ea:	685b      	ldr	r3, [r3, #4]
 80222ec:	60bb      	str	r3, [r7, #8]
 80222ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80222f0:	687b      	ldr	r3, [r7, #4]
 80222f2:	681b      	ldr	r3, [r3, #0]
 80222f4:	695b      	ldr	r3, [r3, #20]
 80222f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80222fa:	2b40      	cmp	r3, #64	; 0x40
 80222fc:	f040 80b4 	bne.w	8022468 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8022300:	687b      	ldr	r3, [r7, #4]
 8022302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022304:	681b      	ldr	r3, [r3, #0]
 8022306:	685b      	ldr	r3, [r3, #4]
 8022308:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 802230c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8022310:	2b00      	cmp	r3, #0
 8022312:	f000 8140 	beq.w	8022596 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8022316:	687b      	ldr	r3, [r7, #4]
 8022318:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 802231a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 802231e:	429a      	cmp	r2, r3
 8022320:	f080 8139 	bcs.w	8022596 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8022324:	687b      	ldr	r3, [r7, #4]
 8022326:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 802232a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 802232c:	687b      	ldr	r3, [r7, #4]
 802232e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022330:	69db      	ldr	r3, [r3, #28]
 8022332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8022336:	f000 8088 	beq.w	802244a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802233a:	687b      	ldr	r3, [r7, #4]
 802233c:	681b      	ldr	r3, [r3, #0]
 802233e:	330c      	adds	r3, #12
 8022340:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022344:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8022348:	e853 3f00 	ldrex	r3, [r3]
 802234c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8022350:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8022354:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8022358:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 802235c:	687b      	ldr	r3, [r7, #4]
 802235e:	681b      	ldr	r3, [r3, #0]
 8022360:	330c      	adds	r3, #12
 8022362:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8022366:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 802236a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802236e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8022372:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8022376:	e841 2300 	strex	r3, r2, [r1]
 802237a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 802237e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8022382:	2b00      	cmp	r3, #0
 8022384:	d1d9      	bne.n	802233a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8022386:	687b      	ldr	r3, [r7, #4]
 8022388:	681b      	ldr	r3, [r3, #0]
 802238a:	3314      	adds	r3, #20
 802238c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802238e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8022390:	e853 3f00 	ldrex	r3, [r3]
 8022394:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8022396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8022398:	f023 0301 	bic.w	r3, r3, #1
 802239c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80223a0:	687b      	ldr	r3, [r7, #4]
 80223a2:	681b      	ldr	r3, [r3, #0]
 80223a4:	3314      	adds	r3, #20
 80223a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80223aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80223ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80223b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80223b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80223b6:	e841 2300 	strex	r3, r2, [r1]
 80223ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80223bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80223be:	2b00      	cmp	r3, #0
 80223c0:	d1e1      	bne.n	8022386 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80223c2:	687b      	ldr	r3, [r7, #4]
 80223c4:	681b      	ldr	r3, [r3, #0]
 80223c6:	3314      	adds	r3, #20
 80223c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80223ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80223cc:	e853 3f00 	ldrex	r3, [r3]
 80223d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80223d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80223d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80223d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80223dc:	687b      	ldr	r3, [r7, #4]
 80223de:	681b      	ldr	r3, [r3, #0]
 80223e0:	3314      	adds	r3, #20
 80223e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80223e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80223e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80223ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80223ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80223ee:	e841 2300 	strex	r3, r2, [r1]
 80223f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80223f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80223f6:	2b00      	cmp	r3, #0
 80223f8:	d1e3      	bne.n	80223c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80223fa:	687b      	ldr	r3, [r7, #4]
 80223fc:	2220      	movs	r2, #32
 80223fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022402:	687b      	ldr	r3, [r7, #4]
 8022404:	2200      	movs	r2, #0
 8022406:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8022408:	687b      	ldr	r3, [r7, #4]
 802240a:	681b      	ldr	r3, [r3, #0]
 802240c:	330c      	adds	r3, #12
 802240e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022412:	e853 3f00 	ldrex	r3, [r3]
 8022416:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8022418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802241a:	f023 0310 	bic.w	r3, r3, #16
 802241e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8022422:	687b      	ldr	r3, [r7, #4]
 8022424:	681b      	ldr	r3, [r3, #0]
 8022426:	330c      	adds	r3, #12
 8022428:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 802242c:	65ba      	str	r2, [r7, #88]	; 0x58
 802242e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022430:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8022432:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8022434:	e841 2300 	strex	r3, r2, [r1]
 8022438:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 802243a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802243c:	2b00      	cmp	r3, #0
 802243e:	d1e3      	bne.n	8022408 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8022440:	687b      	ldr	r3, [r7, #4]
 8022442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022444:	4618      	mov	r0, r3
 8022446:	f7fe fd84 	bl	8020f52 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 802244a:	687b      	ldr	r3, [r7, #4]
 802244c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 802244e:	687b      	ldr	r3, [r7, #4]
 8022450:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8022452:	b29b      	uxth	r3, r3
 8022454:	1ad3      	subs	r3, r2, r3
 8022456:	b29b      	uxth	r3, r3
 8022458:	4619      	mov	r1, r3
 802245a:	6878      	ldr	r0, [r7, #4]
 802245c:	f000 f8c0 	bl	80225e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8022460:	e099      	b.n	8022596 <HAL_UART_IRQHandler+0x50e>
 8022462:	bf00      	nop
 8022464:	0802279b 	.word	0x0802279b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8022468:	687b      	ldr	r3, [r7, #4]
 802246a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 802246c:	687b      	ldr	r3, [r7, #4]
 802246e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8022470:	b29b      	uxth	r3, r3
 8022472:	1ad3      	subs	r3, r2, r3
 8022474:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8022478:	687b      	ldr	r3, [r7, #4]
 802247a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802247c:	b29b      	uxth	r3, r3
 802247e:	2b00      	cmp	r3, #0
 8022480:	f000 808b 	beq.w	802259a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8022484:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8022488:	2b00      	cmp	r3, #0
 802248a:	f000 8086 	beq.w	802259a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802248e:	687b      	ldr	r3, [r7, #4]
 8022490:	681b      	ldr	r3, [r3, #0]
 8022492:	330c      	adds	r3, #12
 8022494:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022498:	e853 3f00 	ldrex	r3, [r3]
 802249c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 802249e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80224a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80224a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80224a8:	687b      	ldr	r3, [r7, #4]
 80224aa:	681b      	ldr	r3, [r3, #0]
 80224ac:	330c      	adds	r3, #12
 80224ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80224b2:	647a      	str	r2, [r7, #68]	; 0x44
 80224b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80224b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80224b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80224ba:	e841 2300 	strex	r3, r2, [r1]
 80224be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80224c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80224c2:	2b00      	cmp	r3, #0
 80224c4:	d1e3      	bne.n	802248e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80224c6:	687b      	ldr	r3, [r7, #4]
 80224c8:	681b      	ldr	r3, [r3, #0]
 80224ca:	3314      	adds	r3, #20
 80224cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80224ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80224d0:	e853 3f00 	ldrex	r3, [r3]
 80224d4:	623b      	str	r3, [r7, #32]
   return(result);
 80224d6:	6a3b      	ldr	r3, [r7, #32]
 80224d8:	f023 0301 	bic.w	r3, r3, #1
 80224dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80224e0:	687b      	ldr	r3, [r7, #4]
 80224e2:	681b      	ldr	r3, [r3, #0]
 80224e4:	3314      	adds	r3, #20
 80224e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80224ea:	633a      	str	r2, [r7, #48]	; 0x30
 80224ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80224ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80224f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80224f2:	e841 2300 	strex	r3, r2, [r1]
 80224f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80224f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80224fa:	2b00      	cmp	r3, #0
 80224fc:	d1e3      	bne.n	80224c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80224fe:	687b      	ldr	r3, [r7, #4]
 8022500:	2220      	movs	r2, #32
 8022502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022506:	687b      	ldr	r3, [r7, #4]
 8022508:	2200      	movs	r2, #0
 802250a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802250c:	687b      	ldr	r3, [r7, #4]
 802250e:	681b      	ldr	r3, [r3, #0]
 8022510:	330c      	adds	r3, #12
 8022512:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022514:	693b      	ldr	r3, [r7, #16]
 8022516:	e853 3f00 	ldrex	r3, [r3]
 802251a:	60fb      	str	r3, [r7, #12]
   return(result);
 802251c:	68fb      	ldr	r3, [r7, #12]
 802251e:	f023 0310 	bic.w	r3, r3, #16
 8022522:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8022526:	687b      	ldr	r3, [r7, #4]
 8022528:	681b      	ldr	r3, [r3, #0]
 802252a:	330c      	adds	r3, #12
 802252c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8022530:	61fa      	str	r2, [r7, #28]
 8022532:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022534:	69b9      	ldr	r1, [r7, #24]
 8022536:	69fa      	ldr	r2, [r7, #28]
 8022538:	e841 2300 	strex	r3, r2, [r1]
 802253c:	617b      	str	r3, [r7, #20]
   return(result);
 802253e:	697b      	ldr	r3, [r7, #20]
 8022540:	2b00      	cmp	r3, #0
 8022542:	d1e3      	bne.n	802250c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8022544:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8022548:	4619      	mov	r1, r3
 802254a:	6878      	ldr	r0, [r7, #4]
 802254c:	f000 f848 	bl	80225e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8022550:	e023      	b.n	802259a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8022552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8022556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802255a:	2b00      	cmp	r3, #0
 802255c:	d009      	beq.n	8022572 <HAL_UART_IRQHandler+0x4ea>
 802255e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8022562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022566:	2b00      	cmp	r3, #0
 8022568:	d003      	beq.n	8022572 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 802256a:	6878      	ldr	r0, [r7, #4]
 802256c:	f000 f929 	bl	80227c2 <UART_Transmit_IT>
    return;
 8022570:	e014      	b.n	802259c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8022572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8022576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802257a:	2b00      	cmp	r3, #0
 802257c:	d00e      	beq.n	802259c <HAL_UART_IRQHandler+0x514>
 802257e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8022582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022586:	2b00      	cmp	r3, #0
 8022588:	d008      	beq.n	802259c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 802258a:	6878      	ldr	r0, [r7, #4]
 802258c:	f000 f969 	bl	8022862 <UART_EndTransmit_IT>
    return;
 8022590:	e004      	b.n	802259c <HAL_UART_IRQHandler+0x514>
    return;
 8022592:	bf00      	nop
 8022594:	e002      	b.n	802259c <HAL_UART_IRQHandler+0x514>
      return;
 8022596:	bf00      	nop
 8022598:	e000      	b.n	802259c <HAL_UART_IRQHandler+0x514>
      return;
 802259a:	bf00      	nop
  }
}
 802259c:	37e8      	adds	r7, #232	; 0xe8
 802259e:	46bd      	mov	sp, r7
 80225a0:	bd80      	pop	{r7, pc}
 80225a2:	bf00      	nop

080225a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80225a4:	b480      	push	{r7}
 80225a6:	b083      	sub	sp, #12
 80225a8:	af00      	add	r7, sp, #0
 80225aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80225ac:	bf00      	nop
 80225ae:	370c      	adds	r7, #12
 80225b0:	46bd      	mov	sp, r7
 80225b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225b6:	4770      	bx	lr

080225b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80225b8:	b480      	push	{r7}
 80225ba:	b083      	sub	sp, #12
 80225bc:	af00      	add	r7, sp, #0
 80225be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80225c0:	bf00      	nop
 80225c2:	370c      	adds	r7, #12
 80225c4:	46bd      	mov	sp, r7
 80225c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225ca:	4770      	bx	lr

080225cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80225cc:	b480      	push	{r7}
 80225ce:	b083      	sub	sp, #12
 80225d0:	af00      	add	r7, sp, #0
 80225d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80225d4:	bf00      	nop
 80225d6:	370c      	adds	r7, #12
 80225d8:	46bd      	mov	sp, r7
 80225da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225de:	4770      	bx	lr

080225e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80225e0:	b480      	push	{r7}
 80225e2:	b083      	sub	sp, #12
 80225e4:	af00      	add	r7, sp, #0
 80225e6:	6078      	str	r0, [r7, #4]
 80225e8:	460b      	mov	r3, r1
 80225ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80225ec:	bf00      	nop
 80225ee:	370c      	adds	r7, #12
 80225f0:	46bd      	mov	sp, r7
 80225f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225f6:	4770      	bx	lr

080225f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80225f8:	b580      	push	{r7, lr}
 80225fa:	b090      	sub	sp, #64	; 0x40
 80225fc:	af00      	add	r7, sp, #0
 80225fe:	60f8      	str	r0, [r7, #12]
 8022600:	60b9      	str	r1, [r7, #8]
 8022602:	603b      	str	r3, [r7, #0]
 8022604:	4613      	mov	r3, r2
 8022606:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8022608:	e050      	b.n	80226ac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802260a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802260c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022610:	d04c      	beq.n	80226ac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8022612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8022614:	2b00      	cmp	r3, #0
 8022616:	d007      	beq.n	8022628 <UART_WaitOnFlagUntilTimeout+0x30>
 8022618:	f7fe fb7e 	bl	8020d18 <HAL_GetTick>
 802261c:	4602      	mov	r2, r0
 802261e:	683b      	ldr	r3, [r7, #0]
 8022620:	1ad3      	subs	r3, r2, r3
 8022622:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8022624:	429a      	cmp	r2, r3
 8022626:	d241      	bcs.n	80226ac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8022628:	68fb      	ldr	r3, [r7, #12]
 802262a:	681b      	ldr	r3, [r3, #0]
 802262c:	330c      	adds	r3, #12
 802262e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022632:	e853 3f00 	ldrex	r3, [r3]
 8022636:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8022638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802263a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 802263e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022640:	68fb      	ldr	r3, [r7, #12]
 8022642:	681b      	ldr	r3, [r3, #0]
 8022644:	330c      	adds	r3, #12
 8022646:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8022648:	637a      	str	r2, [r7, #52]	; 0x34
 802264a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802264c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802264e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8022650:	e841 2300 	strex	r3, r2, [r1]
 8022654:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8022656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022658:	2b00      	cmp	r3, #0
 802265a:	d1e5      	bne.n	8022628 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802265c:	68fb      	ldr	r3, [r7, #12]
 802265e:	681b      	ldr	r3, [r3, #0]
 8022660:	3314      	adds	r3, #20
 8022662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022664:	697b      	ldr	r3, [r7, #20]
 8022666:	e853 3f00 	ldrex	r3, [r3]
 802266a:	613b      	str	r3, [r7, #16]
   return(result);
 802266c:	693b      	ldr	r3, [r7, #16]
 802266e:	f023 0301 	bic.w	r3, r3, #1
 8022672:	63bb      	str	r3, [r7, #56]	; 0x38
 8022674:	68fb      	ldr	r3, [r7, #12]
 8022676:	681b      	ldr	r3, [r3, #0]
 8022678:	3314      	adds	r3, #20
 802267a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802267c:	623a      	str	r2, [r7, #32]
 802267e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022680:	69f9      	ldr	r1, [r7, #28]
 8022682:	6a3a      	ldr	r2, [r7, #32]
 8022684:	e841 2300 	strex	r3, r2, [r1]
 8022688:	61bb      	str	r3, [r7, #24]
   return(result);
 802268a:	69bb      	ldr	r3, [r7, #24]
 802268c:	2b00      	cmp	r3, #0
 802268e:	d1e5      	bne.n	802265c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8022690:	68fb      	ldr	r3, [r7, #12]
 8022692:	2220      	movs	r2, #32
 8022694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8022698:	68fb      	ldr	r3, [r7, #12]
 802269a:	2220      	movs	r2, #32
 802269c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80226a0:	68fb      	ldr	r3, [r7, #12]
 80226a2:	2200      	movs	r2, #0
 80226a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80226a8:	2303      	movs	r3, #3
 80226aa:	e00f      	b.n	80226cc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80226ac:	68fb      	ldr	r3, [r7, #12]
 80226ae:	681b      	ldr	r3, [r3, #0]
 80226b0:	681a      	ldr	r2, [r3, #0]
 80226b2:	68bb      	ldr	r3, [r7, #8]
 80226b4:	4013      	ands	r3, r2
 80226b6:	68ba      	ldr	r2, [r7, #8]
 80226b8:	429a      	cmp	r2, r3
 80226ba:	bf0c      	ite	eq
 80226bc:	2301      	moveq	r3, #1
 80226be:	2300      	movne	r3, #0
 80226c0:	b2db      	uxtb	r3, r3
 80226c2:	461a      	mov	r2, r3
 80226c4:	79fb      	ldrb	r3, [r7, #7]
 80226c6:	429a      	cmp	r2, r3
 80226c8:	d09f      	beq.n	802260a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80226ca:	2300      	movs	r3, #0
}
 80226cc:	4618      	mov	r0, r3
 80226ce:	3740      	adds	r7, #64	; 0x40
 80226d0:	46bd      	mov	sp, r7
 80226d2:	bd80      	pop	{r7, pc}

080226d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80226d4:	b480      	push	{r7}
 80226d6:	b095      	sub	sp, #84	; 0x54
 80226d8:	af00      	add	r7, sp, #0
 80226da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80226dc:	687b      	ldr	r3, [r7, #4]
 80226de:	681b      	ldr	r3, [r3, #0]
 80226e0:	330c      	adds	r3, #12
 80226e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80226e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80226e6:	e853 3f00 	ldrex	r3, [r3]
 80226ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80226ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80226ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80226f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80226f4:	687b      	ldr	r3, [r7, #4]
 80226f6:	681b      	ldr	r3, [r3, #0]
 80226f8:	330c      	adds	r3, #12
 80226fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80226fc:	643a      	str	r2, [r7, #64]	; 0x40
 80226fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022700:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8022702:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8022704:	e841 2300 	strex	r3, r2, [r1]
 8022708:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802270a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802270c:	2b00      	cmp	r3, #0
 802270e:	d1e5      	bne.n	80226dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8022710:	687b      	ldr	r3, [r7, #4]
 8022712:	681b      	ldr	r3, [r3, #0]
 8022714:	3314      	adds	r3, #20
 8022716:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022718:	6a3b      	ldr	r3, [r7, #32]
 802271a:	e853 3f00 	ldrex	r3, [r3]
 802271e:	61fb      	str	r3, [r7, #28]
   return(result);
 8022720:	69fb      	ldr	r3, [r7, #28]
 8022722:	f023 0301 	bic.w	r3, r3, #1
 8022726:	64bb      	str	r3, [r7, #72]	; 0x48
 8022728:	687b      	ldr	r3, [r7, #4]
 802272a:	681b      	ldr	r3, [r3, #0]
 802272c:	3314      	adds	r3, #20
 802272e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8022730:	62fa      	str	r2, [r7, #44]	; 0x2c
 8022732:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022734:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8022736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022738:	e841 2300 	strex	r3, r2, [r1]
 802273c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022740:	2b00      	cmp	r3, #0
 8022742:	d1e5      	bne.n	8022710 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8022744:	687b      	ldr	r3, [r7, #4]
 8022746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022748:	2b01      	cmp	r3, #1
 802274a:	d119      	bne.n	8022780 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802274c:	687b      	ldr	r3, [r7, #4]
 802274e:	681b      	ldr	r3, [r3, #0]
 8022750:	330c      	adds	r3, #12
 8022752:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022754:	68fb      	ldr	r3, [r7, #12]
 8022756:	e853 3f00 	ldrex	r3, [r3]
 802275a:	60bb      	str	r3, [r7, #8]
   return(result);
 802275c:	68bb      	ldr	r3, [r7, #8]
 802275e:	f023 0310 	bic.w	r3, r3, #16
 8022762:	647b      	str	r3, [r7, #68]	; 0x44
 8022764:	687b      	ldr	r3, [r7, #4]
 8022766:	681b      	ldr	r3, [r3, #0]
 8022768:	330c      	adds	r3, #12
 802276a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802276c:	61ba      	str	r2, [r7, #24]
 802276e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022770:	6979      	ldr	r1, [r7, #20]
 8022772:	69ba      	ldr	r2, [r7, #24]
 8022774:	e841 2300 	strex	r3, r2, [r1]
 8022778:	613b      	str	r3, [r7, #16]
   return(result);
 802277a:	693b      	ldr	r3, [r7, #16]
 802277c:	2b00      	cmp	r3, #0
 802277e:	d1e5      	bne.n	802274c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8022780:	687b      	ldr	r3, [r7, #4]
 8022782:	2220      	movs	r2, #32
 8022784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022788:	687b      	ldr	r3, [r7, #4]
 802278a:	2200      	movs	r2, #0
 802278c:	631a      	str	r2, [r3, #48]	; 0x30
}
 802278e:	bf00      	nop
 8022790:	3754      	adds	r7, #84	; 0x54
 8022792:	46bd      	mov	sp, r7
 8022794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022798:	4770      	bx	lr

0802279a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802279a:	b580      	push	{r7, lr}
 802279c:	b084      	sub	sp, #16
 802279e:	af00      	add	r7, sp, #0
 80227a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80227a2:	687b      	ldr	r3, [r7, #4]
 80227a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80227a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80227a8:	68fb      	ldr	r3, [r7, #12]
 80227aa:	2200      	movs	r2, #0
 80227ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80227ae:	68fb      	ldr	r3, [r7, #12]
 80227b0:	2200      	movs	r2, #0
 80227b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80227b4:	68f8      	ldr	r0, [r7, #12]
 80227b6:	f7ff ff09 	bl	80225cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80227ba:	bf00      	nop
 80227bc:	3710      	adds	r7, #16
 80227be:	46bd      	mov	sp, r7
 80227c0:	bd80      	pop	{r7, pc}

080227c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80227c2:	b480      	push	{r7}
 80227c4:	b085      	sub	sp, #20
 80227c6:	af00      	add	r7, sp, #0
 80227c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80227ca:	687b      	ldr	r3, [r7, #4]
 80227cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80227d0:	b2db      	uxtb	r3, r3
 80227d2:	2b21      	cmp	r3, #33	; 0x21
 80227d4:	d13e      	bne.n	8022854 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80227d6:	687b      	ldr	r3, [r7, #4]
 80227d8:	689b      	ldr	r3, [r3, #8]
 80227da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80227de:	d114      	bne.n	802280a <UART_Transmit_IT+0x48>
 80227e0:	687b      	ldr	r3, [r7, #4]
 80227e2:	691b      	ldr	r3, [r3, #16]
 80227e4:	2b00      	cmp	r3, #0
 80227e6:	d110      	bne.n	802280a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80227e8:	687b      	ldr	r3, [r7, #4]
 80227ea:	6a1b      	ldr	r3, [r3, #32]
 80227ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80227ee:	68fb      	ldr	r3, [r7, #12]
 80227f0:	881b      	ldrh	r3, [r3, #0]
 80227f2:	461a      	mov	r2, r3
 80227f4:	687b      	ldr	r3, [r7, #4]
 80227f6:	681b      	ldr	r3, [r3, #0]
 80227f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80227fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80227fe:	687b      	ldr	r3, [r7, #4]
 8022800:	6a1b      	ldr	r3, [r3, #32]
 8022802:	1c9a      	adds	r2, r3, #2
 8022804:	687b      	ldr	r3, [r7, #4]
 8022806:	621a      	str	r2, [r3, #32]
 8022808:	e008      	b.n	802281c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 802280a:	687b      	ldr	r3, [r7, #4]
 802280c:	6a1b      	ldr	r3, [r3, #32]
 802280e:	1c59      	adds	r1, r3, #1
 8022810:	687a      	ldr	r2, [r7, #4]
 8022812:	6211      	str	r1, [r2, #32]
 8022814:	781a      	ldrb	r2, [r3, #0]
 8022816:	687b      	ldr	r3, [r7, #4]
 8022818:	681b      	ldr	r3, [r3, #0]
 802281a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 802281c:	687b      	ldr	r3, [r7, #4]
 802281e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8022820:	b29b      	uxth	r3, r3
 8022822:	3b01      	subs	r3, #1
 8022824:	b29b      	uxth	r3, r3
 8022826:	687a      	ldr	r2, [r7, #4]
 8022828:	4619      	mov	r1, r3
 802282a:	84d1      	strh	r1, [r2, #38]	; 0x26
 802282c:	2b00      	cmp	r3, #0
 802282e:	d10f      	bne.n	8022850 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8022830:	687b      	ldr	r3, [r7, #4]
 8022832:	681b      	ldr	r3, [r3, #0]
 8022834:	68da      	ldr	r2, [r3, #12]
 8022836:	687b      	ldr	r3, [r7, #4]
 8022838:	681b      	ldr	r3, [r3, #0]
 802283a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802283e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8022840:	687b      	ldr	r3, [r7, #4]
 8022842:	681b      	ldr	r3, [r3, #0]
 8022844:	68da      	ldr	r2, [r3, #12]
 8022846:	687b      	ldr	r3, [r7, #4]
 8022848:	681b      	ldr	r3, [r3, #0]
 802284a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802284e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8022850:	2300      	movs	r3, #0
 8022852:	e000      	b.n	8022856 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8022854:	2302      	movs	r3, #2
  }
}
 8022856:	4618      	mov	r0, r3
 8022858:	3714      	adds	r7, #20
 802285a:	46bd      	mov	sp, r7
 802285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022860:	4770      	bx	lr

08022862 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8022862:	b580      	push	{r7, lr}
 8022864:	b082      	sub	sp, #8
 8022866:	af00      	add	r7, sp, #0
 8022868:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 802286a:	687b      	ldr	r3, [r7, #4]
 802286c:	681b      	ldr	r3, [r3, #0]
 802286e:	68da      	ldr	r2, [r3, #12]
 8022870:	687b      	ldr	r3, [r7, #4]
 8022872:	681b      	ldr	r3, [r3, #0]
 8022874:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8022878:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802287a:	687b      	ldr	r3, [r7, #4]
 802287c:	2220      	movs	r2, #32
 802287e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8022882:	6878      	ldr	r0, [r7, #4]
 8022884:	f7ff fe8e 	bl	80225a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8022888:	2300      	movs	r3, #0
}
 802288a:	4618      	mov	r0, r3
 802288c:	3708      	adds	r7, #8
 802288e:	46bd      	mov	sp, r7
 8022890:	bd80      	pop	{r7, pc}

08022892 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8022892:	b580      	push	{r7, lr}
 8022894:	b08c      	sub	sp, #48	; 0x30
 8022896:	af00      	add	r7, sp, #0
 8022898:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802289a:	687b      	ldr	r3, [r7, #4]
 802289c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80228a0:	b2db      	uxtb	r3, r3
 80228a2:	2b22      	cmp	r3, #34	; 0x22
 80228a4:	f040 80ab 	bne.w	80229fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80228a8:	687b      	ldr	r3, [r7, #4]
 80228aa:	689b      	ldr	r3, [r3, #8]
 80228ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80228b0:	d117      	bne.n	80228e2 <UART_Receive_IT+0x50>
 80228b2:	687b      	ldr	r3, [r7, #4]
 80228b4:	691b      	ldr	r3, [r3, #16]
 80228b6:	2b00      	cmp	r3, #0
 80228b8:	d113      	bne.n	80228e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80228ba:	2300      	movs	r3, #0
 80228bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80228be:	687b      	ldr	r3, [r7, #4]
 80228c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80228c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80228c4:	687b      	ldr	r3, [r7, #4]
 80228c6:	681b      	ldr	r3, [r3, #0]
 80228c8:	685b      	ldr	r3, [r3, #4]
 80228ca:	b29b      	uxth	r3, r3
 80228cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80228d0:	b29a      	uxth	r2, r3
 80228d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80228d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80228d6:	687b      	ldr	r3, [r7, #4]
 80228d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80228da:	1c9a      	adds	r2, r3, #2
 80228dc:	687b      	ldr	r3, [r7, #4]
 80228de:	629a      	str	r2, [r3, #40]	; 0x28
 80228e0:	e026      	b.n	8022930 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80228e2:	687b      	ldr	r3, [r7, #4]
 80228e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80228e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80228e8:	2300      	movs	r3, #0
 80228ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80228ec:	687b      	ldr	r3, [r7, #4]
 80228ee:	689b      	ldr	r3, [r3, #8]
 80228f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80228f4:	d007      	beq.n	8022906 <UART_Receive_IT+0x74>
 80228f6:	687b      	ldr	r3, [r7, #4]
 80228f8:	689b      	ldr	r3, [r3, #8]
 80228fa:	2b00      	cmp	r3, #0
 80228fc:	d10a      	bne.n	8022914 <UART_Receive_IT+0x82>
 80228fe:	687b      	ldr	r3, [r7, #4]
 8022900:	691b      	ldr	r3, [r3, #16]
 8022902:	2b00      	cmp	r3, #0
 8022904:	d106      	bne.n	8022914 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8022906:	687b      	ldr	r3, [r7, #4]
 8022908:	681b      	ldr	r3, [r3, #0]
 802290a:	685b      	ldr	r3, [r3, #4]
 802290c:	b2da      	uxtb	r2, r3
 802290e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022910:	701a      	strb	r2, [r3, #0]
 8022912:	e008      	b.n	8022926 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8022914:	687b      	ldr	r3, [r7, #4]
 8022916:	681b      	ldr	r3, [r3, #0]
 8022918:	685b      	ldr	r3, [r3, #4]
 802291a:	b2db      	uxtb	r3, r3
 802291c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8022920:	b2da      	uxtb	r2, r3
 8022922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022924:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8022926:	687b      	ldr	r3, [r7, #4]
 8022928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802292a:	1c5a      	adds	r2, r3, #1
 802292c:	687b      	ldr	r3, [r7, #4]
 802292e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8022930:	687b      	ldr	r3, [r7, #4]
 8022932:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8022934:	b29b      	uxth	r3, r3
 8022936:	3b01      	subs	r3, #1
 8022938:	b29b      	uxth	r3, r3
 802293a:	687a      	ldr	r2, [r7, #4]
 802293c:	4619      	mov	r1, r3
 802293e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8022940:	2b00      	cmp	r3, #0
 8022942:	d15a      	bne.n	80229fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8022944:	687b      	ldr	r3, [r7, #4]
 8022946:	681b      	ldr	r3, [r3, #0]
 8022948:	68da      	ldr	r2, [r3, #12]
 802294a:	687b      	ldr	r3, [r7, #4]
 802294c:	681b      	ldr	r3, [r3, #0]
 802294e:	f022 0220 	bic.w	r2, r2, #32
 8022952:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8022954:	687b      	ldr	r3, [r7, #4]
 8022956:	681b      	ldr	r3, [r3, #0]
 8022958:	68da      	ldr	r2, [r3, #12]
 802295a:	687b      	ldr	r3, [r7, #4]
 802295c:	681b      	ldr	r3, [r3, #0]
 802295e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8022962:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8022964:	687b      	ldr	r3, [r7, #4]
 8022966:	681b      	ldr	r3, [r3, #0]
 8022968:	695a      	ldr	r2, [r3, #20]
 802296a:	687b      	ldr	r3, [r7, #4]
 802296c:	681b      	ldr	r3, [r3, #0]
 802296e:	f022 0201 	bic.w	r2, r2, #1
 8022972:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8022974:	687b      	ldr	r3, [r7, #4]
 8022976:	2220      	movs	r2, #32
 8022978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802297c:	687b      	ldr	r3, [r7, #4]
 802297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022980:	2b01      	cmp	r3, #1
 8022982:	d135      	bne.n	80229f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022984:	687b      	ldr	r3, [r7, #4]
 8022986:	2200      	movs	r2, #0
 8022988:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802298a:	687b      	ldr	r3, [r7, #4]
 802298c:	681b      	ldr	r3, [r3, #0]
 802298e:	330c      	adds	r3, #12
 8022990:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022992:	697b      	ldr	r3, [r7, #20]
 8022994:	e853 3f00 	ldrex	r3, [r3]
 8022998:	613b      	str	r3, [r7, #16]
   return(result);
 802299a:	693b      	ldr	r3, [r7, #16]
 802299c:	f023 0310 	bic.w	r3, r3, #16
 80229a0:	627b      	str	r3, [r7, #36]	; 0x24
 80229a2:	687b      	ldr	r3, [r7, #4]
 80229a4:	681b      	ldr	r3, [r3, #0]
 80229a6:	330c      	adds	r3, #12
 80229a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80229aa:	623a      	str	r2, [r7, #32]
 80229ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80229ae:	69f9      	ldr	r1, [r7, #28]
 80229b0:	6a3a      	ldr	r2, [r7, #32]
 80229b2:	e841 2300 	strex	r3, r2, [r1]
 80229b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80229b8:	69bb      	ldr	r3, [r7, #24]
 80229ba:	2b00      	cmp	r3, #0
 80229bc:	d1e5      	bne.n	802298a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80229be:	687b      	ldr	r3, [r7, #4]
 80229c0:	681b      	ldr	r3, [r3, #0]
 80229c2:	681b      	ldr	r3, [r3, #0]
 80229c4:	f003 0310 	and.w	r3, r3, #16
 80229c8:	2b10      	cmp	r3, #16
 80229ca:	d10a      	bne.n	80229e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80229cc:	2300      	movs	r3, #0
 80229ce:	60fb      	str	r3, [r7, #12]
 80229d0:	687b      	ldr	r3, [r7, #4]
 80229d2:	681b      	ldr	r3, [r3, #0]
 80229d4:	681b      	ldr	r3, [r3, #0]
 80229d6:	60fb      	str	r3, [r7, #12]
 80229d8:	687b      	ldr	r3, [r7, #4]
 80229da:	681b      	ldr	r3, [r3, #0]
 80229dc:	685b      	ldr	r3, [r3, #4]
 80229de:	60fb      	str	r3, [r7, #12]
 80229e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80229e2:	687b      	ldr	r3, [r7, #4]
 80229e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80229e6:	4619      	mov	r1, r3
 80229e8:	6878      	ldr	r0, [r7, #4]
 80229ea:	f7ff fdf9 	bl	80225e0 <HAL_UARTEx_RxEventCallback>
 80229ee:	e002      	b.n	80229f6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80229f0:	6878      	ldr	r0, [r7, #4]
 80229f2:	f7ff fde1 	bl	80225b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80229f6:	2300      	movs	r3, #0
 80229f8:	e002      	b.n	8022a00 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80229fa:	2300      	movs	r3, #0
 80229fc:	e000      	b.n	8022a00 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80229fe:	2302      	movs	r3, #2
  }
}
 8022a00:	4618      	mov	r0, r3
 8022a02:	3730      	adds	r7, #48	; 0x30
 8022a04:	46bd      	mov	sp, r7
 8022a06:	bd80      	pop	{r7, pc}

08022a08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8022a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a0c:	b09f      	sub	sp, #124	; 0x7c
 8022a0e:	af00      	add	r7, sp, #0
 8022a10:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8022a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022a14:	681b      	ldr	r3, [r3, #0]
 8022a16:	691b      	ldr	r3, [r3, #16]
 8022a18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8022a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022a1e:	68d9      	ldr	r1, [r3, #12]
 8022a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022a22:	681a      	ldr	r2, [r3, #0]
 8022a24:	ea40 0301 	orr.w	r3, r0, r1
 8022a28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8022a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022a2c:	689a      	ldr	r2, [r3, #8]
 8022a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022a30:	691b      	ldr	r3, [r3, #16]
 8022a32:	431a      	orrs	r2, r3
 8022a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022a36:	695b      	ldr	r3, [r3, #20]
 8022a38:	431a      	orrs	r2, r3
 8022a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022a3c:	69db      	ldr	r3, [r3, #28]
 8022a3e:	4313      	orrs	r3, r2
 8022a40:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8022a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022a44:	681b      	ldr	r3, [r3, #0]
 8022a46:	68db      	ldr	r3, [r3, #12]
 8022a48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8022a4c:	f021 010c 	bic.w	r1, r1, #12
 8022a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022a52:	681a      	ldr	r2, [r3, #0]
 8022a54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8022a56:	430b      	orrs	r3, r1
 8022a58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8022a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022a5c:	681b      	ldr	r3, [r3, #0]
 8022a5e:	695b      	ldr	r3, [r3, #20]
 8022a60:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8022a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022a66:	6999      	ldr	r1, [r3, #24]
 8022a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022a6a:	681a      	ldr	r2, [r3, #0]
 8022a6c:	ea40 0301 	orr.w	r3, r0, r1
 8022a70:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8022a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022a74:	681a      	ldr	r2, [r3, #0]
 8022a76:	4bc5      	ldr	r3, [pc, #788]	; (8022d8c <UART_SetConfig+0x384>)
 8022a78:	429a      	cmp	r2, r3
 8022a7a:	d004      	beq.n	8022a86 <UART_SetConfig+0x7e>
 8022a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022a7e:	681a      	ldr	r2, [r3, #0]
 8022a80:	4bc3      	ldr	r3, [pc, #780]	; (8022d90 <UART_SetConfig+0x388>)
 8022a82:	429a      	cmp	r2, r3
 8022a84:	d103      	bne.n	8022a8e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8022a86:	f7fe fdab 	bl	80215e0 <HAL_RCC_GetPCLK2Freq>
 8022a8a:	6778      	str	r0, [r7, #116]	; 0x74
 8022a8c:	e002      	b.n	8022a94 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8022a8e:	f7fe fd93 	bl	80215b8 <HAL_RCC_GetPCLK1Freq>
 8022a92:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8022a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022a96:	69db      	ldr	r3, [r3, #28]
 8022a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8022a9c:	f040 80b6 	bne.w	8022c0c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8022aa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8022aa2:	461c      	mov	r4, r3
 8022aa4:	f04f 0500 	mov.w	r5, #0
 8022aa8:	4622      	mov	r2, r4
 8022aaa:	462b      	mov	r3, r5
 8022aac:	1891      	adds	r1, r2, r2
 8022aae:	6439      	str	r1, [r7, #64]	; 0x40
 8022ab0:	415b      	adcs	r3, r3
 8022ab2:	647b      	str	r3, [r7, #68]	; 0x44
 8022ab4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8022ab8:	1912      	adds	r2, r2, r4
 8022aba:	eb45 0303 	adc.w	r3, r5, r3
 8022abe:	f04f 0000 	mov.w	r0, #0
 8022ac2:	f04f 0100 	mov.w	r1, #0
 8022ac6:	00d9      	lsls	r1, r3, #3
 8022ac8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8022acc:	00d0      	lsls	r0, r2, #3
 8022ace:	4602      	mov	r2, r0
 8022ad0:	460b      	mov	r3, r1
 8022ad2:	1911      	adds	r1, r2, r4
 8022ad4:	6639      	str	r1, [r7, #96]	; 0x60
 8022ad6:	416b      	adcs	r3, r5
 8022ad8:	667b      	str	r3, [r7, #100]	; 0x64
 8022ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022adc:	685b      	ldr	r3, [r3, #4]
 8022ade:	461a      	mov	r2, r3
 8022ae0:	f04f 0300 	mov.w	r3, #0
 8022ae4:	1891      	adds	r1, r2, r2
 8022ae6:	63b9      	str	r1, [r7, #56]	; 0x38
 8022ae8:	415b      	adcs	r3, r3
 8022aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022aec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8022af0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8022af4:	f7fd fb86 	bl	8020204 <__aeabi_uldivmod>
 8022af8:	4602      	mov	r2, r0
 8022afa:	460b      	mov	r3, r1
 8022afc:	4ba5      	ldr	r3, [pc, #660]	; (8022d94 <UART_SetConfig+0x38c>)
 8022afe:	fba3 2302 	umull	r2, r3, r3, r2
 8022b02:	095b      	lsrs	r3, r3, #5
 8022b04:	011e      	lsls	r6, r3, #4
 8022b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8022b08:	461c      	mov	r4, r3
 8022b0a:	f04f 0500 	mov.w	r5, #0
 8022b0e:	4622      	mov	r2, r4
 8022b10:	462b      	mov	r3, r5
 8022b12:	1891      	adds	r1, r2, r2
 8022b14:	6339      	str	r1, [r7, #48]	; 0x30
 8022b16:	415b      	adcs	r3, r3
 8022b18:	637b      	str	r3, [r7, #52]	; 0x34
 8022b1a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8022b1e:	1912      	adds	r2, r2, r4
 8022b20:	eb45 0303 	adc.w	r3, r5, r3
 8022b24:	f04f 0000 	mov.w	r0, #0
 8022b28:	f04f 0100 	mov.w	r1, #0
 8022b2c:	00d9      	lsls	r1, r3, #3
 8022b2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8022b32:	00d0      	lsls	r0, r2, #3
 8022b34:	4602      	mov	r2, r0
 8022b36:	460b      	mov	r3, r1
 8022b38:	1911      	adds	r1, r2, r4
 8022b3a:	65b9      	str	r1, [r7, #88]	; 0x58
 8022b3c:	416b      	adcs	r3, r5
 8022b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8022b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022b42:	685b      	ldr	r3, [r3, #4]
 8022b44:	461a      	mov	r2, r3
 8022b46:	f04f 0300 	mov.w	r3, #0
 8022b4a:	1891      	adds	r1, r2, r2
 8022b4c:	62b9      	str	r1, [r7, #40]	; 0x28
 8022b4e:	415b      	adcs	r3, r3
 8022b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022b52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8022b56:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8022b5a:	f7fd fb53 	bl	8020204 <__aeabi_uldivmod>
 8022b5e:	4602      	mov	r2, r0
 8022b60:	460b      	mov	r3, r1
 8022b62:	4b8c      	ldr	r3, [pc, #560]	; (8022d94 <UART_SetConfig+0x38c>)
 8022b64:	fba3 1302 	umull	r1, r3, r3, r2
 8022b68:	095b      	lsrs	r3, r3, #5
 8022b6a:	2164      	movs	r1, #100	; 0x64
 8022b6c:	fb01 f303 	mul.w	r3, r1, r3
 8022b70:	1ad3      	subs	r3, r2, r3
 8022b72:	00db      	lsls	r3, r3, #3
 8022b74:	3332      	adds	r3, #50	; 0x32
 8022b76:	4a87      	ldr	r2, [pc, #540]	; (8022d94 <UART_SetConfig+0x38c>)
 8022b78:	fba2 2303 	umull	r2, r3, r2, r3
 8022b7c:	095b      	lsrs	r3, r3, #5
 8022b7e:	005b      	lsls	r3, r3, #1
 8022b80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8022b84:	441e      	add	r6, r3
 8022b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8022b88:	4618      	mov	r0, r3
 8022b8a:	f04f 0100 	mov.w	r1, #0
 8022b8e:	4602      	mov	r2, r0
 8022b90:	460b      	mov	r3, r1
 8022b92:	1894      	adds	r4, r2, r2
 8022b94:	623c      	str	r4, [r7, #32]
 8022b96:	415b      	adcs	r3, r3
 8022b98:	627b      	str	r3, [r7, #36]	; 0x24
 8022b9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022b9e:	1812      	adds	r2, r2, r0
 8022ba0:	eb41 0303 	adc.w	r3, r1, r3
 8022ba4:	f04f 0400 	mov.w	r4, #0
 8022ba8:	f04f 0500 	mov.w	r5, #0
 8022bac:	00dd      	lsls	r5, r3, #3
 8022bae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8022bb2:	00d4      	lsls	r4, r2, #3
 8022bb4:	4622      	mov	r2, r4
 8022bb6:	462b      	mov	r3, r5
 8022bb8:	1814      	adds	r4, r2, r0
 8022bba:	653c      	str	r4, [r7, #80]	; 0x50
 8022bbc:	414b      	adcs	r3, r1
 8022bbe:	657b      	str	r3, [r7, #84]	; 0x54
 8022bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022bc2:	685b      	ldr	r3, [r3, #4]
 8022bc4:	461a      	mov	r2, r3
 8022bc6:	f04f 0300 	mov.w	r3, #0
 8022bca:	1891      	adds	r1, r2, r2
 8022bcc:	61b9      	str	r1, [r7, #24]
 8022bce:	415b      	adcs	r3, r3
 8022bd0:	61fb      	str	r3, [r7, #28]
 8022bd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8022bd6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8022bda:	f7fd fb13 	bl	8020204 <__aeabi_uldivmod>
 8022bde:	4602      	mov	r2, r0
 8022be0:	460b      	mov	r3, r1
 8022be2:	4b6c      	ldr	r3, [pc, #432]	; (8022d94 <UART_SetConfig+0x38c>)
 8022be4:	fba3 1302 	umull	r1, r3, r3, r2
 8022be8:	095b      	lsrs	r3, r3, #5
 8022bea:	2164      	movs	r1, #100	; 0x64
 8022bec:	fb01 f303 	mul.w	r3, r1, r3
 8022bf0:	1ad3      	subs	r3, r2, r3
 8022bf2:	00db      	lsls	r3, r3, #3
 8022bf4:	3332      	adds	r3, #50	; 0x32
 8022bf6:	4a67      	ldr	r2, [pc, #412]	; (8022d94 <UART_SetConfig+0x38c>)
 8022bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8022bfc:	095b      	lsrs	r3, r3, #5
 8022bfe:	f003 0207 	and.w	r2, r3, #7
 8022c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022c04:	681b      	ldr	r3, [r3, #0]
 8022c06:	4432      	add	r2, r6
 8022c08:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8022c0a:	e0b9      	b.n	8022d80 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8022c0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8022c0e:	461c      	mov	r4, r3
 8022c10:	f04f 0500 	mov.w	r5, #0
 8022c14:	4622      	mov	r2, r4
 8022c16:	462b      	mov	r3, r5
 8022c18:	1891      	adds	r1, r2, r2
 8022c1a:	6139      	str	r1, [r7, #16]
 8022c1c:	415b      	adcs	r3, r3
 8022c1e:	617b      	str	r3, [r7, #20]
 8022c20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8022c24:	1912      	adds	r2, r2, r4
 8022c26:	eb45 0303 	adc.w	r3, r5, r3
 8022c2a:	f04f 0000 	mov.w	r0, #0
 8022c2e:	f04f 0100 	mov.w	r1, #0
 8022c32:	00d9      	lsls	r1, r3, #3
 8022c34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8022c38:	00d0      	lsls	r0, r2, #3
 8022c3a:	4602      	mov	r2, r0
 8022c3c:	460b      	mov	r3, r1
 8022c3e:	eb12 0804 	adds.w	r8, r2, r4
 8022c42:	eb43 0905 	adc.w	r9, r3, r5
 8022c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022c48:	685b      	ldr	r3, [r3, #4]
 8022c4a:	4618      	mov	r0, r3
 8022c4c:	f04f 0100 	mov.w	r1, #0
 8022c50:	f04f 0200 	mov.w	r2, #0
 8022c54:	f04f 0300 	mov.w	r3, #0
 8022c58:	008b      	lsls	r3, r1, #2
 8022c5a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8022c5e:	0082      	lsls	r2, r0, #2
 8022c60:	4640      	mov	r0, r8
 8022c62:	4649      	mov	r1, r9
 8022c64:	f7fd face 	bl	8020204 <__aeabi_uldivmod>
 8022c68:	4602      	mov	r2, r0
 8022c6a:	460b      	mov	r3, r1
 8022c6c:	4b49      	ldr	r3, [pc, #292]	; (8022d94 <UART_SetConfig+0x38c>)
 8022c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8022c72:	095b      	lsrs	r3, r3, #5
 8022c74:	011e      	lsls	r6, r3, #4
 8022c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8022c78:	4618      	mov	r0, r3
 8022c7a:	f04f 0100 	mov.w	r1, #0
 8022c7e:	4602      	mov	r2, r0
 8022c80:	460b      	mov	r3, r1
 8022c82:	1894      	adds	r4, r2, r2
 8022c84:	60bc      	str	r4, [r7, #8]
 8022c86:	415b      	adcs	r3, r3
 8022c88:	60fb      	str	r3, [r7, #12]
 8022c8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022c8e:	1812      	adds	r2, r2, r0
 8022c90:	eb41 0303 	adc.w	r3, r1, r3
 8022c94:	f04f 0400 	mov.w	r4, #0
 8022c98:	f04f 0500 	mov.w	r5, #0
 8022c9c:	00dd      	lsls	r5, r3, #3
 8022c9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8022ca2:	00d4      	lsls	r4, r2, #3
 8022ca4:	4622      	mov	r2, r4
 8022ca6:	462b      	mov	r3, r5
 8022ca8:	1814      	adds	r4, r2, r0
 8022caa:	64bc      	str	r4, [r7, #72]	; 0x48
 8022cac:	414b      	adcs	r3, r1
 8022cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8022cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022cb2:	685b      	ldr	r3, [r3, #4]
 8022cb4:	4618      	mov	r0, r3
 8022cb6:	f04f 0100 	mov.w	r1, #0
 8022cba:	f04f 0200 	mov.w	r2, #0
 8022cbe:	f04f 0300 	mov.w	r3, #0
 8022cc2:	008b      	lsls	r3, r1, #2
 8022cc4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8022cc8:	0082      	lsls	r2, r0, #2
 8022cca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8022cce:	f7fd fa99 	bl	8020204 <__aeabi_uldivmod>
 8022cd2:	4602      	mov	r2, r0
 8022cd4:	460b      	mov	r3, r1
 8022cd6:	4b2f      	ldr	r3, [pc, #188]	; (8022d94 <UART_SetConfig+0x38c>)
 8022cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8022cdc:	095b      	lsrs	r3, r3, #5
 8022cde:	2164      	movs	r1, #100	; 0x64
 8022ce0:	fb01 f303 	mul.w	r3, r1, r3
 8022ce4:	1ad3      	subs	r3, r2, r3
 8022ce6:	011b      	lsls	r3, r3, #4
 8022ce8:	3332      	adds	r3, #50	; 0x32
 8022cea:	4a2a      	ldr	r2, [pc, #168]	; (8022d94 <UART_SetConfig+0x38c>)
 8022cec:	fba2 2303 	umull	r2, r3, r2, r3
 8022cf0:	095b      	lsrs	r3, r3, #5
 8022cf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8022cf6:	441e      	add	r6, r3
 8022cf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8022cfa:	4618      	mov	r0, r3
 8022cfc:	f04f 0100 	mov.w	r1, #0
 8022d00:	4602      	mov	r2, r0
 8022d02:	460b      	mov	r3, r1
 8022d04:	1894      	adds	r4, r2, r2
 8022d06:	603c      	str	r4, [r7, #0]
 8022d08:	415b      	adcs	r3, r3
 8022d0a:	607b      	str	r3, [r7, #4]
 8022d0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022d10:	1812      	adds	r2, r2, r0
 8022d12:	eb41 0303 	adc.w	r3, r1, r3
 8022d16:	f04f 0400 	mov.w	r4, #0
 8022d1a:	f04f 0500 	mov.w	r5, #0
 8022d1e:	00dd      	lsls	r5, r3, #3
 8022d20:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8022d24:	00d4      	lsls	r4, r2, #3
 8022d26:	4622      	mov	r2, r4
 8022d28:	462b      	mov	r3, r5
 8022d2a:	eb12 0a00 	adds.w	sl, r2, r0
 8022d2e:	eb43 0b01 	adc.w	fp, r3, r1
 8022d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022d34:	685b      	ldr	r3, [r3, #4]
 8022d36:	4618      	mov	r0, r3
 8022d38:	f04f 0100 	mov.w	r1, #0
 8022d3c:	f04f 0200 	mov.w	r2, #0
 8022d40:	f04f 0300 	mov.w	r3, #0
 8022d44:	008b      	lsls	r3, r1, #2
 8022d46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8022d4a:	0082      	lsls	r2, r0, #2
 8022d4c:	4650      	mov	r0, sl
 8022d4e:	4659      	mov	r1, fp
 8022d50:	f7fd fa58 	bl	8020204 <__aeabi_uldivmod>
 8022d54:	4602      	mov	r2, r0
 8022d56:	460b      	mov	r3, r1
 8022d58:	4b0e      	ldr	r3, [pc, #56]	; (8022d94 <UART_SetConfig+0x38c>)
 8022d5a:	fba3 1302 	umull	r1, r3, r3, r2
 8022d5e:	095b      	lsrs	r3, r3, #5
 8022d60:	2164      	movs	r1, #100	; 0x64
 8022d62:	fb01 f303 	mul.w	r3, r1, r3
 8022d66:	1ad3      	subs	r3, r2, r3
 8022d68:	011b      	lsls	r3, r3, #4
 8022d6a:	3332      	adds	r3, #50	; 0x32
 8022d6c:	4a09      	ldr	r2, [pc, #36]	; (8022d94 <UART_SetConfig+0x38c>)
 8022d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8022d72:	095b      	lsrs	r3, r3, #5
 8022d74:	f003 020f 	and.w	r2, r3, #15
 8022d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8022d7a:	681b      	ldr	r3, [r3, #0]
 8022d7c:	4432      	add	r2, r6
 8022d7e:	609a      	str	r2, [r3, #8]
}
 8022d80:	bf00      	nop
 8022d82:	377c      	adds	r7, #124	; 0x7c
 8022d84:	46bd      	mov	sp, r7
 8022d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d8a:	bf00      	nop
 8022d8c:	40011000 	.word	0x40011000
 8022d90:	40011400 	.word	0x40011400
 8022d94:	51eb851f 	.word	0x51eb851f

08022d98 <__libc_init_array>:
 8022d98:	b570      	push	{r4, r5, r6, lr}
 8022d9a:	4d0d      	ldr	r5, [pc, #52]	; (8022dd0 <__libc_init_array+0x38>)
 8022d9c:	4c0d      	ldr	r4, [pc, #52]	; (8022dd4 <__libc_init_array+0x3c>)
 8022d9e:	1b64      	subs	r4, r4, r5
 8022da0:	10a4      	asrs	r4, r4, #2
 8022da2:	2600      	movs	r6, #0
 8022da4:	42a6      	cmp	r6, r4
 8022da6:	d109      	bne.n	8022dbc <__libc_init_array+0x24>
 8022da8:	4d0b      	ldr	r5, [pc, #44]	; (8022dd8 <__libc_init_array+0x40>)
 8022daa:	4c0c      	ldr	r4, [pc, #48]	; (8022ddc <__libc_init_array+0x44>)
 8022dac:	f000 f820 	bl	8022df0 <_init>
 8022db0:	1b64      	subs	r4, r4, r5
 8022db2:	10a4      	asrs	r4, r4, #2
 8022db4:	2600      	movs	r6, #0
 8022db6:	42a6      	cmp	r6, r4
 8022db8:	d105      	bne.n	8022dc6 <__libc_init_array+0x2e>
 8022dba:	bd70      	pop	{r4, r5, r6, pc}
 8022dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8022dc0:	4798      	blx	r3
 8022dc2:	3601      	adds	r6, #1
 8022dc4:	e7ee      	b.n	8022da4 <__libc_init_array+0xc>
 8022dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8022dca:	4798      	blx	r3
 8022dcc:	3601      	adds	r6, #1
 8022dce:	e7f2      	b.n	8022db6 <__libc_init_array+0x1e>
 8022dd0:	08022ea0 	.word	0x08022ea0
 8022dd4:	08022ea0 	.word	0x08022ea0
 8022dd8:	08022ea0 	.word	0x08022ea0
 8022ddc:	08022ea4 	.word	0x08022ea4

08022de0 <memset>:
 8022de0:	4402      	add	r2, r0
 8022de2:	4603      	mov	r3, r0
 8022de4:	4293      	cmp	r3, r2
 8022de6:	d100      	bne.n	8022dea <memset+0xa>
 8022de8:	4770      	bx	lr
 8022dea:	f803 1b01 	strb.w	r1, [r3], #1
 8022dee:	e7f9      	b.n	8022de4 <memset+0x4>

08022df0 <_init>:
 8022df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022df2:	bf00      	nop
 8022df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022df6:	bc08      	pop	{r3}
 8022df8:	469e      	mov	lr, r3
 8022dfa:	4770      	bx	lr

08022dfc <_fini>:
 8022dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022dfe:	bf00      	nop
 8022e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022e02:	bc08      	pop	{r3}
 8022e04:	469e      	mov	lr, r3
 8022e06:	4770      	bx	lr
